/*
# Copyright (c) 2021 Juan J. Garcia Mesa <juanjosegarciamesa@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
*/

#include <benchmark/benchmark.h>
#include <fst/fstlib.h>

#include <coati/align_fst.hpp>
#include <coati/align_marginal.hpp>
#include <coati/io.hpp>
#include <string>
#include <chrono>

/* marginal pairwise alignment */
template <class ...ExtraArgs>
static void BM_marg_alignment(benchmark::State& state, ExtraArgs&&... extra_args) {
    // initialize auxiliary variables
    coati::args_t args;
    std::string fasta(std::forward<ExtraArgs>(extra_args)...);

    for(auto _ : state) {
        auto start = std::chrono::high_resolution_clock::now();

        args.aln.data.path = fasta;

        // pairwise alignment and report time elapsed
        coati::marg_alignment(args.aln);
        auto end = std::chrono::high_resolution_clock::now();
        auto elapsed_time =
            std::chrono::duration_cast<std::chrono::duration<double>>(end-start);
        state.SetIterationTime(elapsed_time.count());
    }

    std::filesystem::remove(args.aln.output);
}

/* marginal alignment with different length fasta files */
BENCHMARK_CAPTURE(BM_marg_alignment, bm_156, std::string("@bm_data@/benchmark_156.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_marg_alignment, bm_1k, std::string("@bm_data@/benchmark_1k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_marg_alignment, bm_2k, std::string("@bm_data@/benchmark_2k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_marg_alignment, bm_4k, std::string("@bm_data@/benchmark_4k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_marg_alignment, bm_8k, std::string("@bm_data@/benchmark_8k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_marg_alignment, bm_16k, std::string("@bm_data@/benchmark_16k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_marg_alignment, bm_32k, std::string("@bm_data@/benchmark_32k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);

/* fst pairwise alignment */
template <class ...ExtraArgs>
static void BM_fst_alignment(benchmark::State& state, ExtraArgs&&... extra_args) {
    // initialize auxiliary variables
    coati::args_t args;
    std::string fasta(std::forward<ExtraArgs>(extra_args)...);

    for(auto _ : state) {
        auto start = std::chrono::high_resolution_clock::now();

        // set model to coati
        args.aln.model = "tri-mg";

        args.aln.data.path = fasta;

        // pairwise alignment via FST composition and report time elapsed
        coati::fst_alignment(args.aln);
        auto end = std::chrono::high_resolution_clock::now();
        auto elapsed_time =
            std::chrono::duration_cast<std::chrono::duration<double>>(end-start);
        state.SetIterationTime(elapsed_time.count());
    }

    std::filesystem::remove(args.aln.output);
}

BENCHMARK_CAPTURE(BM_fst_alignment, bm_156, std::string("@bm_data@/benchmark_156.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_fst_alignment, bm_1k, std::string("@bm_data@/benchmark_1k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);
BENCHMARK_CAPTURE(BM_fst_alignment, bm_2k, std::string("@bm_data@/benchmark_2k.fasta"))
    ->UseManualTime()
    ->Unit(benchmark::kMillisecond);

BENCHMARK_MAIN();
