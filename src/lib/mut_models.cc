/*
# Copyright (c) 2020 Juan J. Garcia Mesa <juanjosegarciamesa@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
*/

#include <doctest/doctest.h>

#include <coati/mut_models.hpp>

/* nonsynonymous-synonymous bias (\omega) */
const double omega = 0.2;  // github.com/reedacartwright/toycoati

/* Muse & Gaut Model (1994) P matrix */
void mg94_q(Matrix64f& Q) {
    // Yang (1994) estimating the pattern of nucleotide substitution
    double nuc_freqs[4] = {0.308, 0.185, 0.199, 0.308};
    double nuc_q[4][4] = {{-0.818, 0.132, 0.586, 0.1},
                          {0.221, -1.349, 0.231, 0.897},
                          {0.909, 0.215, -1.322, 0.198},
                          {0.1, 0.537, 0.128, -0.765}};

    // MG94 model - doi:10.1534/genetics.108.092254
    Q = Matrix64f::Zero();
    Matrix64f Pi;
    double w, d = 0.0;
    int x, y = 0;

    // construct transition matrix
    for(uint8_t i = 0; i < 64; i++) {
        // uint8_t codon;
        // (codon & 48) >> 4 = nt4_table encoding of first codon nucleotide
        // (codon & 12) >> 2 = nt4_table encoding of second codon nucleotide
        // (codon & 03) = nt4_table encoding of third codon nucleotide
        // e.g. 00 00 11 10 = 00 A T G = codon "ATG"
        // (00001110 & 48) >> 4 = (00001110 & 00110000) >> 4 = 00000000 >> 4 = 0
        // (A) (00001110 & 12) >> 2 = (00001110 & 00001100) >> 2 = 00001100 >> 2
        // = 3 (T)
        // (00001110 & 03) 		= (00001110 & 00000011) 	 =
        // 00000010 = 2 (G)

        Pi(i) = nuc_freqs[((i & 48) >> 4)] * nuc_freqs[((i & 12) >> 2)] *
                nuc_freqs[(i & 3)];
        double rowSum = 0.0;
        for(uint8_t j = 0; j < 64; j++) {
            if(i == j) {
                Q(i, j) = 0;
            } else if(cod_distance(i, j) > 1) {
                Q(i, j) = 0;
            } else {
                w = ((nt4_table[i] == nt4_table[j]) ? 1 : omega);

                // split into cases to avoid use of pow (speed-up)
                if((i & (uint8_t)(48)) != (j & (uint8_t)48)) {
                    x = ((i & (uint8_t)48) >> 4);
                    y = ((j & (uint8_t)48) >> 4);
                } else if((i & (uint8_t)12) != (j & (uint8_t)12)) {
                    x = ((i & (uint8_t)12) >> (2));
                    y = ((j & (uint8_t)12) >> (2));
                } else if((i & (uint8_t)3) != (j & (uint8_t)3)) {
                    x = ((i & (uint8_t)3));
                    y = ((j & (uint8_t)3));
                }

                Q(i, j) = w * nuc_q[x][y];
            }
            rowSum += Q(i, j);
        }
        Q(i, i) = -rowSum;
        d += Pi(i) * rowSum;
    }

    // normalize
    Q = Q / d;
}

TEST_CASE("[mut_models.cc] mg94_q") {
    Matrix64f Q;
    mg94_q(Q);

    for(int i = 0; i < 64; i++) {
        CHECK(Q(i, i) < 0);  // main diagonal has negative values
        CHECK(Q.row(i).sum() == doctest::Approx(0));  // sum of every row is 0
    }

    CHECK((Q.array() == 0.0).count() ==
          64 * 64 - 64 * 10);  // only 10 values per row are non-zero

    constexpr int indexes[640] = {
        0,    1,    2,    3,    4,    8,    12,   16,   32,   48,   64,   65,
        66,   67,   69,   73,   77,   81,   97,   113,  128,  129,  130,  131,
        134,  138,  142,  146,  162,  178,  192,  193,  194,  195,  199,  203,
        207,  211,  227,  243,  256,  260,  261,  262,  263,  264,  268,  276,
        292,  308,  321,  324,  325,  326,  327,  329,  333,  341,  357,  373,
        386,  388,  389,  390,  391,  394,  398,  406,  422,  438,  451,  452,
        453,  454,  455,  459,  463,  471,  487,  503,  512,  516,  520,  521,
        522,  523,  524,  536,  552,  568,  577,  581,  584,  585,  586,  587,
        589,  601,  617,  633,  642,  646,  648,  649,  650,  651,  654,  666,
        682,  698,  707,  711,  712,  713,  714,  715,  719,  731,  747,  763,
        768,  772,  776,  780,  781,  782,  783,  796,  812,  828,  833,  837,
        841,  844,  845,  846,  847,  861,  877,  893,  898,  902,  906,  908,
        909,  910,  911,  926,  942,  958,  963,  967,  971,  972,  973,  974,
        975,  991,  1007, 1023, 1024, 1040, 1041, 1042, 1043, 1044, 1048, 1052,
        1056, 1072, 1089, 1104, 1105, 1106, 1107, 1109, 1113, 1117, 1121, 1137,
        1154, 1168, 1169, 1170, 1171, 1174, 1178, 1182, 1186, 1202, 1219, 1232,
        1233, 1234, 1235, 1239, 1243, 1247, 1251, 1267, 1284, 1296, 1300, 1301,
        1302, 1303, 1304, 1308, 1316, 1332, 1349, 1361, 1364, 1365, 1366, 1367,
        1369, 1373, 1381, 1397, 1414, 1426, 1428, 1429, 1430, 1431, 1434, 1438,
        1446, 1462, 1479, 1491, 1492, 1493, 1494, 1495, 1499, 1503, 1511, 1527,
        1544, 1552, 1556, 1560, 1561, 1562, 1563, 1564, 1576, 1592, 1609, 1617,
        1621, 1624, 1625, 1626, 1627, 1629, 1641, 1657, 1674, 1682, 1686, 1688,
        1689, 1690, 1691, 1694, 1706, 1722, 1739, 1747, 1751, 1752, 1753, 1754,
        1755, 1759, 1771, 1787, 1804, 1808, 1812, 1816, 1820, 1821, 1822, 1823,
        1836, 1852, 1869, 1873, 1877, 1881, 1884, 1885, 1886, 1887, 1901, 1917,
        1934, 1938, 1942, 1946, 1948, 1949, 1950, 1951, 1966, 1982, 1999, 2003,
        2007, 2011, 2012, 2013, 2014, 2015, 2031, 2047, 2048, 2064, 2080, 2081,
        2082, 2083, 2084, 2088, 2092, 2096, 2113, 2129, 2144, 2145, 2146, 2147,
        2149, 2153, 2157, 2161, 2178, 2194, 2208, 2209, 2210, 2211, 2214, 2218,
        2222, 2226, 2243, 2259, 2272, 2273, 2274, 2275, 2279, 2283, 2287, 2291,
        2308, 2324, 2336, 2340, 2341, 2342, 2343, 2344, 2348, 2356, 2373, 2389,
        2401, 2404, 2405, 2406, 2407, 2409, 2413, 2421, 2438, 2454, 2466, 2468,
        2469, 2470, 2471, 2474, 2478, 2486, 2503, 2519, 2531, 2532, 2533, 2534,
        2535, 2539, 2543, 2551, 2568, 2584, 2592, 2596, 2600, 2601, 2602, 2603,
        2604, 2616, 2633, 2649, 2657, 2661, 2664, 2665, 2666, 2667, 2669, 2681,
        2698, 2714, 2722, 2726, 2728, 2729, 2730, 2731, 2734, 2746, 2763, 2779,
        2787, 2791, 2792, 2793, 2794, 2795, 2799, 2811, 2828, 2844, 2848, 2852,
        2856, 2860, 2861, 2862, 2863, 2876, 2893, 2909, 2913, 2917, 2921, 2924,
        2925, 2926, 2927, 2941, 2958, 2974, 2978, 2982, 2986, 2988, 2989, 2990,
        2991, 3006, 3023, 3039, 3043, 3047, 3051, 3052, 3053, 3054, 3055, 3071,
        3072, 3088, 3104, 3120, 3121, 3122, 3123, 3124, 3128, 3132, 3137, 3153,
        3169, 3184, 3185, 3186, 3187, 3189, 3193, 3197, 3202, 3218, 3234, 3248,
        3249, 3250, 3251, 3254, 3258, 3262, 3267, 3283, 3299, 3312, 3313, 3314,
        3315, 3319, 3323, 3327, 3332, 3348, 3364, 3376, 3380, 3381, 3382, 3383,
        3384, 3388, 3397, 3413, 3429, 3441, 3444, 3445, 3446, 3447, 3449, 3453,
        3462, 3478, 3494, 3506, 3508, 3509, 3510, 3511, 3514, 3518, 3527, 3543,
        3559, 3571, 3572, 3573, 3574, 3575, 3579, 3583, 3592, 3608, 3624, 3632,
        3636, 3640, 3641, 3642, 3643, 3644, 3657, 3673, 3689, 3697, 3701, 3704,
        3705, 3706, 3707, 3709, 3722, 3738, 3754, 3762, 3766, 3768, 3769, 3770,
        3771, 3774, 3787, 3803, 3819, 3827, 3831, 3832, 3833, 3834, 3835, 3839,
        3852, 3868, 3884, 3888, 3892, 3896, 3900, 3901, 3902, 3903, 3917, 3933,
        3949, 3953, 3957, 3961, 3964, 3965, 3966, 3967, 3982, 3998, 4014, 4018,
        4022, 4026, 4028, 4029, 4030, 4031, 4047, 4063, 4079, 4083, 4087, 4091,
        4092, 4093, 4094, 4095};

    constexpr double mg94Q[640] = {
        -0.7445587, 0.0204839,  0.4546805,  0.0155181,  0.0204839,  0.09093609,
        0.0155181,  0.0204839,  0.09093609, 0.0155181,  0.03429501, -1.020005,
        0.03584682, 0.695987,   0.0204839,  0.09093609, 0.0155181,  0.0204839,
        0.09093609, 0.015518,   0.7052979,  0.03336393, -1.023264,  0.03072585,
        0.0204839,  0.09093609, 0.0155181,  0.0204839,  0.09093609, 0.0155181,
        0.0155181,  0.4166611,  0.01986317, -0.7059186, 0.0204839,  0.09093609,
        0.0155181,  0.0204839,  0.09093609, 0.0155181,  0.03429501, -0.9709678,
        0.1024195,  0.4546805,  0.07759052, 0.03584682, 0.1391974,  0.0204839,
        0.09093609, 0.0155181,  0.03429501, 0.1714751,  -1.382974,  0.1792341,
        0.695987,   0.03584682, 0.1391974,  0.0204839,  0.09093609, 0.0155181,
        0.03429501, 0.7052979,  0.1668196,  -1.362024,  0.1536292,  0.03584682,
        0.1391974,  0.0204839,  0.09093609, 0.0155181,  0.03429501, 0.07759052,
        0.4166611,  0.09931587, -0.9298448, 0.03584682, 0.1391974,  0.0204839,
        0.09093609, 0.0155181,  0.1410596,  0.03336393, -0.9047055, 0.0204839,
        0.4546805,  0.0155181,  0.03072585, 0.1024195,  0.09093609, 0.0155181,
        0.1410596,  0.03336393, 0.03429501, -1.098216,  0.03584682, 0.695987,
        0.03072585, 0.0204839,  0.09093609, 0.0155181,  0.1410596,  0.03336393,
        0.7052979,  0.03336393, -1.183411,  0.03072585, 0.03072585, 0.1024195,
        0.09093609, 0.0155181,  0.1410596,  0.03336393, 0.0155181,  0.4166611,
        0.01986317, -0.7841298, 0.03072585, 0.0204839,  0.09093609, 0.0155181,
        0.0155181,  0.08333222, 0.01986317, -0.5165977, 0.1024195,  0.09093609,
        0.07759052, 0.0204839,  0.09093609, 0.0155181,  0.0155181,  0.08333222,
        0.01986317, 0.1714751,  -1.14896,   0.03584682, 0.695987,   0.0204839,
        0.09093609, 0.0155181,  0.0155181,  0.08333222, 0.01986317, 0.1410596,
        0.03336393, -0.4508009, 0.03072585, 0.0204839,  0.09093609, 0.0155181,
        0.0155181,  0.08333222, 0.01986317, 0.07759052, 0.4166611,  0.01986317,
        -0.7597664, 0.0204839,  0.09093609, 0.015518,   0.03429501, -0.8269598,
        0.0204839,  0.4546805,  0.0155181,  0.0204839,  0.09093609, 0.0155181,
        0.03584682, 0.1391974,  0.03429501, 0.03429501, -1.102406,  0.03584682,
        0.695987,   0.0204839,  0.09093609, 0.0155181,  0.03584682, 0.1391974,
        0.03429501, 0.7052979,  0.03336393, -1.105665,  0.03072585, 0.0204839,
        0.09093609, 0.0155181,  0.03584682, 0.1391974,  0.03429501, 0.0155181,
        0.4166611,  0.01986317, -0.7883197, 0.0204839,  0.09093609, 0.0155181,
        0.03584682, 0.1391974,  0.03429501, 0.03429501, -1.053369,  0.1024195,
        0.4546805,  0.07759052, 0.03584682, 0.1391974,  0.03584682, 0.1391974,
        0.03429501, 0.03429501, 0.1714751,  -1.465375,  0.1792341,  0.695987,
        0.03584682, 0.1391974,  0.03584682, 0.1391974,  0.03429501, 0.03429501,
        0.7052979,  0.1668196,  -1.444425,  0.1536292,  0.03584682, 0.1391974,
        0.03584682, 0.1391974,  0.03429501, 0.03429501, 0.07759052, 0.4166611,
        0.09931587, -1.012246,  0.03584682, 0.1391974,  0.03584682, 0.1391974,
        0.1714751,  0.1410596,  0.03336393, -1.186359,  0.1024195,  0.4546805,
        0.07759052, 0.03072585, 0.03584682, 0.1391974,  0.03429501, 0.1410596,
        0.03336393, 0.1714751,  -1.461185,  0.1792341,  0.695987,   0.03072585,
        0.03584682, 0.1391974,  0.1714751,  0.1410596,  0.03336393, 0.7052979,
        0.1668196,  -1.577415,  0.1536292,  0.03072585, 0.03584682, 0.1391974,
        0.03429501, 0.1410596,  0.03336393, 0.07759052, 0.4166611,  0.09931587,
        -1.008056,  0.03072585, 0.03584682, 0.1391974,  0.03429501, 0.0155181,
        0.08333222, 0.01986317, -1.519533,  0.1024195,  0.4546805,  0.07759052,
        0.03584682, 0.695987,   0.03429501, 0.0155181,  0.08333222, 0.01986317,
        0.1714751,  -1.374749,  0.1792341,  0.695987,   0.03584682, 0.1391974,
        0.03429501, 0.0155181,  0.08333222, 0.01986317, 0.7052979,  0.1668196,
        -1.910589,  0.1536292,  0.03584682, 0.69598,    0.03429501, 0.0155181,
        0.08333222, 0.01986317, 0.07759052, 0.4166611,  0.09931587, -0.9216202,
        0.03584682, 0.1391974,  0.1410596,  0.03336393, -0.8227699, 0.0204839,
        0.4546805,  0.0155181,  0.0204839,  0.09093609, 0.0155181,  0.03072585,
        0.1410596,  0.03336393, 0.03429501, -1.098216,  0.03584682, 0.695987,
        0.0204839,  0.09093609, 0.0155181,  0.03072585, 0.1410596,  0.03336393,
        0.7052979,  0.03336393, -1.101475,  0.03072585, 0.0204839,  0.09093609,
        0.0155181,  0.03072585, 0.1410596,  0.03336393, 0.0155181,  0.4166611,
        0.01986317, -0.7841298, 0.0204839,  0.09093609, 0.0155181,  0.03072585,
        0.1410596,  0.03336393, 0.03429501, -1.049179,  0.1024195,  0.4546805,
        0.07759052, 0.03584682, 0.1391974,  0.03072585, 0.1410596,  0.03336393,
        0.03429501, 0.1714751,  -1.461185,  0.1792341,  0.695987,   0.03584682,
        0.1391974,  0.03072585, 0.1410596,  0.03336393, 0.03429501, 0.7052979,
        0.1668196,  -1.440235,  0.1536292,  0.03584682, 0.1391974,  0.03072585,
        0.1410596,  0.03336393, 0.03429501, 0.07759052, 0.4166611,  0.09931587,
        -1.008056,  0.03584682, 0.1391974,  0.03072585, 0.1410596,  0.03336393,
        0.1410596,  0.03336393, -1.044989,  0.1024195,  0.4546805,  0.07759052,
        0.03072585, 0.03072585, 0.1410596,  0.03336393, 0.1410596,  0.03336393,
        0.1714751,  -1.456995,  0.1792341,  0.695987,   0.03072585, 0.03072585,
        0.1410596,  0.03336393, 0.1410596,  0.03336393, 0.7052979,  0.1668196,
        -1.436045,  0.1536292,  0.03072585, 0.03072585, 0.1410596,  0.03336393,
        0.1410596,  0.03336393, 0.07759052, 0.4166611,  0.09931587, -1.003866,
        0.03072585, 0.03072585, 0.1410596,  0.03336393, 0.0155181,  0.08333222,
        0.01986317, -0.9585533, 0.1024195,  0.4546805,  0.07759052, 0.03072585,
        0.1410596,  0.03336393, 0.0155181,  0.08333222, 0.01986317, 0.1714751,
        -1.370559,  0.1792341,  0.695987,   0.03072585, 0.1410596,  0.03336393,
        0.0155181,  0.08333222, 0.01986317, 0.7052979,  0.1668196,  -1.34961,
        0.1536292,  0.0307258,  0.1410596,  0.03336393, 0.0155181,  0.08333222,
        0.01986317, 0.07759052, 0.4166611,  0.09931587, -0.9174304, 0.03072585,
        .0155181,   0.08333222, 0.01986317, -1.100078,  0.0204839,  0.4546805,
        0.0155181,  0.0204839,  0.4546805,  0.0155181,  0.0155181,  0.08333222,
        0.01986317, 0.03429501, -1.01178,   0.03584682, 0.695987,   0.0204839,
        0.09093609, 0.0155181,  0.0155181,  0.08333222, 0.01986317, 0.7052979,
        0.03336393, -1.015039,  0.03072585, 0.0204839,  0.09093609, 0.0155181,
        0.0155181,  0.08333222, 0.01986317, 0.0155181,  0.4166611,  0.01986317,
        -0.697694,  0.0204839,  0.09093609, 0.0155181,  0.0155181,  0.08333222,
        0.01986317, 0.03429501, -0.9627432, 0.1024195,  0.4546805,  0.07759052,
        0.03584682, 0.1391974,  0.0155181,  0.08333222, 0.01986317, 0.03429501,
        0.1714751,  -1.374749,  0.1792341,  0.695987,   0.03584682, 0.1391974,
        0.0155181,  0.08333222, 0.01986317, 0.03429501, 0.7052979,  0.1668196,
        -1.353799,  0.1536292,  0.03584682, 0.1391974,  0.0155181,  0.08333222,
        0.01986317, 0.03429501, 0.07759052, 0.4166611,  0.09931587, -0.9216202,
        0.03584682, 0.1391974,  0.0155181,  0.08333222, 0.01986317, 0.7052979,
        0.03336393, -1.015039,  0.0204839,  0.09093609, 0.0155181,  0.03072585,
        0.0155181,  0.08333222, 0.01986317, 0.1410596,  0.03336393, 0.03429501,
        -1.089992,  0.03584682, 0.695987,   0.03072585, 0.0155181,  0.08333222,
        0.01986317, 0.1410596,  0.03336393, 0.1410596,  0.03336393, -0.5290122,
        0.03072585, 0.03072585, 0.0155181,  0.08333222, 0.01986317, 0.1410596,
        0.03336393, 0.0155181,  0.4166611,  0.01986317, -0.7759052, 0.03072585,
        0.0155181,  0.4166611,  0.01986317, 0.0155181,  0.08333222, 0.01986317,
        -1.061438,  0.0204839,  0.4546805,  0.0155181,  0.0155181,  0.08333222,
        0.01986317, 0.0155181,  0.08333222, 0.01986317, 0.03429501, -1.003556,
        0.03584682, 0.695987,   0.0155181,  0.4166611,  0.01986317, 0.0155181,
        0.08333222, 0.01986317, 0.7052979,  0.03336393, -1.340144,  0.03072585,
        0.0155181,  0.08333222, 0.01986317, 0.0155181,  0.08333222, 0.01986317,
        0.0155181,  0.4166611,  0.01986317, -0.6894694};

    // convert Q matrix to column vector
    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> Q2(
        Q);
    Eigen::Map<Eigen::VectorXd> mg94Q_vector(Q2.data(), 4096, 1);

    // check non-zero values
    for(int i = 0; i < 640; i++) {
        CHECK(mg94Q_vector[indexes[i]] == doctest::Approx(mg94Q[i]));
    }
}

/* Muse & Gaut Model (1994) P matrix given rate matrix and branch lenght */
void mg94_p(Matrix64f& P, const double& brlen) {
    Matrix64f Q;
    mg94_q(Q);

    if(brlen <= 0) {
        cout << "Branch length must be positive." << endl;
        exit(EXIT_FAILURE);
    }

    Q = Q * brlen;
    P = Q.exp();
}

TEST_CASE("[mut_models.cc] mg94_p") {
    Matrix64f P;
    double branch_length = 0.0133;
    mg94_p(P, branch_length);

    for(int i = 0; i < 64; i++) {
        CHECK(P.row(i).sum() == doctest::Approx(1));  // sum of every row is 1
    }

    CHECK(!(P.array() < 0).any());  // all values are positive

    constexpr double mg94P[64][64] = {
        {0.9901768,    0.0002711565, 0.005976741,  0.0002068872, 0.0002697326,
         2.215874e-07, 1.627355e-06, 1.689826e-07, 0.001196386,  3.277784e-07,
         7.221383e-06, 2.500888e-07, 0.0002051648, 1.677118e-07, 7.440474e-07,
         1.277314e-07, 0.0002699908, 7.39362e-08,  1.629674e-06, 5.641191e-08,
         7.364396e-08, 6.049923e-11, 4.443347e-10, 4.613669e-11, 9.769275e-07,
         5.060265e-10, 5.894053e-09, 3.854716e-10, 5.586629e-08, 4.586008e-11,
         2.923344e-10, 3.495759e-11, 0.001197037,  3.278048e-07, 7.225357e-06,
         2.501088e-07, 3.26083e-07,  2.679384e-10, 1.967439e-09, 2.043299e-10,
         1.446075e-06, 9.2459e-10,   8.725777e-09, 7.04761e-10,  2.476295e-07,
         2.031886e-10, 1.295407e-09, 1.548837e-10, 0.0002043767, 5.60578e-08,
         1.235603e-06, 4.277115e-08, 5.583639e-08, 4.585408e-11, 3.366746e-10,
         3.496829e-11, 7.413592e-07, 1.1288e-10,   1.298828e-09, 8.598289e-11,
         4.251641e-08, 1.933246e-11, 2.223446e-10, 1.474516e-11},
        {0.0004539695, 0.9865534,    0.0004729102, 0.009151244,  3.702581e-07,
         0.000268502,  3.858123e-07, 2.492514e-06, 5.486662e-07, 0.001192657,
         5.71541e-07,  1.106305e-05, 2.807725e-07, 0.0002039331, 9.814359e-08,
         1.892398e-06, 1.237836e-07, 0.0002690026, 1.289482e-07, 2.495261e-06,
         1.010021e-10, 7.321215e-08, 1.052548e-10, 6.796312e-10, 5.474383e-10,
         3.24797e-07,  5.7024e-10,   3.014607e-09, 7.650639e-11, 5.557094e-08,
         6.214981e-11, 5.158092e-10, 5.488098e-07, 0.001192657,  5.717074e-07,
         1.106305e-05, 4.477075e-10, 3.245952e-07, 4.665587e-10, 3.01323e-09,
         1.544075e-09, 1.440028e-06, 1.609858e-09, 1.336494e-08, 3.396089e-10,
         2.463807e-07, 2.758449e-10, 2.286905e-09, 9.377645e-08, 0.0002041192,
         9.784551e-08, 1.893404e-06, 7.660629e-11, 5.555343e-08, 7.982517e-11,
         5.157045e-10, 2.643404e-10, 2.467619e-07, 1.187007e-10, 2.288966e-09,
         3.246377e-11, 4.221961e-08, 2.042727e-11, 3.916662e-10},
        {0.009271089,  0.0004401431, 0.9865134,    0.0004069805, 2.524973e-06,
         3.591225e-07, 0.0002685345, 3.318962e-07, 1.120177e-05, 5.320364e-07,
         0.00119196,   4.919504e-07, 1.153684e-06, 9.162075e-08, 0.0002048743,
         8.468795e-08, 2.527942e-06, 1.200138e-07, 0.0002689921, 1.109713e-07,
         6.894214e-10, 9.805895e-11, 7.331679e-08, 9.062469e-11, 9.14544e-09,
         8.195376e-10, 9.726481e-07, 7.565665e-10, 4.535612e-10, 5.799472e-11,
         5.567429e-08, 5.357458e-11, 1.120793e-05, 5.320949e-07, 0.001192608,
         4.920041e-07, 3.052642e-09, 4.342829e-10, 3.246344e-07, 4.013585e-10,
         1.353883e-08, 1.498516e-09, 1.439965e-06, 1.384254e-09, 2.009843e-09,
         2.568565e-10, 2.46779e-07,  2.372798e-10, 1.915121e-06, 9.106597e-08,
         0.0002041109, 8.420463e-08, 5.225146e-10, 7.430313e-11, 5.55603e-08,
         6.866995e-11, 4.78876e-09,  1.107697e-10, 2.477238e-07, 1.023956e-10,
         3.450258e-10, 1.89342e-11,  4.235817e-08, 1.750666e-11},
        {0.0002068935, 0.005478504,  0.0002630902, 0.9906831,    1.690155e-07,
         1.491715e-06, 2.149849e-07, 0.0002698749, 2.50051e-07,  6.623032e-06,
         3.179608e-07, 0.001197649,  1.280513e-07, 1.132718e-06, 5.461604e-08,
         0.000204889,  5.641353e-08, 1.493819e-06, 7.173666e-08, 0.0002701286,
         4.610544e-11, 4.067444e-10, 5.865075e-11, 7.358651e-08, 2.496564e-10,
         1.804176e-09, 3.174483e-10, 3.263573e-07, 3.490964e-11, 3.087005e-10,
         3.463774e-11, 5.584723e-08, 2.501164e-07, 6.623032e-06, 3.180532e-07,
         0.001197649,  2.043697e-10, 1.803352e-09, 2.599789e-10, 3.26255e-07,
         7.049337e-10, 7.998624e-09, 8.971767e-10, 1.446946e-06, 1.549624e-10,
         1.368662e-09, 1.537356e-10, 2.476057e-07, 4.27381e-08,  1.13351e-06,
         5.44336e-08,  0.0002049736, 3.496925e-11, 3.086379e-10, 4.448071e-11,
         5.583747e-08, 1.203271e-10, 1.370317e-09, 6.604504e-11, 2.47795e-07,
         1.478979e-11, 2.344757e-10, 1.136356e-11, 4.240343e-08},
        {0.0004515953, 3.70265e-07,  2.725251e-06, 2.829632e-07, 0.9872016,
         0.001350482,  0.005956517,  0.001031338,  0.0004713826, 3.867627e-07,
         2.84459e-06,  2.955711e-07, 0.001833276,  2.498233e-06, 6.641693e-06,
         1.906162e-06, 1.232964e-07, 1.010478e-10, 7.441007e-10, 7.722239e-11,
         0.0002691794, 3.682347e-07, 1.624158e-06, 2.81214e-07,  3.848846e-07,
         2.695605e-10, 2.32214e-09,  2.055816e-10, 4.984423e-07, 6.81602e-10,
         2.606715e-09, 5.203759e-10, 5.45939e-07,  4.477155e-10, 3.294772e-09,
         3.421523e-10, 0.00119344,   1.632615e-06, 7.200908e-06, 1.246798e-06,
         5.697443e-07, 6.754573e-10, 3.437592e-09, 5.157792e-10, 2.212722e-06,
         3.023039e-09, 1.157123e-08, 2.307967e-09, 9.352956e-08, 7.660768e-11,
         5.639587e-10, 5.854497e-11, 0.0002042533, 2.794165e-07, 1.232411e-06,
         2.133852e-07, 9.778604e-08, 8.010995e-11, 4.333015e-10, 6.121855e-11,
         3.796111e-07, 3.794924e-10, 1.986121e-09, 2.89897e-10},
        {6.211069e-07, 0.000449535,  6.460171e-07, 4.171766e-06, 0.002260973,
         0.9818063,    0.002353553,  0.009119044,  6.485848e-07, 0.0004694871,
         6.745693e-07, 4.356925e-06, 4.184628e-06, 0.001820613,  2.622394e-06,
         1.69025e-05,  1.69504e-10,  1.225742e-07, 1.763183e-10, 1.137511e-09,
         6.164975e-07, 0.0002677082, 6.417413e-07, 2.486481e-06, 4.905319e-10,
         1.278559e-07, 5.101557e-10, 1.187431e-09, 1.140104e-09, 4.961098e-07,
         1.029788e-09, 4.607295e-09, 7.510271e-10, 5.434481e-07, 7.812202e-10,
         5.043297e-09, 2.733319e-06, 0.001186918,  2.84524e-06,  1.102413e-05,
         1.13083e-09,  5.668643e-07, 1.177144e-09, 5.2638e-09,   5.061188e-09,
         2.199565e-06, 4.57119e-09,  2.042702e-08, 1.285923e-10, 9.30094e-08,
         1.336621e-10, 8.631438e-10, 4.677983e-07, 0.000203137,  4.869532e-07,
         1.886742e-06, 1.341992e-10, 9.713737e-08, 1.398952e-10, 9.014529e-10,
         6.375522e-10, 3.769157e-07, 5.438807e-10, 3.498211e-09},
        {4.226344e-06, 6.011846e-07, 0.0004495894, 5.567949e-07, 0.009239724,
         0.00219048,   0.9820824,    0.002027304,  4.411416e-06, 6.279452e-07,
         0.0004692888, 5.815796e-07, 1.029884e-05, 2.440349e-06, 0.001829322,
         2.260387e-06, 1.153958e-09, 1.640821e-10, 1.227487e-07, 1.519664e-10,
         2.519388e-06, 5.972762e-07, 0.0002677835, 5.527832e-07, 3.602093e-09,
         4.368197e-10, 3.830477e-07, 4.037324e-10, 4.043526e-09, 9.592935e-10,
         4.963612e-07, 8.877893e-10, 5.109564e-09, 7.270049e-10, 5.435137e-07,
         6.733247e-10, 1.117002e-05, 2.648099e-06, 0.001187252,  2.450833e-06,
         5.332377e-09, 1.0956e-09,   5.669313e-07, 1.013877e-09, 1.794925e-08,
         4.25446e-09,  2.203483e-06, 3.937335e-09, 8.745753e-10, 1.243861e-10,
         9.302091e-08, 1.152018e-10, 1.911711e-06, 4.532131e-07, 0.0002031941,
         4.194518e-07, 6.719315e-10, 1.30112e-10,  9.753163e-08, 1.205072e-10,
         3.080228e-09, 5.048646e-10, 3.78213e-07,  4.676032e-10},
        {2.829253e-07, 2.498248e-06, 3.592127e-07, 0.0004518335, 0.001031369,
         0.005459232,  0.001310539,  0.9877388,    2.954421e-07, 2.609131e-06,
         3.750892e-07, 0.0004718878, 1.907392e-06, 1.012032e-05, 1.458582e-06,
         0.001830836,  7.721204e-11, 6.811948e-10, 9.804034e-11, 1.23201e-07,
         2.812226e-07, 1.488564e-06, 3.573435e-07, 0.0002693258, 2.234777e-10,
         7.10871e-10,  2.83709e-10,  1.285887e-07, 5.199166e-10, 2.758215e-09,
         5.733929e-10, 4.990367e-07, 3.421065e-10, 3.020162e-09, 4.343917e-10,
         5.46227e-07,  1.246835e-06, 6.599734e-06, 1.584327e-06, 0.00119409,
         5.157863e-10, 3.151241e-09, 6.554041e-10, 5.701137e-07, 2.308029e-09,
         1.22289e-08,  2.545267e-09, 2.212542e-06, 5.857596e-11, 5.168909e-10,
         7.432177e-11, 9.348496e-08, 2.133917e-07, 1.129522e-06, 2.711522e-07,
         0.0002043644, 6.11039e-11,  5.398321e-10, 7.780395e-11, 9.763414e-08,
         2.903963e-10, 2.094892e-09, 3.024298e-10, 3.789063e-07},
        {0.001855828,  5.083561e-07, 1.120177e-05, 3.878662e-07, 0.0004387304,
         3.605671e-07, 2.646892e-06, 2.749687e-07, 0.9880715,    0.0002707276,
         0.005964034,  0.0002065602, 0.0004054144, 3.315407e-07, 1.469618e-06,
         2.525057e-07, 1.51526e-06,  7.834446e-10, 9.143761e-09, 5.977889e-10,
         3.581899e-07, 3.379858e-10, 2.161016e-09, 2.577656e-10, 0.001343789,
         9.576724e-07, 8.107931e-06, 7.300103e-07, 3.29523e-07,  3.112119e-10,
         1.899507e-09, 2.373166e-10, 2.243613e-06, 1.023432e-09, 1.354111e-08,
         7.810753e-10, 5.303894e-07, 5.325438e-10, 3.199883e-09, 4.062401e-10,
         0.001194255,  9.814277e-07, 7.205963e-06, 7.484376e-07, 4.893289e-07,
         4.906177e-10, 2.559205e-09, 3.741233e-10, 1.152349e-06, 1.757079e-10,
         3.561718e-09, 1.338628e-10, 9.111413e-08, 7.486579e-11, 4.767691e-10,
         5.708499e-11, 0.0002052656, 5.665133e-08, 7.469375e-07, 4.321237e-08,
         8.479103e-08, 3.843597e-11, 3.772425e-10, 2.931339e-11},
        {8.512428e-07, 0.001850043,  8.867325e-07, 1.716095e-05, 6.026666e-07,
         0.0004369663, 6.279589e-07, 4.056375e-06, 0.0004532513, 0.9855278,
         0.0004721624, 0.00914173,   5.552123e-07, 0.000403199,  1.93951e-07,
         3.741487e-06, 5.411226e-10, 5.041365e-07, 5.631338e-10, 4.677417e-09,
         2.373505e-10, 1.190733e-07, 2.471676e-10, 1.105658e-09, 6.167074e-07,
         0.0002682229, 6.421204e-07, 2.490181e-06, 2.183641e-10, 1.098021e-07,
         1.926204e-10, 1.019455e-09, 1.713506e-09, 2.235152e-06, 1.784568e-09,
         2.073726e-08, 8.902606e-10, 5.27926e-07,  9.275114e-10, 4.901818e-09,
         1.640046e-06, 0.001189199,  1.70926e-06,  1.103938e-05, 8.203583e-10,
         4.868209e-07, 7.002451e-10, 4.519646e-09, 4.104481e-10, 3.827757e-07,
         1.843229e-10, 3.550631e-09, 1.247626e-10, 9.040877e-08, 1.300446e-10,
         8.392685e-10, 9.393827e-08, 0.0002039064, 9.829208e-08, 1.891432e-06,
         6.436936e-11, 8.347289e-08, 4.060718e-11, 7.743682e-10},
        {1.737613e-05, 8.251427e-07, 0.001848962,  7.629727e-07, 4.106867e-06,
         5.843412e-07, 0.0004367816, 5.400407e-07, 0.009251377,  0.0004394471,
         0.9844159,    0.0004063373, 2.278719e-06, 1.810278e-07, 0.0004048411,
         1.673298e-07, 1.418323e-08, 1.270887e-09, 1.508747e-06, 1.175199e-09,
         3.352992e-09, 5.477731e-10, 3.565099e-07, 5.062788e-10, 1.258011e-05,
         1.5517e-06,   0.001337819,  1.433444e-06, 2.9472e-09,   4.720702e-10,
         3.280889e-07, 4.362671e-10, 2.100477e-08, 1.660842e-09, 2.234689e-06,
         1.53613e-09,  4.964878e-09, 8.632334e-10, 5.27902e-07,  7.980298e-10,
         1.118064e-05, 1.590876e-06, 0.001188949,  1.470268e-06, 3.970645e-09,
         6.519233e-10, 4.875278e-07, 6.02516e-10,  6.009916e-09, 1.722189e-10,
         3.843448e-07, 1.592221e-10, 7.396011e-10, 1.214309e-10, 9.079335e-08,
         1.122326e-10, 1.156339e-06, 9.21585e-08,  0.000205544,  8.522631e-08,
         5.850775e-10, 3.78143e-11,  8.46291e-08,  3.496565e-11},
        {3.879483e-07, 1.027361e-05, 4.933087e-07, 0.001857787,  2.751054e-07,
         2.427652e-06, 3.499155e-07, 0.0004392006, 0.0002065664, 0.005472808,
         0.0002626744, 0.9896532,    2.532144e-07, 2.239514e-06, 1.079321e-07,
         0.000405089,  2.464864e-10, 2.800193e-09, 3.131211e-10, 5.064025e-07,
         1.082697e-10, 6.617124e-10, 1.37631e-10,  1.197189e-07, 2.811465e-07,
         1.49032e-06,  3.573357e-07, 0.0002695943, 9.958126e-11, 6.101216e-10,
         1.072561e-10, 1.103819e-07, 7.811351e-10, 1.241462e-08, 9.930679e-10,
         2.245199e-06, 4.06352e-10,  2.933632e-09, 5.167896e-10, 5.307888e-07,
         7.48649e-07,  6.606828e-06, 9.524452e-07, 0.00119528,   3.743223e-10,
         2.70491e-09,  3.902087e-10, 4.893918e-07, 1.868117e-10, 2.125629e-09,
         1.025136e-10, 3.843783e-07, 5.694885e-11, 5.02284e-10,  7.246583e-11,
         9.087113e-08, 4.278725e-08, 1.132329e-06, 5.469718e-08, 0.0002047602,
         2.93227e-11,  4.63585e-10,  2.259089e-11, 8.383639e-08},
        {0.0002051661, 1.677038e-07, 7.437446e-07, 1.280496e-07, 0.001097513,
         1.496327e-06, 3.974691e-06, 1.14186e-06,  0.0002620844, 2.143811e-07,
         9.496547e-07, 1.636898e-07, 0.9931583,    0.00135029,   0.00120216,
         0.001029728,  5.594929e-08, 4.57662e-11,  2.478158e-10, 3.495509e-11,
         2.988384e-07, 4.07951e-10,  1.322774e-09, 3.113849e-10, 2.137267e-07,
         1.493431e-10, 9.459461e-10, 1.138426e-10, 0.0002696096, 3.680392e-07,
         9.762674e-07, 2.808544e-07, 2.478293e-07, 2.028342e-10, 1.097488e-09,
         1.549199e-10, 1.325734e-06, 1.809342e-09, 5.867835e-09, 1.381051e-09,
         3.165191e-07, 3.74416e-10,  1.401135e-09, 2.857531e-10, 0.001197755,
         1.633019e-06, 4.337798e-06, 1.246171e-06, 4.253347e-08, 2.702783e-11,
         1.881915e-10, 2.064499e-11, 2.271676e-07, 2.685814e-10, 1.005824e-09,
         2.049803e-10, 5.437447e-08, 3.459187e-11, 1.536887e-10, 2.642111e-11,
         0.0002057303, 1.678557e-07, 7.462412e-07, 1.281654e-07},
        {2.807893e-07, 0.0002039343, 9.844426e-08, 1.892095e-06, 2.503959e-06,
         0.001089932,  1.569716e-06, 1.012032e-05, 3.588334e-07, 0.0002606523,
         1.25741e-07,  2.418321e-06, 0.0022607,    0.9848642,    0.0004743046,
         0.009141252,  7.661617e-11, 5.558893e-08, 4.4541e-11,   5.158029e-10,
         6.825786e-10, 2.970965e-07, 5.225711e-10, 2.758935e-09, 2.71313e-10,
         7.096117e-08, 1.477378e-10, 6.588777e-10, 6.151893e-07, 0.0002682865,
         3.856391e-07, 2.491114e-06, 3.396994e-10, 2.464605e-07, 1.975481e-10,
         2.286877e-09, 3.02775e-09,  1.317214e-06, 2.317746e-09, 1.223208e-08,
         6.263724e-10, 3.14615e-07,  4.530075e-10, 2.920965e-09, 2.7327e-06,
         0.001189482,  1.71316e-06,  1.104467e-05, 4.534844e-11, 4.220703e-08,
         2.043289e-11, 3.915548e-10, 4.49494e-10,  2.255767e-07, 3.251549e-10,
         2.094312e-09, 5.795719e-11, 5.394553e-08, 2.614709e-11, 5.004532e-10,
         2.820648e-07, 0.0002039551, 9.941597e-08, 1.892288e-06},
        {1.154171e-06, 9.134461e-08, 0.0002048756, 8.448754e-08, 6.167758e-06,
         1.461159e-06, 0.001095146,  1.350762e-06, 1.473711e-06, 1.166938e-07,
         0.0002617138, 1.079339e-07, 0.001864786,  0.0004414409, 0.9940259,
         0.0004083805, 3.845044e-10, 4.145154e-11, 5.581355e-08, 3.834701e-11,
         2.052491e-09, 4.864231e-10, 2.978919e-07, 4.497745e-10, 1.468084e-09,
         2.003721e-10, 2.131381e-07, 1.85068e-10,  1.514931e-06, 3.593175e-07,
         0.0002690286, 3.321701e-07, 1.702833e-09, 1.836098e-10, 2.472282e-07,
         1.698584e-10, 9.10486e-09,  2.157402e-09, 1.321535e-06, 1.994856e-09,
         2.174287e-09, 4.215634e-10, 3.155948e-07, 3.896844e-10, 6.731212e-06,
         1.594682e-06, 0.001195172,  1.474197e-06, 2.919567e-10, 1.892904e-11,
         4.237361e-08, 1.750667e-11, 1.56084e-09,  3.025149e-10, 2.265039e-07,
         2.796384e-10, 2.38426e-10,  2.428709e-11, 5.437131e-08, 2.246353e-11,
         1.158044e-06, 9.157891e-08, 0.0002054379, 8.470414e-08},
        {1.277341e-07, 1.132914e-06, 5.47461e-08,  0.0002048903, 1.141171e-06,
         6.0578e-06,   8.747679e-07, 0.001096052,  1.632373e-07, 1.447998e-06,
         6.992617e-08, 0.0002618741, 0.001029743,  0.005472521,  0.0002639952,
         0.9899742,    3.486607e-11, 3.088431e-10, 2.478154e-11, 5.58574e-08,
         3.111591e-10, 1.651437e-09, 2.911811e-10, 2.98807e-07,  1.234777e-10,
         3.943895e-10, 8.223053e-11, 7.134773e-08, 2.803711e-07, 1.491125e-06,
         2.149087e-07, 0.000269793,  1.545888e-10, 1.369294e-09, 1.099111e-10,
         2.476508e-07, 1.380224e-09, 7.321853e-09, 1.291467e-09, 1.324798e-06,
         2.854863e-10, 1.748425e-09, 2.524301e-10, 3.16329e-07,  1.245419e-06,
         6.611091e-06, 9.547057e-07, 0.001196161,  2.062273e-11, 2.344481e-10,
         1.136203e-11, 4.239786e-08, 2.048689e-10, 1.253609e-09, 1.811862e-10,
         2.268058e-07, 2.635184e-11, 2.996522e-10, 1.454664e-11, 5.418946e-08,
         1.28315e-07,  1.13303e-06,  5.528686e-08, 0.0002049112},
        {0.0004520276, 1.237863e-07, 2.728455e-06, 9.444655e-08, 1.232972e-07,
         1.012456e-10, 7.439201e-10, 7.72099e-11,  1.635454e-06, 3.488511e-10,
         9.868698e-09, 2.660294e-10, 9.367106e-08, 7.661619e-11, 4.149972e-10,
         5.837226e-11, 0.9890922,    0.0002708599, 0.005970195,  0.0002066609,
         0.0002694364, 2.214412e-07, 1.62575e-06,  1.688712e-07, 0.001193496,
         9.810086e-07, 7.201421e-06, 7.481183e-07, 0.0002036961, 1.677454e-07,
         1.229081e-06, 1.279233e-07, 0.0004720898, 1.292804e-07, 2.849552e-06,
         9.86385e-08,  1.286013e-07, 1.056932e-10, 7.759663e-10, 8.060175e-11,
         5.708254e-07, 4.685771e-10, 3.442422e-09, 3.573366e-10, 9.752943e-08,
         8.016478e-11, 5.884365e-10, 6.113377e-11, 0.001827971,  5.013889e-07,
         1.10514e-05,  3.825513e-07, 4.99686e-07,  4.103288e-10, 3.013105e-09,
         3.129166e-10, 6.63064e-06,  1.410862e-09, 1.159444e-08, 1.0754e-09,
         1.132251e-06, 2.419001e-10, 6.831285e-09, 1.844704e-10},
        {2.072429e-07, 0.0004503732, 2.158897e-07, 4.177649e-06, 1.691751e-10,
         1.225742e-07, 1.76298e-10,  1.137861e-09, 1.415682e-09, 5.441239e-07,
         1.473815e-09, 5.048422e-09, 1.282831e-10, 9.306826e-08, 7.456473e-11,
         8.637127e-10, 0.0004534729, 0.9854728,    0.0004723929, 0.00914122,
         3.700141e-07, 0.0002682075, 3.856294e-07, 2.489781e-06, 1.639034e-06,
         0.001189133,  1.708206e-06, 1.103876e-05, 2.801761e-07, 0.0002035157,
         2.92001e-07,  1.889244e-06, 2.164409e-07, 0.0004703627, 2.254715e-07,
         4.363072e-06, 1.766066e-10, 1.280145e-07, 1.840597e-10, 1.188364e-09,
         7.828638e-10, 5.675692e-07, 8.158097e-10, 5.268765e-09, 1.34005e-10,
         9.713737e-08, 1.396425e-10, 9.017302e-10, 8.387512e-07, 0.001825672,
         8.751452e-07, 1.693488e-05, 6.855189e-10, 4.968776e-07, 7.143887e-10,
         4.612534e-09, 3.036021e-09, 2.205708e-06, 1.762375e-09, 2.046416e-08,
         9.813531e-10, 3.77499e-07,  1.021632e-09, 3.502465e-09},
        {4.232365e-06, 2.009307e-07, 0.0004503555, 1.857916e-07, 1.154252e-09,
         1.64102e-10,  1.227494e-07, 1.516608e-10, 1.530884e-08, 5.656879e-10,
         1.628424e-06, 5.227936e-10, 6.435845e-10, 6.940358e-11, 9.34438e-08,
         6.418164e-11, 0.009260933,  0.0004396616, 0.9854328,    0.0004065353,
         2.522483e-06, 3.58952e-07,  0.0002682393, 3.317389e-07, 1.117359e-05,
         1.590197e-06, 0.001188193,  1.46964e-06,  1.907018e-06, 2.719131e-07,
         0.0002027912, 2.512996e-07, 4.420209e-06, 2.098489e-07, 0.0004703436,
         1.940379e-07, 1.203975e-09, 1.713267e-10, 1.280299e-07, 1.58338e-10,
         5.341926e-09, 7.59297e-10,  5.679026e-07, 7.01732e-10,  9.130069e-10,
         1.299291e-10, 9.709614e-08, 1.20079e-10,  1.712911e-05, 8.145079e-07,
         0.001825598,  7.531391e-07, 4.676301e-09, 6.649685e-10, 4.972148e-07,
         6.145551e-10, 4.281349e-08, 1.640765e-09, 2.210717e-06, 1.51731e-09,
         1.059778e-08, 3.922404e-10, 1.127298e-06, 3.624991e-10},
        {9.444956e-08, 2.501001e-06, 1.201041e-07, 0.0004522584, 7.722493e-11,
         6.809852e-10, 9.823772e-11, 1.23201e-07,  6.452266e-10, 3.0223e-09,
         8.199625e-10, 5.465696e-07, 5.852374e-11, 5.169862e-10, 4.15024e-11,
         9.351775e-08, 0.0002066672, 0.005472503,  0.0002628024, 0.9895979,
         1.689042e-07, 1.49008e-06,  2.148829e-07, 0.0002695791, 7.481876e-07,
         6.606459e-06, 9.518588e-07, 0.001195213,  1.278954e-07, 1.130672e-06,
         1.627113e-07, 0.0002045565, 9.86415e-08,  2.612006e-06, 1.254347e-07,
         0.0004723316, 8.061742e-11, 7.112099e-10, 1.025629e-10, 1.286691e-07,
         3.573615e-10, 3.153241e-09, 4.545905e-10, 5.704712e-07, 6.117067e-11,
         5.396659e-10, 7.781252e-11, 9.763413e-08, 3.822563e-07, 1.013828e-05,
         4.868624e-07, 0.001833314,  3.129255e-10, 2.760501e-09, 3.98076e-10,
         4.994183e-07, 1.382436e-09, 1.225112e-08, 9.808821e-10, 2.215622e-06,
         4.472733e-10, 2.096794e-09, 5.683902e-10, 3.79196e-07},
        {2.06427e-07,  1.691039e-10, 1.245799e-09, 1.292322e-10, 0.0004506691,
         6.165108e-07, 2.71922e-06,  4.708179e-07, 6.443267e-07, 2.550202e-10,
         3.888291e-09, 1.947536e-10, 8.357372e-07, 1.140186e-09, 3.700391e-09,
         8.701744e-10, 0.0004510995, 3.700202e-07, 2.722562e-06, 2.827762e-07,
         0.9861202,    0.001349003,  0.005949994,  0.001030208,  0.0004702426,
         6.435786e-07, 2.837322e-06, 4.914895e-07, 0.00182014,   2.496043e-06,
         1.098226e-05, 1.906189e-06, 2.153087e-07, 1.766094e-10, 1.299472e-09,
         1.349682e-10, 0.0004706717, 6.438743e-07, 2.839911e-06, 4.917149e-07,
         2.247549e-07, 3.072513e-10, 1.35602e-09,  2.34642e-10,  8.714824e-07,
         1.192251e-09, 5.257894e-09, 9.105008e-10, 8.370023e-07, 6.854022e-10,
         5.047199e-09, 5.237966e-10, 0.001826874,  2.499143e-06, 1.102288e-05,
         1.908549e-06, 8.734375e-07, 8.743495e-10, 3.868843e-09, 6.681121e-10,
         1.012328e-05, 4.010873e-09, 6.109286e-08, 3.063025e-09},
        {2.839125e-10, 2.052178e-07, 2.953261e-10, 1.904459e-09, 1.032161e-06,
         0.000448206,  1.074425e-06, 4.16295e-06,  1.017879e-09, 2.141934e-07,
         1.058713e-09, 1.988286e-09, 1.910084e-09, 8.308671e-07, 1.461606e-09,
         7.714611e-09, 6.206957e-07, 0.000449042,  6.457087e-07, 4.167192e-06,
         0.002258497,  0.9807309,    0.002350976,  0.009109055,  1.07715e-06,
         0.0004680998, 1.121257e-06, 4.347721e-06, 4.173724e-06, 0.001816887,
         4.34464e-06,  1.687529e-05, 2.962563e-10, 2.143262e-07, 3.081949e-10,
         1.988986e-09, 1.077973e-06, 0.0004680994, 1.122113e-06, 4.34772e-06,
         5.144788e-10, 2.234225e-07, 5.355453e-10, 2.075153e-09, 1.996337e-09,
         8.671943e-07, 2.077924e-09, 8.054521e-09, 1.151425e-09, 8.318891e-07,
         1.196417e-09, 7.720081e-09, 4.184059e-06, 0.001816887,  4.355385e-06,
         1.68753e-05,  1.464372e-09, 8.682727e-07, 1.527141e-09, 8.059471e-09,
         1.600256e-08, 3.370125e-06, 1.664507e-08, 3.128376e-08},
        {1.931996e-09, 2.745926e-10, 2.055099e-07, 2.543173e-10, 4.218043e-06,
         9.999797e-07, 0.0004483321, 9.25488e-07,  6.029999e-09, 4.138073e-10,
         6.413047e-07, 3.82981e-10,  5.73833e-09,  1.360167e-09, 8.330902e-07,
         1.259704e-09, 4.222175e-06, 6.00898e-07,  0.0004490952, 5.565293e-07,
         0.009229606,  0.002188081,  0.9810067,    0.002025084,  4.401243e-06,
         1.043885e-06, 0.0004678043, 9.661232e-07, 1.703563e-05, 4.048591e-06,
         0.001810702,  3.747012e-06, 2.015233e-09, 2.868066e-10, 2.14352e-07,
         2.656296e-10, 4.405259e-06, 1.044363e-06, 0.000468231,  9.665654e-07,
         2.103453e-09, 4.983614e-10, 2.235897e-07, 4.612367e-10, 8.156024e-09,
         1.933684e-09, 8.669641e-07, 1.789639e-09, 7.827074e-09, 1.112974e-09,
         8.324524e-07, 1.030795e-09, 1.709865e-05, 4.053607e-06, 0.001817401,
         3.751641e-06, 5.999931e-09, 1.419832e-09, 8.709487e-07, 1.314905e-09,
         9.474339e-08, 6.508716e-09, 1.00758e-05,  6.02386e-09},
        {1.293271e-10, 1.140479e-09, 1.642136e-10, 2.062672e-07, 4.708322e-07,
         2.492203e-06, 5.982764e-07, 0.0004509143, 4.636935e-10, 1.190679e-09,
         5.887286e-10, 2.153548e-07, 8.708461e-10, 4.619102e-09, 8.131334e-10,
         8.356509e-07, 2.827383e-07, 2.49551e-06,  3.590416e-07, 0.0004513383,
         0.00103024,   0.005453253,  0.001309104,  0.9866568,    4.91355e-07,
         2.602819e-06, 6.243549e-07, 0.000470928,  1.9039e-06,   1.010261e-05,
         2.419253e-06, 0.001827865,  1.349502e-10, 1.191098e-09, 1.713695e-10,
         2.154222e-07, 4.917298e-07, 2.602818e-06, 6.248306e-07, 0.0004709278,
         2.346853e-10, 1.242317e-09, 2.982096e-10, 2.247724e-07, 9.106528e-10,
         4.821943e-09, 1.157059e-09, 8.72434e-07,  5.244934e-10, 4.623146e-09,
         6.652581e-10, 8.361428e-07, 1.908607e-06, 1.010261e-05, 2.425227e-06,
         0.001827865,  6.669604e-10, 4.826389e-09, 8.495887e-10, 8.729811e-07,
         7.28996e-09,  1.873418e-08, 9.255999e-09, 3.3884e-06},
        {2.537149e-06, 8.492018e-10, 1.531165e-08, 6.483545e-10, 5.997536e-07,
         4.565662e-10, 3.61852e-09,  3.48227e-10,  0.002249826,  6.167217e-07,
         1.3578e-05,   4.706914e-07, 5.535203e-07, 4.196941e-10, 2.45109e-09,
         3.197831e-10, 0.001851345,  1.518609e-06, 1.117359e-05, 1.16055e-06,
         0.0004376694, 5.98817e-07,  2.640784e-06, 4.573059e-07, 0.9843791,
         0.001347846,  0.005939488,  0.001029327,  0.0004019783, 5.513523e-07,
         2.425433e-06, 4.210595e-07, 8.858741e-07, 7.253108e-10, 5.344417e-09,
         5.542949e-10, 2.09284e-07,  2.860583e-10, 1.262679e-09, 2.184571e-10,
         0.0004713574, 6.439279e-07, 2.843662e-06, 4.91755e-07,  1.928226e-07,
         2.635825e-10, 1.163094e-09, 2.012928e-10, 1.02717e-05,  2.811901e-09,
         3.175441e-08, 2.146582e-09, 8.121892e-07, 9.617757e-10, 4.249172e-09,
         7.343421e-10, 0.001824796,  1.497803e-06, 6.625955e-06, 1.144547e-06,
         2.236123e-06, 7.497931e-10, 1.289514e-08, 5.725567e-10},
        {2.20019e-09,  8.43518e-07,  2.286848e-09, 7.826712e-09, 7.032392e-10,
         1.992329e-07, 7.313561e-10, 1.850327e-09, 2.684349e-06, 0.0004490678,
         2.791324e-06, 4.167861e-06, 6.475425e-10, 1.837785e-07, 5.575634e-10,
         1.706151e-09, 2.547676e-06, 0.001844576,  2.650342e-06, 1.7118e-05,
         1.002843e-06, 0.000435675,  1.043907e-06, 4.046559e-06, 0.00225656,
         0.9807857,    0.002348963,  0.009109561,  9.222163e-07, 0.0004016254,
         9.599823e-07, 3.730305e-06, 1.217206e-09, 8.804104e-07, 1.265827e-09,
         8.170366e-09, 4.788418e-10, 2.079463e-07, 4.98449e-10,  1.93141e-09,
         1.078223e-06, 0.0004681262, 1.122374e-06, 4.347967e-06, 4.412793e-10,
         1.916946e-07, 4.593138e-10, 1.780464e-09, 9.928011e-09, 3.419357e-06,
         3.832886e-09, 3.172571e-08, 1.610884e-09, 8.076267e-07, 1.677834e-09,
         7.499476e-09, 2.505565e-06, 0.001820379,  2.61814e-06,  1.689344e-05,
         3.30714e-09,  7.454333e-07, 3.440637e-09, 6.918113e-09},
        {2.374456e-08, 1.378339e-09, 2.526037e-06, 1.275339e-09, 5.61303e-09,
         7.398775e-10, 5.968912e-07, 6.838838e-10, 2.10569e-05,  1.000572e-06,
         0.002239831,  9.254694e-07, 3.800211e-09, 3.561039e-10, 5.519959e-07,
         3.294431e-10, 1.73281e-05,  2.466163e-06, 0.001843118,  2.284071e-06,
         4.096373e-06, 9.712814e-07, 0.0004354,    8.989283e-07, 0.00921331,
         0.002186208,  0.9792746,    0.002023354,  3.762322e-06, 8.942964e-07,
         0.0003998939, 8.276811e-07, 8.287041e-09, 1.177742e-09, 8.81339e-07,
         1.09078e-09,  1.958663e-09, 4.63986e-10,  2.081991e-07, 4.294215e-10,
         4.411077e-06, 1.04445e-06,  0.0004689148, 9.666444e-07, 1.804187e-09,
         4.274328e-10, 1.918235e-07, 3.955918e-10, 5.348106e-08, 3.558394e-09,
         3.422145e-06, 3.295905e-09, 6.590134e-09, 1.560923e-09, 8.089297e-07,
         1.444557e-09, 1.025679e-05, 2.434185e-06, 0.001825945,  2.254554e-06,
         1.999714e-08, 1.217142e-09, 2.226612e-06, 1.126447e-09},
        {1.001128e-09, 4.687001e-09, 1.270179e-09, 8.475702e-07, 3.203608e-10,
         1.107722e-09, 4.066945e-10, 2.003748e-07, 1.222251e-06, 2.495911e-06,
         1.551429e-06, 0.0004513638, 2.948422e-10, 1.021553e-09, 3.098422e-10,
         1.847796e-07, 1.160513e-06, 1.025106e-05, 1.473704e-06, 0.001854008,
         4.574587e-07, 2.422525e-06, 5.812836e-07, 0.0004383073, 0.001029358,
         0.005453556,  0.001307985,  0.9867119,    4.206817e-07, 2.233195e-06,
         5.345533e-07, 0.0004040521, 5.54458e-10,  4.892797e-09, 7.038528e-10,
         8.84912e-07,  2.184291e-10, 1.156263e-09, 2.775532e-10, 2.092026e-07,
         4.918434e-07, 2.602966e-06, 6.24975e-07,  0.0004709545, 2.012946e-10,
         1.065897e-09, 2.557615e-10, 1.928528e-07, 4.515347e-09, 1.899884e-08,
         2.129471e-09, 3.435784e-06, 7.346728e-10, 4.489656e-09, 9.342201e-10,
         8.122561e-07, 1.140678e-06, 1.011659e-05, 1.456205e-06, 0.001829687,
         1.506337e-09, 4.14289e-09,  1.913104e-09, 7.492448e-07},
        {9.353395e-08, 7.65078e-11,  4.895411e-10, 5.844578e-11, 4.995878e-07,
         6.825481e-10, 2.612705e-09, 5.21098e-10,  3.566527e-07, 1.411661e-10,
         2.056379e-09, 1.077765e-10, 0.0004513877, 6.151938e-07, 1.635083e-06,
         4.693963e-07, 0.0002036974, 1.673501e-07, 1.229394e-06, 1.278925e-07,
         0.001089649,  1.492447e-06, 6.574664e-06, 1.139759e-06, 0.0002598631,
         3.56097e-07,  1.567947e-06, 2.719459e-07, 0.9800493,    0.001345643,
         0.005913369,  0.00102765,   9.747666e-08, 7.996137e-11, 5.882642e-10,
         6.110798e-11, 5.214378e-07, 7.132673e-10, 3.145978e-09, 5.447092e-10,
         1.245256e-07, 1.702025e-10, 7.51144e-10,  1.299805e-10, 0.0004704668,
         6.435039e-07, 2.838238e-06, 4.914326e-07, 1.13375e-06,  3.796743e-10,
         6.833723e-09, 2.898765e-10, 6.060403e-06, 4.61553e-09,  3.656737e-08,
         3.52031e-09,  1.447482e-06, 5.726522e-10, 6.41237e-09,  4.372048e-10,
         0.009099614,  2.497995e-06, 5.491857e-05, 1.906514e-06},
        {1.285474e-10, 9.303928e-08, 1.043263e-10, 8.633244e-10, 1.143766e-09,
         4.97251e-07,  1.03308e-09,  4.617894e-09, 5.639259e-10, 1.188416e-07,
         5.489733e-10, 1.103043e-09, 1.031625e-06, 0.0004491741, 6.463614e-07,
         4.170116e-06, 2.8084e-07,   0.0002035169, 2.921583e-07, 1.888675e-06,
         2.501731e-06, 0.001087702,  2.604178e-06, 1.01026e-05,  5.967302e-07,
         0.000259635,  6.211671e-07, 2.411495e-06, 0.002252872,  0.9819136,
         0.002345135,  0.009120031,  1.342425e-10, 9.713796e-08, 1.396346e-10,
         9.014582e-10, 1.195131e-09, 5.191566e-07, 1.243975e-09, 4.821939e-09,
         2.852695e-10, 1.23923e-07,  2.969282e-10, 1.150999e-09, 1.078532e-06,
         0.0004686644, 1.122525e-06, 4.352964e-06, 9.840255e-10, 3.772669e-07,
         1.021441e-09, 3.50053e-09,  7.11376e-09,  2.016317e-06, 7.3985e-09,
         1.872606e-08, 1.40103e-09,  4.818932e-07, 1.460229e-09, 4.472287e-09,
         1.087306e-05, 0.001822475,  1.130636e-05, 1.691464e-05},
        {7.592172e-10, 9.68442e-11,  9.32125e-08,  8.970989e-11, 4.052817e-09,
         9.606393e-10, 4.97502e-07,  8.890344e-10, 3.189093e-09, 1.940327e-10,
         3.551006e-07, 1.795765e-10, 2.535414e-06, 6.009094e-07, 0.000450415,
         5.565976e-07, 1.906556e-06, 2.717708e-07, 0.0002027924, 2.51705e-07,
         1.019859e-05, 2.420755e-06, 0.001083999,  2.240434e-06, 2.432193e-06,
         5.775912e-07, 0.0002585156, 5.34567e-07,  0.009172794,  0.002182645,
         0.9749672,    0.002020068,  9.122856e-10, 1.298376e-10, 9.704355e-08,
         1.202508e-10, 4.880029e-09, 1.156831e-09, 5.187345e-07, 1.070656e-09,
         1.165172e-09, 2.760475e-10, 1.238803e-07, 2.554839e-10, 4.402663e-06,
         1.043605e-06, 0.0004680283, 9.658646e-07, 1.059943e-08, 6.161027e-10,
         1.127207e-06, 5.700641e-10, 5.672313e-08, 7.480486e-09, 6.031476e-06,
         6.914373e-09, 9.940716e-09, 9.299289e-10, 1.444366e-06, 8.605426e-10,
         8.516823e-05, 4.052742e-06, 0.00905919,   3.748556e-06},
        {5.85292e-11,  5.169989e-10, 5.798461e-11, 9.350187e-08, 5.215868e-10,
         2.76456e-09,  5.75226e-10,  5.001847e-07, 2.568625e-10, 6.605537e-10,
         3.052427e-10, 1.194691e-07, 4.702251e-07, 2.496845e-06, 3.595086e-07,
         0.0004516964, 1.279282e-07, 1.131027e-06, 1.624531e-07, 0.0002045578,
         1.141198e-06, 6.048051e-06, 1.450101e-06, 0.001094274,  2.722067e-07,
         1.443672e-06, 3.458886e-07, 0.0002612037, 0.001027681,  0.005459824,
         0.001305861,  0.9878467,    6.114999e-11, 5.398353e-10, 7.764289e-11,
         9.763473e-08, 5.451735e-10, 2.886715e-09, 6.926883e-10, 5.222934e-07,
         1.30129e-10,  6.890606e-10, 1.653398e-10, 1.246717e-07, 4.919856e-07,
         2.605958e-06, 6.250612e-07, 0.000471496,  4.477502e-10, 2.096281e-09,
         5.673381e-10, 3.790795e-07, 3.240681e-09, 1.121059e-08, 4.114185e-09,
         2.027873e-06, 6.374058e-10, 2.678215e-09, 8.114597e-10, 4.843572e-07,
         4.950788e-06, 1.012928e-05, 6.284139e-06, 0.001831792},
        {0.001856838,  5.08489e-07,  1.120794e-05, 3.879674e-07, 5.058182e-07,
         4.156245e-10, 3.051882e-09, 3.169555e-10, 2.243614e-06, 1.023479e-09,
         1.354104e-08, 7.811114e-10, 3.844292e-07, 3.14736e-10,  1.702821e-09,
         2.397911e-10, 0.0004393887, 1.203253e-07, 2.652166e-06, 9.180592e-08,
         1.196933e-07, 9.837199e-11, 7.22216e-10,  7.501857e-11, 5.31527e-07,
         4.362298e-10, 3.20544e-09,  3.326684e-10, 9.072338e-08, 7.462856e-11,
         5.473727e-10, 5.691188e-11, 0.9891474,    0.000270875,  0.005970528,
         0.0002066725, 0.0002694519, 2.214538e-07, 1.625844e-06, 1.688809e-07,
         0.001194649,  9.815602e-07, 7.208385e-06, 7.485384e-07, 0.00020446,
         1.680992e-07, 1.233689e-06, 1.281927e-07, 0.0004040757, 1.108327e-07,
         2.442928e-06, 8.456349e-08, 1.103947e-07, 9.067841e-11, 6.656801e-10,
         6.915136e-11, 1.465365e-06, 3.118902e-10, 2.563532e-09, 2.377319e-10,
         8.394444e-08, 3.82774e-11,  5.061774e-10, 2.921297e-11},
        {8.513109e-07, 0.001850043,  8.868296e-07, 1.716095e-05, 6.944819e-10,
         5.035104e-07, 7.237232e-10, 4.674107e-09, 1.713428e-09, 2.235152e-06,
         1.784487e-09, 2.073726e-08, 5.267653e-10, 3.823058e-07, 3.060141e-10,
         3.547959e-09, 2.014483e-07, 0.0004377812, 2.098533e-07, 4.060847e-06,
         1.643732e-10, 1.191471e-07, 1.7131e-10,   1.106047e-09, 7.286002e-10,
         5.282543e-07, 7.592628e-10, 4.903804e-09, 1.245973e-10, 9.040877e-08,
         1.298391e-10, 8.392683e-10, 0.0004534982, 0.9855278,    0.0004724193,
         0.00914173,   3.700351e-07, 0.0002682225, 3.856512e-07, 2.48992e-06,
         1.640123e-06, 0.001189199,  1.70934e-06,  1.103938e-05, 2.808831e-07,
         0.000203527,  2.927367e-07, 1.889351e-06, 1.854071e-07, 0.0004035671,
         1.934519e-07, 3.743478e-06, 1.514925e-10, 1.098354e-07, 1.578725e-10,
         1.019606e-09, 6.711305e-10, 4.875745e-07, 3.897004e-10, 4.523627e-09,
         6.423216e-11, 8.344658e-08, 6.686896e-11, 7.742001e-10},
        {1.738569e-05, 8.253828e-07, 0.001849968,  7.631943e-07, 4.735241e-09,
         6.736573e-10, 5.035712e-07, 6.225855e-10, 2.100491e-08, 1.660918e-09,
         2.234691e-06, 1.536201e-09, 2.640764e-09, 2.851978e-10, 3.834968e-07,
         2.637396e-10, 4.114026e-06, 1.953129e-07, 0.0004377634, 1.805971e-07,
         1.120577e-09, 1.594591e-10, 1.191614e-07, 1.473701e-10, 4.974175e-09,
         7.068817e-10, 5.288077e-07, 6.532902e-10, 8.49293e-10,  1.209563e-10,
         9.032028e-08, 1.117864e-10, 0.009261451,  0.0004396862, 0.9854878,
         0.000406558,  2.522628e-06, 3.589725e-07, 0.0002682547, 3.317579e-07,
         1.118439e-05, 1.59109e-06,  0.001189342,  1.470465e-06, 1.914169e-06,
         2.724856e-07, 0.0002035515, 2.51828e-07,  3.786413e-06, 1.80048e-07,
         0.0004035507, 1.664824e-07, 1.033127e-09, 1.469512e-10, 1.098488e-07,
         1.358105e-10, 9.463114e-09, 3.628235e-10, 4.887986e-07, 3.355238e-10,
         7.854291e-10, 6.209203e-11, 8.354745e-08, 5.742955e-11},
        {3.879792e-07, 1.027361e-05, 4.933625e-07, 0.001857787,  3.170172e-10,
         2.797351e-09, 4.032777e-10, 5.060851e-07, 7.810997e-10, 1.241462e-08,
         9.930231e-10, 2.245199e-06, 2.403147e-10, 2.123676e-09, 1.703263e-10,
         3.841523e-07, 9.180871e-08, 2.431076e-06, 1.167459e-07, 0.0004396137,
         7.503312e-11, 6.619452e-10, 9.545847e-11, 1.197564e-07, 3.325911e-10,
         2.93482e-09,  4.230809e-10, 5.309553e-07, 5.687623e-11, 5.022838e-10,
         7.234983e-11, 9.087112e-08, 0.0002066788, 0.005472809,  0.0002628171,
         0.9896532,    1.689137e-07, 1.490163e-06, 2.148951e-07, 0.0002695941,
         7.486839e-07, 6.606828e-06, 9.524895e-07, 0.00119528,   1.282176e-07,
         1.130735e-06, 1.631206e-07, 0.0002045679, 8.449828e-08, 2.241079e-06,
         1.076216e-07, 0.0004052564, 6.91533e-11,  6.102123e-10, 8.797074e-11,
         1.103971e-07, 3.055957e-10, 2.708125e-09, 2.168949e-10, 4.89766e-07,
         2.92815e-11,  4.634844e-10, 3.721099e-11, 8.382174e-08},
        {8.468577e-07, 6.944938e-10, 5.110834e-09, 5.307449e-10, 0.001851258,
         2.532503e-06, 1.117001e-05, 1.934026e-06, 8.839695e-07, 8.862395e-10,
         5.334385e-09, 6.772226e-10, 3.43511e-06,  4.685907e-09, 1.520867e-08,
         3.576216e-09, 2.003945e-07, 1.643759e-10, 1.209459e-09, 1.256191e-10,
         0.0004380688, 5.992738e-07, 2.643194e-06, 4.576543e-07, 2.092826e-07,
         2.860123e-10, 1.262671e-09, 2.184221e-10, 8.106657e-07, 1.109815e-09,
         4.890973e-09, 8.475459e-10, 0.0004511254, 3.700412e-07, 2.722719e-06,
         2.827922e-07, 0.9861753,    0.001349078,  0.005950326,  0.001030266,
         0.0004706982, 6.43811e-07,  2.840071e-06, 4.916665e-07, 0.001826973,
         2.499265e-06, 1.102348e-05, 1.908642e-06, 1.849177e-07, 1.51495e-10,
         1.11507e-09,  1.157752e-10, 0.0004038322, 5.524384e-07, 2.436619e-06,
         4.21887e-07,  1.929951e-07, 1.932906e-10, 8.5494e-10,   1.476982e-10,
         7.495059e-07, 7.50572e-10,  4.522958e-09, 5.735515e-10},
        {1.16499e-09,  8.429939e-07, 1.211825e-09, 7.823136e-09, 4.23991e-06,
         0.001841141,  4.413522e-06, 1.710057e-05, 1.485945e-09, 8.798632e-07,
         1.545806e-09, 8.167057e-09, 7.849027e-09, 3.413036e-06, 6.00618e-09,
         3.169008e-08, 2.757349e-10, 1.9948e-07,   2.868465e-10, 1.851211e-09,
         1.003303e-06, 0.0004356747, 1.044385e-06, 4.046558e-06, 4.789161e-10,
         2.079463e-07, 4.985262e-10, 1.93141e-09,  1.85652e-09,  8.071247e-07,
         1.932394e-09, 7.496593e-09, 6.207312e-07, 0.000449067,  6.457456e-07,
         4.167425e-06, 0.002258623,  0.9807857,    0.002351107,  0.009109564,
         1.077867e-06, 0.0004681259, 1.122002e-06, 4.347965e-06, 4.184262e-06,
         0.001816989,  4.355595e-06, 1.687624e-05, 2.544061e-10, 1.838901e-07,
         2.643472e-10, 1.706534e-09, 9.248909e-07, 0.0004016252, 9.627626e-07,
         3.730306e-06, 3.236262e-10, 1.919328e-07, 3.374981e-10, 1.781556e-09,
         1.260554e-09, 7.449698e-07, 1.311344e-09, 6.914953e-09},
        {7.925929e-09, 1.127727e-09, 8.430957e-07, 1.044459e-09, 1.732688e-05,
         4.107717e-06, 0.001841659,  3.80172e-06,  8.272615e-09, 1.43872e-09,
         8.798238e-07, 1.332373e-09, 2.358463e-08, 5.589377e-09, 3.424231e-06,
         5.176535e-09, 1.87564e-09,  2.669399e-10, 1.99504e-07,  2.472298e-10,
         4.100111e-06, 9.720214e-07, 0.0004357972, 8.996125e-07, 1.95865e-09,
         4.639115e-10, 2.081977e-07, 4.293529e-10, 7.586856e-09, 1.799984e-09,
         8.06463e-07,  1.665899e-09, 4.222418e-06, 6.009321e-07, 0.000449121,
         5.565608e-07, 0.009230121,  0.002188203,  0.9810614,    0.002025197,
         4.405506e-06, 1.044261e-06, 0.0004682575, 9.664704e-07, 1.709958e-05,
         4.053804e-06, 0.0018175,    3.751823e-06, 1.729225e-09, 2.460015e-10,
         1.839125e-07, 2.278375e-10, 3.779673e-06, 8.960545e-07, 0.0004017381,
         8.293046e-07, 1.325869e-09, 3.138792e-10, 1.92445e-07,  2.906833e-10,
         7.014247e-09, 1.218485e-09, 7.459902e-07, 1.128417e-09},
        {5.306738e-10, 4.68486e-09,  6.738258e-10, 8.473045e-07, 1.934085e-06,
         1.023747e-05, 2.4576e-06,   0.001852266,  6.770775e-10, 4.890817e-09,
         8.597925e-10, 8.846345e-07, 3.578528e-09, 1.897435e-08, 3.341408e-09,
         3.432687e-06, 1.256023e-10, 1.108592e-09, 1.594989e-10, 2.005001e-07,
         4.576682e-07, 2.422524e-06, 5.815493e-07, 0.0004383072, 2.184629e-10,
         1.156263e-09, 2.77596e-10,  2.092026e-07, 8.468738e-10, 4.487932e-09,
         1.076024e-09, 8.120014e-07, 2.827544e-07, 2.495649e-06, 3.590621e-07,
         0.0004513635, 0.001030297,  0.005453557,  0.001309177,  0.9867119,
         4.916814e-07, 2.602965e-06, 6.247692e-07, 0.0004709543, 1.9087e-06,
         1.010318e-05, 2.425344e-06, 0.001827968,  1.158863e-10, 1.021952e-09,
         1.469882e-10, 1.848304e-07, 4.218998e-07, 2.233195e-06, 5.360991e-07,
         0.000404052,  1.473983e-10, 1.066879e-09, 1.877591e-10, 1.929736e-07,
         5.743773e-10, 4.140998e-09, 7.293831e-10, 7.490099e-07},
        {3.479554e-06, 2.21918e-09,  2.100137e-08, 1.696165e-09, 8.225658e-07,
         9.751728e-10, 4.96301e-09,  7.446418e-10, 0.001852524,  1.519547e-06,
         1.118064e-05, 1.161266e-06, 7.59494e-07,  8.977299e-10, 3.363373e-09,
         6.850149e-10, 8.241207e-07, 6.750998e-10, 4.971871e-09, 5.15923e-10,
         1.946956e-07, 2.662007e-10, 1.174663e-09, 2.032923e-10, 0.0004387024,
         5.99412e-07,  2.646659e-06, 4.577591e-07, 1.792819e-07, 2.453182e-10,
         1.081438e-09, 1.873449e-10, 0.001853134,  1.519618e-06, 1.118439e-05,
         1.16132e-06,  0.0004380934, 5.992153e-07, 2.643342e-06, 4.576096e-07,
         0.9862303,    0.001349153,  0.005950658,  0.001030323,  0.0004038549,
         5.523996e-07, 2.436755e-06, 4.218573e-07, 2.271058e-06, 6.217757e-10,
         7.020936e-09, 4.746586e-10, 1.795108e-07, 2.1265e-10,   9.391807e-10,
         1.623642e-10, 0.0004037007, 3.313248e-07, 1.46659e-06,  2.531818e-07,
         1.657622e-07, 1.357729e-10, 8.678094e-10, 1.037553e-10},
        {3.724659e-09, 3.465002e-06, 3.874175e-09, 3.214889e-08, 1.632658e-09,
         8.184077e-07, 1.699526e-09, 7.599586e-09, 2.548767e-06, 0.001844679,
         2.651478e-06, 1.711896e-05, 1.504145e-09, 7.549248e-07, 1.086852e-09,
         7.007922e-09, 1.132597e-09, 8.194253e-07, 1.177841e-09, 7.604414e-09,
         4.456039e-10, 1.935421e-07, 4.638502e-10, 1.797623e-09, 1.003383e-06,
         0.0004356996, 1.044469e-06, 4.046788e-06, 4.102544e-10, 1.784162e-07,
         4.270213e-10, 1.657133e-09, 2.549108e-06, 0.001844679,  2.651832e-06,
         1.711896e-05, 1.003205e-06, 0.0004356993, 1.044283e-06, 4.046786e-06,
         0.002258748,  0.9808404,    0.002351237,  0.009110072,  9.248259e-07,
         0.0004016479, 9.626949e-07, 3.730515e-06, 2.194968e-09, 7.558532e-07,
         8.475449e-10, 7.013008e-09, 3.560186e-10, 1.785269e-07, 3.708151e-10,
         1.657768e-09, 5.541741e-07, 0.000402397,  5.790715e-07, 3.734317e-06,
         2.28155e-10,  1.647788e-07, 2.375124e-10, 1.529178e-09},
        {3.256891e-08, 3.605251e-09, 3.464853e-06, 3.339504e-09, 7.6986e-09,
         1.581742e-09, 8.185046e-07, 1.463757e-09, 1.733905e-05, 2.467685e-06,
         0.001844294,  2.285478e-06, 5.215205e-09, 1.011679e-09, 7.572762e-07,
         9.369962e-10, 7.709377e-09, 1.096212e-09, 8.199038e-07, 1.01527e-09,
         1.822133e-09, 4.317772e-10, 1.936862e-07, 3.996124e-10, 4.105487e-06,
         9.722455e-07, 0.000436429,  8.998185e-07, 1.677522e-09, 3.978761e-10,
         1.783529e-07, 3.682371e-10, 1.734486e-05, 2.4678e-06,   0.001844901,
         2.285585e-06, 4.100342e-06, 9.719266e-07, 0.0004358218, 8.995247e-07,
         0.009230637,  0.002188324,  0.9811162,    0.002025309,  3.779885e-06,
         8.959915e-07, 0.0004017608, 8.292462e-07, 1.182951e-08, 7.869834e-10,
         7.568545e-07, 7.289303e-10, 1.456596e-09, 3.451223e-10, 1.787903e-07,
         3.193938e-10, 2.270241e-06, 5.38458e-07,  0.0004039531, 4.987219e-07,
         1.345638e-09, 2.205254e-10, 1.652007e-07, 2.042467e-10},
        {1.695853e-09, 1.925226e-08, 2.153188e-09, 3.481649e-06, 7.446769e-10,
         4.549588e-09, 9.462532e-10, 8.230989e-07, 1.16101e-06,  1.025163e-05,
         1.474335e-06, 0.001854112,  6.856863e-10, 4.195973e-09, 6.044658e-10,
         7.590376e-07, 5.159177e-10, 4.553879e-09, 6.549293e-10, 8.236151e-07,
         2.032673e-10, 1.07617e-09,  2.582875e-10, 1.947114e-07, 4.577043e-07,
         2.422661e-06, 5.815951e-07, 0.000438332,  1.871423e-10, 9.920638e-10,
         2.377801e-10, 1.794941e-07, 1.161165e-06, 1.025163e-05, 1.474531e-06,
         0.001854112,  4.576235e-07, 2.42266e-06,  5.814925e-07, 0.0004383318,
         0.001030354,  0.005453862,  0.001309249,  0.986767,     4.218701e-07,
         2.233321e-06, 5.360614e-07, 0.0004040747, 9.98291e-10,  4.199717e-09,
         4.708782e-10, 7.594844e-07, 1.623688e-10, 9.924441e-10, 2.064704e-10,
         1.795502e-07, 2.522921e-07, 2.236284e-06, 3.220785e-07, 0.0004044546,
         1.039142e-10, 9.15743e-10,  1.320765e-10, 1.656214e-07},
        {3.84124e-07,  3.14657e-10,  2.009856e-09, 2.403724e-10, 2.054826e-06,
         2.807321e-09, 1.074553e-08, 2.143275e-09, 4.906927e-07, 4.913623e-10,
         2.566865e-09, 3.753554e-10, 0.001857951,  2.531897e-06, 6.731209e-06,
         1.931848e-06, 9.077392e-08, 7.449716e-11, 5.478141e-10, 5.693211e-11,
         4.855828e-07, 6.644049e-10, 2.929656e-09, 5.073939e-10, 1.160165e-07,
         1.585887e-10, 6.998051e-10, 1.211112e-10, 0.0004378736, 5.995832e-07,
         2.641611e-06, 4.578911e-07, 0.0002044613, 1.677724e-07, 1.234004e-06,
         1.282147e-07, 0.00109374,   1.496216e-06, 6.599343e-06, 1.142632e-06,
         0.0002610762, 3.571047e-07, 1.575266e-06, 2.727142e-07, 0.9873646,
         0.001350705,  0.0059575,    0.001031508,  8.393488e-08, 5.347816e-11,
         5.058994e-10, 4.087439e-11, 4.482902e-07, 5.312919e-10, 2.704793e-09,
         4.056943e-10, 1.07114e-07,  8.777174e-11, 4.747055e-10, 6.707368e-11,
         0.000405431,  3.320352e-07, 2.446625e-06, 2.53747e-07},
        {5.276876e-10, 3.821868e-07, 4.281e-10,    3.546364e-09, 4.700031e-09,
         2.042608e-06, 4.244999e-09, 1.896939e-08, 8.236826e-10, 4.881773e-07,
         7.024084e-10, 4.530844e-09, 4.241015e-06, 0.001845118,  2.657804e-06,
         1.713001e-05, 1.249153e-10, 9.040932e-08, 1.299327e-10, 8.390152e-10,
         1.112193e-09, 4.831952e-07, 1.157647e-09, 4.487928e-09, 2.655143e-10,
         1.15339e-07,  2.763235e-10, 1.071271e-09, 1.002722e-06, 0.0004362005,
         1.043623e-06, 4.051439e-06, 2.814322e-07, 0.0002035283, 2.927734e-07,
         1.888781e-06, 2.50496e-06,  0.001087763,  2.607531e-06, 1.010317e-05,
         5.978637e-07, 0.0002596495, 6.223445e-07, 2.411631e-06, 0.002261347,
         0.9819684,    0.002353942,  0.009120549,  8.998345e-11, 8.339525e-08,
         9.341202e-11, 7.737561e-10, 8.897619e-10, 4.457085e-07, 9.262073e-10,
         4.13877e-09,  1.470796e-10, 1.06523e-07,  1.533879e-10, 9.88553e-10,
         5.585207e-07, 0.0004028596, 5.80907e-07,  3.738611e-06},
        {3.117036e-09, 3.98244e-10,  3.828047e-07, 3.689061e-10, 1.666843e-08,
         3.95087e-09,  2.046247e-06, 3.656374e-09, 3.980889e-09, 6.53541e-10,
         4.888865e-07, 6.053074e-10, 1.043764e-05, 2.473301e-06, 0.001853944,
         2.290909e-06, 8.495552e-10, 1.209651e-10, 9.037064e-08, 1.120334e-10,
         4.544471e-09, 1.077583e-09, 4.830653e-07, 9.973104e-10, 1.085535e-09,
         2.572114e-10, 1.154153e-07, 2.380508e-10, 4.097656e-06, 9.723767e-07,
         0.000435604,  8.999426e-07, 1.913705e-06, 2.724555e-07, 0.0002035528,
         2.523381e-07, 1.023687e-05, 2.42686e-06,  0.001088069,  2.246075e-06,
         2.443547e-06, 5.792233e-07, 0.0002597225, 5.360751e-07, 0.00924125,
         0.002190841,  0.9822445,    0.002027639,  7.846743e-10, 8.685457e-11,
         8.345074e-08, 8.045234e-11, 4.195663e-09, 8.617664e-10, 4.460767e-07,
         7.974853e-10, 7.359412e-10, 1.425608e-10, 1.068653e-07, 1.320373e-10,
         3.794249e-06, 5.390987e-07, 0.0004036294, 4.992927e-07},
        {2.402625e-10, 2.123729e-09, 2.379381e-10, 3.84087e-07,  2.143332e-09,
         1.135626e-08, 2.363642e-09, 2.054659e-06, 3.751757e-10, 2.713281e-09,
         3.905798e-10, 4.907553e-07, 1.933094e-06, 1.025654e-05, 1.478277e-06,
         0.001855478,  5.690122e-11, 5.024415e-10, 7.22482e-11,  9.087168e-08,
         5.073403e-10, 2.686756e-09, 6.446182e-10, 4.861147e-07, 1.211173e-10,
         6.413301e-10, 1.538663e-10, 1.160358e-07, 4.574039e-07, 2.425446e-06,
         5.81126e-07,  0.000438836,  1.281976e-07, 1.13109e-06,  1.627946e-07,
         0.0002045692, 1.142667e-06, 6.048392e-06, 1.451962e-06, 0.001094335,
         2.727225e-07, 1.443754e-06, 3.465426e-07, 0.0002612183, 0.00103154,
         0.005460134,  0.001310755,  0.9879018,    4.09698e-11,  4.633613e-10,
         5.191657e-11, 8.379598e-08, 4.058316e-10, 2.477727e-09, 5.156884e-10,
         4.482635e-07, 6.696863e-11, 5.919917e-10, 8.530807e-11, 1.070677e-07,
         2.544166e-07, 2.238855e-06, 3.230094e-07, 0.0004049197},
        {0.0002043779, 5.601313e-08, 1.234618e-06, 4.273707e-08, 5.586512e-08,
         4.587753e-11, 3.367596e-10, 3.498614e-11, 7.428876e-07, 1.580471e-10,
         2.497712e-09, 1.204298e-10, 4.253325e-08, 2.70862e-11,  1.882142e-10,
         2.062235e-11, 0.001094337,  2.999221e-07, 6.610744e-06, 2.288355e-07,
         2.992942e-07, 2.459245e-10, 1.804272e-09, 1.875416e-10, 3.964222e-06,
         2.28859e-09,  1.330605e-08, 1.7426e-09,   6.787239e-07, 3.518676e-10,
         4.090666e-09, 2.680394e-10, 0.000261219,  7.159156e-08, 1.577988e-06,
         5.462315e-08, 7.140189e-08, 5.867503e-11, 4.30441e-10,  4.474551e-11,
         9.464648e-07, 5.463793e-10, 3.178161e-09, 4.160293e-10, 5.425941e-08,
         3.474478e-11, 3.270075e-10, 2.648389e-11, 0.9855326,    0.0002705352,
         0.005963004,  0.0002064144, 0.0002701718, 2.217933e-07, 1.627233e-06,
         1.691391e-07, 0.005963002,  9.778114e-07, 7.229367e-06, 7.445394e-07,
         0.0002049232, 5.624643e-08, 1.233989e-06, 4.291489e-08},
        {9.385238e-08, 0.0002041205, 9.784611e-08, 1.893416e-06, 7.66068e-11,
         5.555377e-08, 7.982568e-11, 5.157076e-10, 1.896453e-10, 2.467634e-07,
         1.192918e-10, 2.28898e-09,  4.52506e-11,  4.220703e-08, 2.033822e-11,
         3.9162e-10,   5.025315e-07, 0.001092961,  5.239165e-07, 1.013828e-05,
         4.103177e-10, 2.974619e-07, 4.275981e-10, 2.76135e-09,  1.816877e-09,
         1.319654e-06, 1.475554e-09, 1.224787e-08, 3.805365e-10, 2.258541e-07,
         3.962931e-10, 2.096268e-09, 1.199545e-07, 0.0002608902, 1.250591e-07,
         2.420011e-06, 9.793387e-11, 7.100427e-08, 1.020584e-10, 6.591354e-10,
         4.338299e-10, 3.150019e-07, 3.523923e-10, 2.923571e-09, 5.787919e-11,
         5.391141e-08, 6.032748e-11, 5.003537e-10, 0.0004529293, 0.9866613,
         0.0004729596, 0.009152244,  3.702921e-07, 0.0002685314, 3.858544e-07,
         2.492787e-06, 1.639782e-06, 0.001192787,  5.727964e-07, 1.106434e-05,
         9.402502e-08, 0.0002041412, 9.787148e-08, 1.893609e-06},
        {1.916673e-06, 9.106652e-08, 0.0002041122, 8.420515e-08, 5.225181e-10,
         7.430358e-11, 5.556065e-08, 6.867037e-11, 3.56176e-09,  1.105937e-10,
         2.477768e-07, 1.022329e-10, 2.919222e-10, 1.901691e-11, 4.237377e-08,
         1.757646e-11, 1.026279e-05, 4.876152e-07, 0.001092917,  4.50876e-07,
         2.799525e-09, 3.981661e-10, 2.976637e-07, 3.679796e-10, 1.901017e-08,
         1.376743e-09, 1.32073e-06,  1.271323e-09, 6.346039e-09, 5.691258e-10,
         6.748131e-07, 5.253967e-10, 2.449734e-06, 1.163939e-07, 0.0002608796,
         1.076243e-07, 6.678758e-10, 9.499831e-11, 7.101291e-08, 8.779616e-11,
         4.538763e-09, 3.287376e-10, 3.154191e-07, 3.035656e-10, 5.073016e-10,
         5.620219e-11, 5.394692e-08, 5.191681e-11, 0.00924978,   0.0004401891,
         0.9866211,    0.0004070234, 2.52615e-06,  3.591623e-07, 0.0002685642,
         3.319329e-07, 2.909519e-05, 5.344791e-07, 0.001197213,  4.939398e-07,
         1.915086e-06, 9.115731e-08, 0.000203684,  8.428929e-08},
        {4.277271e-08, 1.133517e-06, 5.443393e-08, 0.0002049749, 3.496948e-11,
         3.086398e-10, 4.4481e-11,   5.583782e-08, 8.630009e-11, 1.370326e-09,
         6.635554e-11, 2.477965e-07, 2.064545e-11, 2.344091e-10, 1.131713e-11,
         4.239786e-08, 2.29026e-07,  6.069404e-06, 2.914662e-07, 0.001097536,
         1.873019e-10, 1.652608e-09, 2.38269e-10,  2.989829e-07, 8.284652e-10,
         7.330083e-09, 8.222781e-10, 1.325994e-06, 1.735417e-10, 1.254571e-09,
         2.206137e-10, 2.269392e-07, 5.466862e-08, 1.448769e-06, 6.957309e-08,
         0.0002619823, 4.470488e-11, 3.944781e-10, 5.686964e-11, 7.136734e-08,
         1.978191e-10, 1.749693e-09, 1.963766e-10, 3.165152e-07, 2.642417e-11,
         2.994508e-10, 3.362058e-11, 5.417046e-08, 0.0002064206, 0.005479103,
         0.0002631179, 0.9907913,    1.690309e-07, 1.491879e-06, 2.150084e-07,
         0.0002699044, 7.45997e-07,  6.6238e-06,   3.18703e-07,  0.00119778,
         4.285126e-08, 1.133632e-06, 5.444819e-08, 0.0002049959},
        {9.348316e-08, 7.660812e-11, 5.639618e-10, 5.85453e-11,  0.0002042546,
         2.794182e-07, 1.232419e-06, 2.133865e-07, 9.78969e-08,  8.006726e-11,
         5.122873e-10, 6.118595e-11, 3.794623e-07, 4.484711e-10, 1.680795e-09,
         3.422066e-10, 5.008319e-07, 4.104009e-10, 3.021568e-09, 3.136355e-10,
         0.001093681,  1.496143e-06, 6.598985e-06, 1.142577e-06, 5.224177e-07,
         6.188929e-10, 2.732673e-09, 4.725417e-10, 6.060403e-06, 4.249073e-09,
         3.656737e-08, 3.240581e-09, 1.194824e-07, 9.793556e-11, 7.208489e-10,
         7.48441e-11,  0.0002610616, 3.571296e-07, 1.575178e-06, 2.727333e-07,
         1.246838e-07, 1.477009e-10, 6.522149e-10, 1.127737e-10, 4.840792e-07,
         5.738857e-10, 2.920729e-09, 4.382186e-10, 0.0004523226, 3.702983e-07,
         2.726507e-06, 2.829886e-07, 0.9873094,    0.001350629,  0.005957169,
         0.001031451,  0.0004721465, 3.86614e-07,  1.711792e-06, 2.954306e-07,
         0.001826789,  1.500877e-06, 1.102523e-05, 1.146999e-06},
        {1.285289e-10, 9.300997e-08, 1.33663e-10,  8.631491e-10, 4.678011e-07,
         0.0002031383, 4.869562e-07, 1.886754e-06, 1.346706e-10, 9.713797e-08,
         1.40183e-10,  9.014585e-10, 7.511179e-10, 3.768036e-07, 5.429398e-10,
         3.497847e-09, 6.885465e-10, 4.980206e-07, 7.161162e-10, 4.621722e-09,
         2.504838e-06, 0.001087702,  2.607404e-06, 1.01026e-05,  1.035714e-09,
         5.194795e-07, 1.078757e-09, 4.823792e-09, 7.727281e-09, 2.016317e-06,
         8.037382e-09, 1.872605e-08, 1.643106e-10, 1.188777e-07, 1.708898e-10,
         1.103207e-09, 5.979055e-07, 0.0002596348, 6.22388e-07,  2.411495e-06,
         2.47281e-10,  1.239999e-07, 2.575578e-10, 1.151441e-09, 9.60503e-10,
         4.812946e-07, 9.998464e-10, 4.469216e-09, 6.216769e-07, 0.0004495843,
         6.460885e-07, 4.172222e-06, 0.00226122,   0.9819136,    0.00235381,
         0.00912004,   6.474824e-07, 0.0004695386, 6.755307e-07, 4.357402e-06,
         2.514583e-06, 0.001822473,  2.615919e-06, 1.691287e-05},
        {8.743694e-10, 1.243868e-10, 9.302148e-08, 1.152024e-10, 1.911723e-06,
         4.532159e-07, 0.0002031954, 4.194544e-07, 7.946162e-10, 1.300429e-10,
         9.75519e-08,  1.204433e-10, 2.606221e-09, 5.055046e-10, 3.783537e-07,
         4.681868e-10, 4.684655e-09, 6.664191e-10, 4.983579e-07, 6.17212e-10,
         1.023632e-05, 2.426742e-06, 0.001088009,  2.245966e-06, 4.239663e-09,
         1.004437e-09, 5.203193e-07, 9.295572e-10, 5.672312e-08, 6.88587e-09,
         6.031475e-06, 6.364306e-09, 1.117608e-09, 1.590303e-10, 1.188922e-07,
         1.472879e-10, 2.44341e-06,  5.792639e-07, 0.0002597079, 5.361127e-07,
         1.011893e-09, 2.397124e-10, 1.241829e-07, 2.218421e-10, 4.530623e-09,
         9.308542e-10, 4.81689e-07,  8.614193e-10, 4.226001e-06, 6.012502e-07,
         0.0004496391, 5.568556e-07, 0.009240736,  0.002190719,  0.9821897,
         0.002027525,  2.655923e-06, 6.281522e-07, 0.0004713536, 5.81797e-07,
         1.709803e-05, 2.437367e-06, 0.001818672,  2.257401e-06},
        {5.854714e-11, 5.168941e-10, 7.432223e-11, 9.348553e-08, 2.13393e-07,
         1.129529e-06, 2.711539e-07, 0.0002043657, 6.133629e-11, 5.398354e-10,
         7.795326e-11, 9.763474e-08, 3.424079e-10, 2.094325e-09, 3.019623e-10,
         3.788565e-07, 3.13645e-10,  2.767703e-09, 3.981909e-10, 5.005672e-07,
         1.142611e-06, 6.048054e-06, 1.451892e-06, 0.001094274,  4.723559e-10,
         2.887825e-09, 6.006535e-10, 5.224572e-07, 3.520418e-09, 1.12106e-08,
         4.469773e-09, 2.027873e-06, 7.484639e-11, 6.606517e-10, 9.502197e-11,
         1.194856e-07, 2.727416e-07, 1.443673e-06, 3.465669e-07, 0.0002612037,
         1.12777e-10,  6.893247e-10, 1.434086e-10, 1.247107e-07, 4.380977e-10,
         2.675553e-09, 5.56689e-10,  4.840536e-07, 2.83184e-07,  2.498522e-06,
         3.592523e-07, 0.000451883,  0.001031482,  0.005459829,  0.001310682,
         0.9878467,    2.947709e-07, 2.609416e-06, 3.757287e-07, 0.0004719394,
         1.14544e-06,  1.012822e-05, 1.454564e-06, 0.001831792},
        {1.149999e-06, 2.449195e-10, 4.788793e-09, 1.866479e-10, 9.101277e-08,
         7.460493e-11, 4.031664e-10, 5.687018e-11, 0.0002052692, 5.610979e-08,
         7.454665e-07, 4.278709e-08, 8.411247e-08, 5.354994e-11, 2.377691e-10,
         4.076352e-11, 6.157489e-06, 1.684003e-09, 2.563082e-08, 1.283758e-09,
         4.866687e-07, 4.873557e-10, 2.155167e-09, 3.716149e-10, 0.001092436,
         8.95937e-07,  3.958464e-06, 6.82866e-07,  1.340461e-06, 7.749612e-10,
         5.934611e-09, 5.902631e-10, 1.46945e-06,  4.019809e-10, 6.117535e-09,
         3.064401e-10, 1.161206e-07, 1.163052e-10, 5.142767e-10, 8.868425e-11,
         0.0002609766, 2.139823e-07, 9.461215e-07, 1.630931e-07, 1.071137e-07,
         8.785003e-11, 4.744332e-10, 6.696674e-11, 0.009249777,  1.519293e-06,
         2.909519e-05, 1.157163e-06, 0.0004394368, 3.599479e-07, 1.593557e-06,
         2.743447e-07, 0.9866211,    0.0002694854, 0.001197216,  0.0002054426,
         0.0004044232, 1.107521e-07, 1.46682e-06,  8.445531e-08},
        {2.931564e-10, 3.827781e-07, 1.846215e-10, 3.550653e-09, 1.248313e-10,
         9.040933e-08, 1.301159e-10, 8.392736e-10, 9.484949e-08, 0.0002039076,
         9.902262e-08, 1.891444e-06, 8.958842e-11, 8.344803e-08, 4.036717e-11,
         7.74277e-10,  2.193526e-09, 2.048313e-06, 1.637123e-09, 1.900387e-08,
         8.15642e-10,  4.83796e-07,  8.500176e-10, 4.492069e-09, 1.501225e-06,
         0.001089792,  1.56574e-06,  1.011658e-05, 8.878506e-10, 4.462628e-07,
         9.25283e-10,  4.142888e-09, 5.236247e-10, 4.88933e-07,  3.90922e-10,
         4.536231e-09, 1.947087e-10, 1.154823e-07, 2.029148e-10, 1.072258e-09,
         3.585954e-07, 0.0002601338, 3.740053e-07, 2.414832e-06, 1.469477e-10,
         1.06523e-07,  1.531737e-10, 9.888573e-10, 2.539422e-06, 0.001850245,
         8.908159e-07, 1.716294e-05, 6.02436e-07,  0.0004370142, 6.281652e-07,
         4.056819e-06, 0.0004511797, 0.9856355,    0.0004731473, 0.009142729,
         1.854938e-07, 0.0004036107, 1.935399e-07, 3.743884e-06},
        {3.125275e-09, 1.713728e-10, 3.842717e-07, 1.584821e-10, 6.255837e-10,
         1.21185e-10,  9.077661e-08, 1.120202e-10, 1.15867e-06,  9.148387e-08,
         0.0002055476, 8.46136e-08,  3.687862e-10, 3.764493e-11, 8.410729e-08,
         3.480992e-11, 1.670184e-08, 1.523223e-09, 2.052965e-06, 1.409072e-09,
         3.343888e-09, 7.919582e-10, 4.852854e-07, 7.322858e-10, 6.153141e-06,
         1.458791e-06, 0.001093124,  1.34856e-06,  9.211376e-09, 1.258571e-09,
         1.33757e-06,  1.162442e-09, 3.987617e-09, 3.637106e-10, 4.901605e-07,
         3.364538e-10, 7.979355e-10, 1.889972e-10, 1.157905e-07, 1.747567e-10,
         1.470675e-06, 3.484112e-07, 0.0002611398, 3.220839e-07, 7.363559e-10,
         1.427598e-10, 1.068646e-07, 1.319635e-10, 1.739534e-05, 8.269581e-07,
         0.001857111,  7.647524e-07, 2.471388e-06, 5.85178e-07,  0.0004387034,
         5.409595e-07, 0.001857115,  0.0004403684, 0.9929925,    0.0004073529,
         2.275568e-06, 1.803496e-07, 0.0004042133, 1.668064e-07},
        {1.333804e-10, 2.125642e-09, 1.026796e-10, 3.843807e-07, 5.698019e-11,
         5.02287e-10,  7.250553e-11, 9.087168e-08, 4.321506e-08, 1.132336e-06,
         5.509615e-08, 0.0002047615, 4.087187e-11, 4.634533e-10, 2.246365e-11,
         8.382538e-08, 9.986851e-10, 1.13769e-08,  9.108627e-10, 2.05752e-06,
         3.722787e-10, 2.688406e-09, 4.736206e-10, 4.864195e-07, 6.852168e-07,
         6.054554e-06, 8.725133e-07, 0.001095365,  4.048911e-10, 2.479429e-09,
         5.151618e-10, 4.485447e-07, 2.383999e-10, 2.715671e-09, 2.175012e-10,
         4.911306e-07, 8.886977e-11, 6.417234e-10, 1.130619e-10, 1.161085e-07,
         1.636765e-07, 1.445224e-06, 2.084153e-07, 0.000261464,  6.707556e-11,
         5.918096e-10, 8.535434e-11, 1.070677e-07, 1.154945e-06, 1.02748e-05,
         4.953003e-07, 0.00185799,   2.749743e-07, 2.427917e-06, 3.500465e-07,
         0.0004392487, 0.0002054461, 0.005473407,  0.0002633323, 0.9897613,
         8.451377e-08, 2.241322e-06, 1.076857e-07, 0.0004053004},
        {4.251744e-08, 1.939095e-11, 2.22431e-10,  1.478984e-11, 2.272619e-07,
         2.279795e-10, 1.188788e-09, 1.738473e-10, 5.481591e-08, 2.485529e-11,
         2.438417e-10, 1.895599e-11, 0.0002057338, 1.68478e-07,  7.465651e-07,
         1.283156e-07, 6.7784e-07,   3.509166e-10, 4.09009e-09,  2.677593e-10,
         3.628148e-06, 3.425692e-09, 2.189002e-08, 2.612616e-09, 8.654059e-07,
         7.644896e-10, 4.989141e-09, 5.829524e-10, 0.005447595,  3.888028e-06,
         3.28695e-05,  2.963757e-06, 5.426661e-08, 2.480183e-11, 3.273259e-10,
         1.892858e-11, 2.900636e-07, 2.913894e-10, 1.749979e-09, 2.222806e-10,
         6.927285e-08, 5.695074e-11, 3.625254e-10, 4.342483e-11, 0.0002620899,
         2.156582e-07, 1.581222e-06, 1.644613e-07, 0.0002049272, 5.616206e-08,
         1.2346e-06,   4.285057e-08, 0.00109363,   8.991723e-07, 6.598749e-06,
         6.857104e-07, 0.0002614423, 7.162399e-08, 9.483413e-07, 5.463293e-08,
         0.9860365,    0.0002706194, 0.00595175,   0.0002064782},
        {3.236724e-11, 4.222012e-08, 2.03443e-11,  3.916709e-10, 3.80363e-10,
         2.256466e-07, 3.247474e-10, 2.094904e-09, 4.160068e-11, 5.396226e-08,
         2.626615e-11, 5.006016e-10, 2.810309e-07, 0.0002039563, 9.839806e-08,
         1.892614e-06, 2.424527e-10, 2.259958e-07, 2.523028e-10, 2.096807e-09,
         2.406634e-09, 1.207841e-06, 2.506363e-09, 1.121544e-08, 4.858172e-10,
         2.884913e-07, 5.061155e-10, 2.678214e-09, 2.503688e-06, 0.001091047,
         2.606848e-06, 1.012927e-05, 4.142799e-11, 5.394525e-08, 4.312858e-11,
         5.004929e-10, 4.863217e-10, 2.883119e-07, 5.066738e-10, 2.676991e-09,
         9.499581e-11, 6.886291e-08, 9.902067e-11, 6.392572e-10, 3.593625e-07,
         0.0002604328, 3.744499e-07, 2.417609e-06, 9.416938e-08, 0.0002041425,
         9.794462e-08, 1.893621e-06, 1.504303e-06, 0.001091046,  1.567789e-06,
         1.012822e-05, 1.198675e-07, 0.0002609184, 1.252668e-07, 2.420273e-06,
         0.0004530702, 0.9867691,    0.0004719748, 0.009153244},
        {3.449073e-10, 1.901246e-11, 4.2359e-08,   1.757917e-11, 1.844422e-09,
         3.030452e-10, 2.26425e-07,  2.800789e-10, 3.783097e-10, 2.443274e-11,
         5.471132e-08, 2.259215e-11, 1.15759e-06,  9.252937e-08, 0.0002054415,
         8.552838e-08, 6.343849e-09, 5.692387e-10, 6.748738e-07, 5.263805e-10,
         3.396415e-08, 5.552193e-09, 3.61113e-06,  5.131617e-09, 7.741352e-09,
         1.239306e-09, 8.617255e-07, 1.145328e-09, 5.099969e-05, 6.2997e-06,
         0.005423395,  5.819613e-06, 5.075846e-10, 4.023253e-11, 5.400974e-08,
         3.721155e-11, 2.715234e-09, 4.723346e-10, 2.88703e-07,  4.366576e-10,
         5.625581e-10, 9.238007e-11, 6.903831e-08, 8.538238e-11, 2.453394e-06,
         3.495053e-07, 0.0002609253, 3.230088e-07, 1.914178e-06, 9.109104e-08,
         0.0002036853, 8.422803e-08, 1.023849e-05, 1.457543e-06, 0.00108877,
         1.347044e-06, 1.470896e-06, 1.164465e-07, 0.0002613079, 1.076875e-07,
         0.009232323,  0.0004392725, 0.9823883,    0.000406177},
        {1.474574e-11, 2.344786e-10, 1.131731e-11, 4.240395e-08, 1.735562e-10,
         1.253755e-09, 1.809639e-10, 2.268383e-07, 1.895073e-11, 2.996912e-10,
         1.461259e-11, 5.419725e-08, 1.28169e-07,  1.132848e-06, 5.475758e-08,
         0.0002049125, 1.104398e-10, 1.255279e-09, 1.402892e-10, 2.270118e-07,
         1.097811e-09, 6.712201e-09, 1.395626e-09, 1.214391e-06, 2.215925e-10,
         1.602853e-09, 2.818156e-10, 2.899664e-07, 1.141392e-06, 6.062151e-06,
         1.450698e-06, 0.001096625,  1.888573e-11, 2.996262e-10, 2.399999e-11,
         5.418778e-08, 2.219774e-10, 1.602121e-09, 2.823077e-10, 2.898755e-07,
         4.336163e-11, 3.825815e-10, 5.517817e-11, 6.921506e-08, 1.640417e-07,
         1.446886e-06, 2.086533e-07, 0.0002617646, 4.291699e-08, 1.133639e-06,
         5.448886e-08, 0.0002049971, 6.866855e-07, 6.061518e-06, 8.736147e-07,
         0.001096625,  5.459765e-08, 1.448926e-06, 6.970829e-08, 0.0002620107,
         0.0002064844, 0.005479701,  0.0002625708, 0.9908996}};

    for(int i = 0; i < 64; i++) {
        for(int j = 0; j < 64; j++) {
            CHECK(P(i, j) == doctest::Approx(mg94P[i][j]));
        }
    }
}

/* Create Muse and Gaut codon model FST */
void mg94(VectorFst<StdArc>& mut_fst, const double& br_len) {
    Matrix64f P;
    mg94_p(P, br_len);

    // Add state 0 and make it the start state
    VectorFst<StdArc> mg94;
    mg94.AddState();
    mg94.SetStart(0);

    // Creat FST
    int r = 1;
    for(uint8_t i = 0; i < 64; i++) {
        for(uint8_t j = 0; j < 64; j++) {
            add_arc(mg94, 0, r, ((i & 48) >> 4) + 1, ((j & 48) >> 4) + 1,
                    P(i, j));
            add_arc(mg94, r, r + 1, ((i & 12) >> 2) + 1, ((j & 12) >> 2) + 1);
            add_arc(mg94, r + 1, 0, (i & 3) + 1, (j & 3) + 1);
            r = r + 2;
        }
    }

    // Set final state & optimize
    mg94.SetFinal(0, 0.0);

    VectorFst<StdArc> mg94_rmep;
    mg94_rmep = RmEpsilonFst<StdArc>(mg94);  // epsilon removal

    mut_fst = optimize(mg94_rmep);
}

TEST_CASE("[mut_models.cc] mg94") {
    VectorFst<StdArc> mut_fst;
    double branch_length = 0.0133;
    mg94(mut_fst, branch_length);

    CHECK(Verify(mut_fst));           // openfst built-in sanity check
    CHECK(mut_fst.NumArcs(0) == 16);  // 4x4 nuc to nuc arcs from start state
    CHECK(mut_fst.NumStates() == 241);
}

/* Create marginal Muse and Gaut codon model P matrix*/
void mg94_marginal_p(Eigen::Tensor<double, 3>& p, Matrix64f& P) {
    double marg;

    for(int cod = 0; cod < 64; cod++) {
        for(int pos = 0; pos < 3; pos++) {
            for(int nuc = 0; nuc < 4; nuc++) {
                marg = 0.0;
                switch(pos) {  // divide cases into each value of pos for speed
                               // up (reduce use of pow())
                case 0:
                    for(uint8_t i = 0; i < 64; i++) {
                        marg +=
                            (((i & (uint8_t)48) >> 4) == nuc ? P(cod, i) : 0.0);
                    }
                    break;
                case 1:
                    for(uint8_t i = 0; i < 64; i++) {
                        marg +=
                            (((i & (uint8_t)12) >> 2) == nuc ? P(cod, i) : 0.0);
                    }
                    break;
                case 2:
                    for(uint8_t i = 0; i < 64; i++) {
                        marg += (((i & (uint8_t)3)) == nuc ? P(cod, i) : 0.0);
                    }
                    break;
                }
                p(cod, pos, nuc) = marg;
            }
        }
    }
}

TEST_CASE("[mut_models.cc] mg94_marginal_p") {
    Eigen::Tensor<double, 3> p(64, 3, 4);
    Matrix64f P;
    double branch_length = 0.0133;
    mg94_p(P, branch_length);
    mg94_marginal_p(p, P);

    for(int cod = 0; cod < 64; cod++) {
        for(int pos = 0; pos < 3; pos++) {
            double val = 0;
            for(int nuc = 0; nuc < 4; nuc++) {
                val += p(cod, pos, nuc);
                CHECK(!(p(cod, pos, nuc) < 0));
            }
            CHECK(val ==
                  doctest::Approx(1));  // sum per each pos (all nuc) is 1
        }
    }
}

/* Create dna marginal Muse and Gaut codon model FST*/
void dna(VectorFst<StdArc>& mut_fst, const double& br_len) {
    Matrix64f P;
    mg94_p(P, br_len);

    // Add state 0 and make it the start state
    VectorFst<StdArc> dna;
    dna.AddState();
    dna.SetStart(0);

    Matrix4f dna_p = Matrix4f::Zero();

    for(uint8_t cod = 0; cod < 64; cod++) {  // for each codon
        double rowsum = 0.0;
        for(int pos = 0; pos < 3; pos++) {      // for each position in a codon
            for(int nuc = 0; nuc < 4; nuc++) {  // for each nucleotide (from)
                for(int nuc2 = 0; nuc2 < 4;
                    nuc2++) {                      // for each nucleotide (to)
                    for(int i = 0; i < 64; i++) {  // sum over all codons
                        dna_p(nuc, nuc2) +=
                            (((i & (uint8_t)(48 / pow(4, pos))) >>
                              (4 - 2 * pos)) == nuc2
                                 ? ((cod & (uint8_t)(48 / pow(4, pos))) >>
                                    (4 - 2 * pos)) == nuc
                                       ? P(cod, i)
                                       : 0.0
                                 : 0.0);
                    }
                }
            }
        }
    }

    for(int i = 0; i < 4; i++) {
        dna_p.row(i) /= dna_p.row(i).sum();
        for(int j = 0; j < 4; j++) {
            add_arc(dna, 0, 0, i + 1, j + 1, dna_p(i, j));
        }
    }

    // Set final state & optimize
    dna.SetFinal(0, 0.0);
    mut_fst = optimize(dna);
}

TEST_CASE("[mut_models.cc] dna") {
    VectorFst<StdArc> dna_fst;
    double branch_length = 0.0133;
    dna(dna_fst, branch_length);

    CHECK(Verify(dna_fst));           // openfst built-in sanity check
    CHECK(dna_fst.NumArcs(0) == 16);  // all 4x4 nuc transitions
    CHECK(dna_fst.NumStates() ==
          1);  // all transitions are indp, only 1 state needed
}

/* Create FST that maps nucleotide to AA position */
void nuc2pos(VectorFst<StdArc>& n2p) {
    // Add state 0 and make it the start state
    n2p.AddState();
    n2p.SetStart(0);

    int state = 1;  // variable to keep track of states
    int cod = 101;  // variable to keep track of codons

    for(int i = 1; i < 5; i++) {
        for(int j = 1; j < 5; j++) {
            for(int h = 1; h < 5; h++) {
                add_arc(n2p, 0, state, i, cod);
                add_arc(n2p, state, state + 1, j, cod + 1);
                add_arc(n2p, state + 1, 0, h, cod + 2);
                state += 2;
                cod += 3;
            }
        }
    }

    n2p.SetFinal(0, 0.0);
}

TEST_CASE("[mut_models.cc] nuc2pos") {
    VectorFst<StdArc> n2p_fst;
    nuc2pos(n2p_fst);

    CHECK(Verify(n2p_fst));             // openfst built-in sanity check
    CHECK(n2p_fst.NumArcs(0) == 64);    // one position for every aminoacid (AA)
    CHECK(n2p_fst.NumStates() == 129);  // 64 AA with 2 states each + init state
}

/* Create affine gap indel model FST*/
void indel(VectorFst<StdArc>& indel_model, string model) {
    double deletion = 0.001, insertion = 0.001;
    double deletion_ext = 1.0 - 1.0 / 6.0, insertion_ext = 1.0 - 1.0 / 6.0;
    double nuc_freqs[2][4] = {{0.308, 0.185, 0.199, 0.308},
                              {0.2676350, 0.2357727, 0.2539630, 0.2426323}};
    int m = model.compare("ecm") == 0 ? 1 : 0;

    VectorFst<StdArc> indel_fst;

    // Add state 0 and make it the start state
    indel_fst.AddState();
    indel_fst.SetStart(0);

    // Insertion
    add_arc(indel_fst, 0, 1, 0, 0, insertion);  // 0 as ilabel/olabel is <eps>
    add_arc(indel_fst, 0, 3, 0, 0, 1.0 - insertion);

    for(int i = 0; i < 4; i++) {
        add_arc(indel_fst, 1, 2, 0, i + 1, nuc_freqs[m][i]);
    }

    add_arc(indel_fst, 1, 2, 0, 5);  // 5 as ilabel/olabel is N
    add_arc(indel_fst, 2, 1, 0, 0, insertion_ext);
    add_arc(indel_fst, 2, 3, 0, 0, 1.0 - insertion_ext);

    // Deletion
    add_arc(indel_fst, 3, 4, 0, 0, deletion);
    add_arc(indel_fst, 3, 6, 0, 0, 1.0 - deletion);

    for(int i = 0; i < 4; i++) {
        add_arc(indel_fst, 4, 5, i + 1);
    }

    add_arc(indel_fst, 4, 7);

    add_arc(indel_fst, 5, 4, 0, 0, deletion_ext);
    add_arc(indel_fst, 5, 6, 0, 0, 1.0 - deletion_ext);

    // Matches
    for(int i = 0; i < 4; i++) {
        add_arc(indel_fst, 6, 0, i + 1, i + 1);
        add_arc(indel_fst, 6, 0, i + 1, 5);
    }

    add_arc(indel_fst, 6, 7);

    // Set final state & optimize
    indel_fst.SetFinal(7, 0.0);

    VectorFst<StdArc> indel_rmep;
    indel_rmep = RmEpsilonFst<StdArc>(indel_fst);  // epsilon removal

    indel_model = optimize(indel_rmep);
}

TEST_CASE("[mut_models.cc] indel") {
    VectorFst<StdArc> indel_model;
    string model = "m-coati";

    indel(indel_model, model);

    CHECK(Verify(indel_model));  // openfst built-in sanity check
    CHECK(indel_model.NumStates() == 4);
    CHECK(indel_model.NumArcs(0) == 17);  // number of outcoming arcs
    CHECK(indel_model.NumArcs(1) == 17);
    CHECK(indel_model.NumArcs(2) == 12);
    CHECK(indel_model.NumArcs(3) == 1);
}

/* ECM unrestricted exchangeabilities, Kosiol et al. 2007, supplemental data
   [61x61] in A,C,G,T order */
constexpr double s[64][64] = {
    {0,        0.413957, 12.931524, 2.075154, 1.523251, 0.089476, 0.199589,
     0.878163, 5.815294, 0.334224,  1.868194, 1.29386,  0.667397, 0.02302,
     0.275355, 0.221536, 3.215817,  0.143479, 0.285384, 0.899262, 1.042457,
     0.012394, 0.00041,  0.247195,  3.06551,  0.296358, 0.011032, 1.769879,
     0.43362,  0.002143, 3.5E-05,   0.060922, 2.258321, 0.053168, 0.159248,
     0.604859, 0.923644, 0.0055,    0.000482, 0.216244, 0.713961, 0.002863,
     0.001158, 0.04873,  0.708204,  0.00193,  0.000193, 0.20148,  0,
     0.042942, 0,        0.467136,  1.496628, 0.020909, 0.000459, 0.340991,
     0,        0.004316, 0.051005,  0.099519, 0.61266,  0.005996, 0.004963,
     0.148268},
    {0.413957, 0,        1.038682, 17.634677, 0.259909, 1.346385, 0.822133,
     0.296066, 0.273855, 4.127466, 0.600415,  0.586685, 0.020837, 0.175491,
     0.21917,  0.025405, 0.377447, 2.203539,  0.985145, 0.46097,  0.074161,
     0.532092, 0.095418, 0.000959, 0.016636,  0.863191, 0.065212, 0.00318,
     0.01454,  0.18788,  0.034916, 0.00033,   0.193544, 2.729647, 0.372719,
     0.371685, 0.041435, 0.565968, 0.068501,  0.001329, 0.2804,   1.110726,
     0.293884, 0.005905, 0.002362, 0.215492,  0.013582, 0.000295, 0,
     0.487814, 0,        0.046586, 0.187826,  1.118208, 0.725836, 0.00339,
     0,        0.325422, 0.053908, 0.000932,  0.00284,  0.143614, 0.060699,
     9.3E-05},
    {12.931524, 1.038682, 0,        0.524647, 0.256174, 0.623366, 1.144639,
     0.291009,  1.197614, 0.928876, 7.316623, 0.389004, 0.056267, 0.116405,
     0.497593,  0.04144,  0.461383, 0.571469, 2.285052, 0.324525, 0.012002,
     0.303613,  0.561523, 0.220816, 0.034519, 2.721043, 3.8322,   0.560831,
     0.000679,  0.022384, 0.133032, 0.039362, 0.308851, 0.426684, 1.563846,
     0.188097,  0.004382, 0.373948, 0.759132, 0.268662, 0.00176,  0.176224,
     0.744,     0.021649, 0.000524, 0.056145, 0.311885, 0.072138, 0,
     0.140864,  0,        0.072867, 0.004438, 0.25165,  0.768607, 0.156468,
     0,         0.034794, 0.105226, 0.011489, 6.2E-05,  0.043609, 0.33378,
     0.013122},
    {2.075154, 17.634677, 0.524647, 0,        1.243753, 0.067554, 0.224397,
     2.057449, 0.93684,   0.643789, 0.454347, 4.971507, 0.256283, 0.014351,
     0.208924, 0.239388,  1.759732, 0.188587, 0.206851, 2.691226, 0.096104,
     0.000192, 0.002705,  0.78734,  0.009981, 6.8E-05,  0.000981, 0.682254,
     0.019568, 0,         0.00014,  0.25938,  0.975582, 0.167041, 0.149578,
     3.529593, 0.08462,   4.5E-05,  0.003771, 0.64316,  0.909861, 0.001122,
     0.194964, 1.322234,  0.008844, 0,        0.000628, 0.318595, 0,
     0.042762, 0,         0.74787,  0.872084, 0.000929, 0.040706, 1.773102,
     0,        0.000135,  0.074859, 0.360038, 0.271628, 9.4E-05,  0.077878,
     0.263567},
    {1.523251,  0.259909, 0.256174, 1.243753, 0,        8.373639, 19.459275,
     31.915858, 1.316696, 0.441084, 0.511968, 2.397415, 2.260424, 0.048902,
     0.853779,  0.296014, 1.660885, 0.02192,  0.001302, 0.082373, 1.018005,
     0.02623,   0.015001, 0.368538, 0.360575, 0,        0,        0.000589,
     0.94456,   0.000119, 7E-05,    0.000857, 1.164866, 0.003354, 0.000838,
     0.092988,  2.735831, 0.019665, 0.049848, 0.324162, 0.46677,  0,
     0.00061,   0.000534, 3.879355, 0.002515, 0.011433, 0.05625,  0,
     0.053363,  0,        0.208041, 5.709933, 0.409721, 0.349846, 2.018483,
     0,         0.061227, 0.060421, 0.415775, 0.871568, 0.010539, 0.011134,
     0.079948},
    {0.089476,  1.346385, 0.623366, 0.067554, 8.373639, 0,        28.470047,
     13.991583, 0.021698, 4.699375, 0.140701, 0.275865, 0.016701, 1.066285,
     0.433759,  0.034573, 0.066519, 0.969387, 0.617464, 0.001125, 0.027138,
     0.870967,  0.527094, 0.044125, 0.002079, 1.481721, 0.017774, 0.00106,
     0.000679,  0.89749,  0.073657, 0.000396, 0.109664, 1.013424, 0.360196,
     0.000559,  0.077341, 2.159328, 0.728891, 0.120121, 0.000112, 0.518903,
     0.000447,  0.000112, 0.001957, 2.862216, 0.089643, 0.00302,  0,
     0.393545,  0,        0.000116, 0.150107, 3.82958,  2.395833, 0.196983,
     0,         0.806071, 0.037822, 0.000776, 6.2E-05,  0.371541, 0.00299,
     9.3E-05},
    {0.199589,  0.822133, 1.144639, 0.224397, 19.459275, 28.470047, 0,
     12.116657, 0.087905, 2.871848, 0.765495, 0.563566,  0.154441,  0.311759,
     1.376727,  0.090674, 0.002854, 0.10308,  1.766961,  0.076938,  0.083475,
     0.435243,  0.962295, 0.079712, 0.002911, 0.014243,  2.985421,  0.004593,
     0.000408,  0.000595, 0.733202, 0.000264, 0.003464,  0.095207,  1.447392,
     0.042595,  0.318574, 0.498504, 2.866325, 0.108501,  0.000187,  0.006459,
     0.716441,  0.000374, 0.002528, 0.010298, 3.0925,    0.004868,  0,
     0.177757,  0,        0.042119, 0.516594, 1.562591,  4.919174,  0.361164,
     0,         0.173298, 0.362681, 0.053874, 6.2E-05,   0.036489,  0.586818,
     0.008032},
    {0.878163, 0.296066, 0.291009, 2.057449, 31.915858, 13.991583, 12.116657,
     0,        0.432918, 0.622868, 0.309656, 4.943439,  0.351882,  0.075878,
     0.419831, 1.266654, 0.374419, 0.000272, 0.029088,  0.898794,  0.345545,
     0.053805, 0.011476, 1.050363, 0.00104,  0,         0,         0.344601,
     0.004348, 6E-05,    7E-05,    0.831215, 0.251423,  0.000158,  0.033581,
     0.928969, 0.381796, 0.038559, 0.023862, 2.359362,  0.002449,  0,
     0.000553, 0.380374, 0.009008, 0.001027, 0.003635,  2.898791,  0,
     0.000599, 0,        0.599932, 2.297807, 0.487317,  0.199748,  4.693944,
     0,        0.001483, 0.035939, 1.089585, 0.012473,  0.000141,  0.015652,
     0.497293},
    {5.815294, 0.273855, 1.197614, 0.93684,   1.316696, 0.021698, 0.087905,
     0.432918, 0,        0.403913, 43.916187, 1.644621, 0.780008, 0.012331,
     0.305714, 0.116039, 1.24214,  0.025544,  0.000289, 0.411115, 0.493508,
     0.000384, 0,        0.011511, 31.949764, 1.113671, 2.418859, 17.450524,
     0.409432, 6E-05,    0,        0.004747,  0.668173, 0.000718, 0.00041,
     0.030474, 0.461729, 0,        0,         0.013852, 0.938439, 0.000821,
     0.069567, 0.037657, 0.560642, 0.000205,  0.000103, 0.032116, 0,
     0.060909, 0,        0.424321, 1.094736,  0.002044, 0.000115, 0.04789,
     0,        0.030883, 0.145245, 0.144388,  0.423774, 0.0126,   0.001718,
     0.140516},
    {0.334224, 4.127466, 0.928876, 0.643789, 0.441084,  4.699375, 2.871848,
     0.622868, 0.403913, 0,        1.28699,  28.579806, 0.021539, 0.238533,
     0.304581, 0.03114,  0.232701, 1.282522, 1.418383,  0.00506,  0.005195,
     1.337629, 0.104681, 0.001247, 0.354545, 1.320875,  1.360141, 0.387941,
     0.002718, 0.300513, 0.0173,   0.00033,  0.308372,  2.005334, 0.822643,
     0.012481, 0.063353, 2.214735, 0.200205, 0.005328,  0.298738, 2.392606,
     1.149846, 0.326035, 0.000657, 0.381287, 0.00416,   0.000219, 0,
     0.34689,  0,        0.000116, 1.049877, 10.892976, 9.818281, 0.094762,
     0,        1.372357, 0.167138, 0.248099, 0.000432,  0.166706, 0.00579,
     9.3E-05},
    {1.868194, 0.600415,  7.316623, 0.454347,  0.511968, 0.140701,  0.765495,
     0.309656, 43.916187, 1.28699,  0,         1.477696, 0.317466,  0.062369,
     0.90581,  0.093542,  0.003786, 0.169022,  1.148387, 0.140943,  0.009225,
     0.033244, 0.273876,  0.060432, 15.287419, 4.087042, 18.531553, 6.798629,
     0.000951, 0.000952,  0.04032,  0.00956,   0.00442,  0.008986,  1.19579,
     0.015763, 0.00442,   0.001768, 0.187832,  0.045374, 0.165587,  0.012227,
     1.558784, 0.047437,  0.002062, 0.002062,  0.314379, 0.051709,  0,
     0.26951,  0,         0.200499, 0.009261,  0.028715, 0.514392,  0.063994,
     0,        0.070533,  0.496706, 0.122186,  0.000247, 0.056771,  0.506841,
     0.08331},
    {1.29386,  0.586685, 0.389004,  4.971507, 2.397415, 0.275865, 0.563566,
     4.943439, 1.644621, 28.579806, 1.477696, 0,        0.269862, 0.018727,
     0.306375, 0.359183, 1.177718,  0.000453, 0.083261, 1.293228, 0.021048,
     0.000288, 0.001066, 1.035015,  0.530881, 0.018146, 0.025006, 0.772349,
     0.009512, 6E-05,    0.000105,  0.322807, 0.832592, 0.000388, 0.129098,
     1.702817, 0.126382, 0.000485,  0.006402, 2.323091, 1.179053, 0.054025,
     0.684968, 2.382451, 0.006305,  9.7E-05,  0.001358, 0.501456, 0,
     0.00018,  0,        0.50647,   5.964323, 0.083636, 0.681575, 12.169045,
     0,        0.181794, 0.139046,  2.007768, 0.010929, 4.7E-05,  0.009289,
     0.225554},
    {0.667397, 0.020837,  0.056267,  0.256283, 2.260424, 0.016701, 0.154441,
     0.351882, 0.780008,  0.021539,  0.317466, 0.269862, 0,        5.784672,
     2.230691, 16.415611, 0.390087,  0.000272, 4.8E-05,  0.040109, 0.480521,
     0,        0,         0.002014,  0.121855, 0,        0,        0,
     4.40061,  0.136148,  0.048882,  1.260239, 0.361403, 0,        7.8E-05,
     0.001171, 0.983926,  0,         7.8E-05,  0.001795, 0.194319, 0,
     7.8E-05,  0.000156,  11.271062, 0.154207, 0.911193, 2.577578, 0,
     0.025454, 0,         0.573013,  0.403435, 0,        0,        0.000424,
     0,        0.012138,  0.170041,  0.069555, 5.159075, 0.064968, 1.065537,
     1.075187},
    {0.02302,  0.175491, 0.116405, 0.014351, 0.048902, 1.066285, 0.311759,
     0.075878, 0.012331, 0.238533, 0.062369, 0.018727, 5.784672, 0,
     1.428293, 13.60931, 0.010543, 0.127899, 0.105885, 0.000469, 0.000448,
     0.270274, 0.021723, 9.6E-05,  0.001248, 0.238839, 0.003064, 0.000118,
     0.203017, 3.765697, 2.469249, 0.39019,  0.009174, 0.032447, 0.031984,
     4.2E-05,  0.000589, 0.536362, 0.004629, 0.000253, 8.4E-05,  0.055425,
     0.000295, 0,        0.313779, 7.487816, 3.487342, 0.575921, 0,
     0.255975, 0,        0.000116, 9.6E-05,  0.115975, 0.000344, 0,
     0,        0.309643, 0.136849, 0.000311, 0.042112, 1.006045, 0.478019,
     0.056038},
    {0.275355, 0.21917,  0.497593, 0.208924, 0.853779, 0.433759, 1.376727,
     0.419831, 0.305714, 0.304581, 0.90581,  0.306375, 2.230691, 1.428293,
     0,        1.155098, 0.443617, 0.163406, 0.834976, 0.323588, 0.042006,
     0.008455, 0.193459, 0.081631, 0.015596, 0.029786, 0.40868,  0.028736,
     1.635281, 1.434579, 2.236557, 1.22002,  0.033994, 0.011379, 0.262465,
     0.059065, 0.517896, 0.169264, 0.837302, 0.451134, 0.037724, 0.018603,
     0.410199, 0.027479, 0.569076, 0.350473, 1.399673, 0.430124, 0,
     0.300354, 0,        0.294368, 0.246094, 0.042282, 0.527005, 0.093491,
     0,        0.324613, 0.321642, 0.298091, 1.418466, 0.800602, 3.062807,
     0.67937},
    {0.221536, 0.025405, 0.04144,  0.239388, 0.296014, 0.034573,  0.090674,
     1.266654, 0.116039, 0.03114,  0.093542, 0.359183, 16.415611, 13.60931,
     1.155098, 0,        0.078926, 0,        0.003859, 0.193328,  0.002597,
     9.6E-05,  0.000246, 0.292855, 0.000416, 0,        0,         0.076434,
     1.328581, 0.18401,  0.089308, 3.330793, 0.038612, 0,         0.003312,
     0.066966, 0.002262, 4E-05,    8.1E-05,  0.536332, 0.000283,  0.000283,
     8.1E-05,  0.069995, 2.581654, 0.458622, 0.953353, 6.546163,  0,
     0.00018,  0,        0.352731, 0.000386, 0,        0,         0.172403,
     0,        0.000405, 0.078312, 0.431456, 2.130663, 0.059956,  1.292935,
     1.119411},
    {3.215817, 0.377447, 0.461383, 1.759732, 1.660885,  0.066519, 0.002854,
     0.374419, 1.24214,  0.232701, 0.003786, 1.177718,  0.390087, 0.010543,
     0.443617, 0.078926, 0,        0.751904, 17.923045, 2.473439, 1.05204,
     0.074846, 0.063366, 0.435109, 4.72584,  0.14894,   0.299978, 1.164262,
     1.205738, 0.071794, 0.033372, 0.529045, 3.081614,  0.121389, 0.343314,
     0.706782, 1.274118, 0.018814, 0.001165, 0.27295,   0.551493, 0.016193,
     0.003029, 0.042812, 0.606945, 0.006757, 0.000466,  0.150804, 0,
     0.079236, 0,        0.486281, 2.066955, 0.080383,  0.002179, 0.508308,
     0,        0.032232, 0.055163, 0.163174, 0.576476,  0.016628, 0.007508,
     0.12632},
    {0.143479, 2.203539, 0.571469, 0.188587, 0.02192,  0.969387,  0.10308,
     0.000272, 0.025544, 1.282522, 0.169022, 0.000453, 0.000272,  0.127899,
     0.163406, 0,        0.751904, 0,        2.503268, 38.685701, 0.089835,
     0.730306, 0.364129, 0.061583, 0.526904, 2.478358, 2.20843,   0.277265,
     0.059927, 0.617694, 0.330036, 0.058614, 0.106069, 0.975727,  0.566034,
     0.046739, 0.004982, 0.696016, 0.190037, 9.1E-05,  0.004982,  0.566759,
     0.053714, 9.1E-05,  0.002808, 0.491034, 0.044112, 9.1E-05,   0,
     3.193996, 0,        0.265766, 0.01447,  1.144692, 0.114551,  0.000593,
     0,        0.483076, 0.369273, 0.000155, 0.000123, 0.761771,  0.002163,
     0.000467},
    {0.285384, 0.985145, 2.285052,  0.206851, 0.001302, 0.617464, 1.766961,
     0.029088, 0.000289, 1.418383,  1.148387, 0.083261, 4.8E-05,  0.105885,
     0.834976, 0.003859, 17.923045, 2.503268, 0,        1.106179, 0.184327,
     0.529594, 0.715716, 0.107434,  0.61732,  2.029914, 4.718199, 0.340811,
     0.105449, 0.422671, 0.703795,  0.079119, 0.536567, 0.928319, 3.036767,
     0.130873, 0.002219, 0.634927,  1.544626, 0.040907, 0.000289, 0.336277,
     0.634203, 0.003377, 0.000145,  0.06932,  0.475496, 0.0096,   0,
     0.332396, 0,        0.09207,   0.002122, 0.423382, 1.519211, 0.049246,
     0,        0.105597, 0.24749,   0.05791,  0,        0.107218, 0.250748,
     0.00976},
    {0.899262, 0.46097,  0.324525, 2.691226,  0.082373, 0.001125, 0.076938,
     0.898794, 0.411115, 0.00506,  0.140943,  1.293228, 0.040109, 0.000469,
     0.323588, 0.193328, 2.473439, 38.685701, 1.106179, 0,        0.286252,
     0.091276, 0.054021, 0.775254, 1.35386,   0.170088, 0.316372, 2.460976,
     0.438648, 0.057328, 0.044742, 0.664866,  0.452442, 0.100928, 0.159217,
     0.746792, 0.039265, 0.000562, 0.080124,  0.42058,  0.097554, 0.000843,
     0.08406,  0.388156, 0.019586, 0.000375,  0.032237, 0.338207, 0,
     0.340541, 0,        3.088481, 0.128111,  0.002137, 0.07373,  1.253945,
     0,        0.001483, 0.195073, 0.634065,  0.026551, 0.001312, 0.040275,
     0.638696},
    {1.042457,  0.074161,  0.012002,  0.096104, 1.018005, 0.027138, 0.083475,
     0.345545,  0.493508,  0.005195,  0.009225, 0.021048, 0.480521, 0.000448,
     0.042006,  0.002597,  1.05204,   0.089835, 0.184327, 0.286252, 0,
     15.426733, 15.127582, 40.922701, 0.626603, 0.001702, 0.0103,   0.063413,
     1.07379,   0.016609,  0.040917,  0.065669, 0.890822, 0.003672, 0.001791,
     0.147873,  1.236457,  0.013077,  0.017824, 0.346978, 0.556204, 9E-05,
     0.001254,  0.002508,  0.732111,  0.000537, 0.000717, 0.009225, 0,
     0.025873,  0,         0.03214,   3.121656, 0.138742, 0.151589, 0.487542,
     0,         0.01025,   0.070308,  0.002795, 0.261069, 0.006558, 0.005535,
     0.025217},
    {0.012394, 0.532092, 0.303613,  0.000192, 0.02623,  0.870967, 0.435243,
     0.053805, 0.000384, 1.337629,  0.033244, 0.000288, 0,        0.270274,
     0.008455, 9.6E-05,  0.074846,  0.730306, 0.529594, 0.091276, 15.426733,
     0,        33.45378, 23.496083, 0.154017, 0.563799, 0.897101, 0.124232,
     0.040087, 0.648769, 0.149771,  0.026571, 0.105112, 0.976175, 0.294294,
     0.000769, 0.069754, 1.394892,  0.417565, 0.073021, 0.000384, 0.636916,
     0.001441, 0.000288, 0.000192,  0.76009,  0.001537, 0.000192, 0,
     0.310416, 0,        0.000116,  0.072352, 2.487136, 0.43252,  0.101204,
     0,        0.215779, 0.032564,  0,        0,        0.285635, 0.000382,
     0.00014},
    {0.00041,  0.095418, 0.561523,  0.002705, 0.015001, 0.527094, 0.962295,
     0.011476, 0,        0.104681,  0.273876, 0.001066, 0,        0.021723,
     0.193459, 0.000246, 0.063366,  0.364129, 0.715716, 0.054021, 15.127582,
     33.45378, 0,        10.291826, 0.091073, 0.798346, 1.164525, 0.044676,
     0.016442, 0.118229, 0.495176,  0.007978, 0.00541,  0.644235, 0.99033,
     0.03156,  0.087384, 0.971148,  1.950083, 0.013526, 0.000164, 0.395771,
     0.703092, 0.001312, 8.2E-05,   0.031642, 0.602428, 0.000246, 0,
     0.037372, 0,        0.004177,  0.064924, 0.371063, 2.075226, 0.021444,
     0,        0.004585, 0.215788,  0.000155, 0,        0.079161, 0.112999,
     0.004063},
    {0.247195,  0.000959,  0.220816, 0.78734,  0.368538, 0.044125, 0.079712,
     1.050363,  0.011511,  0.001247, 0.060432, 1.035015, 0.002014, 9.6E-05,
     0.081631,  0.292855,  0.435109, 0.061583, 0.107434, 0.775254, 40.922701,
     23.496083, 10.291826, 0,        0.352807, 0.002398, 0.00988,  0.500433,
     0.181411,  0.036254,  0.014388, 0.822643, 0.184749, 9.6E-05,  0.034437,
     0.661776,  0.335924,  0.022062, 0.014101, 1.272426, 0.003549, 9.6E-05,
     0.001918,  0.418802,  0.001151, 0.000192, 0.000384, 0.708395, 0,
     0.000479,  0,         0.337879, 0.544474, 0.196358, 0.078776, 2.846677,
     0,         0.00027,   0.061833, 0.239715, 0.001358, 0.000141, 0.003499,
     0.324368},
    {3.06551,  0.016636,  0.034519, 0.009981,  0.360575,  0.002079,  0.002911,
     0.00104,  31.949764, 0.354545, 15.287419, 0.530881,  0.121855,  0.001248,
     0.015596, 0.000416,  4.72584,  0.526904,  0.61732,   1.35386,   0.626603,
     0.154017, 0.091073,  0.352807, 0,         12.677657, 30.574631, 39.595443,
     0.918198, 0.112395,  0.041969, 0.424607,  0.440217,  0.009981,  0.00104,
     0.00707,  0.286547,  0.000416, 0.000624,  0.001871,  0.247245,  0.008942,
     0.143481, 0.042005,  0.255147, 0.001871,  0.000832,  0.003743,  0,
     0.051686, 0,         0.043917, 0.557015,  0.004089,  0.003211,  0.006103,
     0,        0.16615,   0.146501, 0.232728,  0.136647,  0.01602,   0.001527,
     0.030121},
    {0.296358, 0.863191, 2.721043, 6.8E-05,   0,        1.481721,  0.014243,
     0,        1.113671, 1.320875, 4.087042,  0.018146, 0,         0.238839,
     0.029786, 0,        0.14894,  2.478358,  2.029914, 0.170088,  0.001702,
     0.563799, 0.798346, 0.002398, 12.677657, 0,        35.563093, 27.244097,
     0.005436, 0.544828, 0.563956, 0.016022,  0.025678, 0.915505,  0.528692,
     0,        6.8E-05,  1.610248, 0.083744,  0,        0.000753,  0.676049,
     0.097165, 0.004656, 0,        0.648523,  0.003287, 0,         0,
     0.604541, 0,        0.000116, 0,         0.685812, 0.032106,  0,
     0,        0.516927, 0.176476, 0.012886,  0,        0.200806,  6.4E-05,
     0},
    {0.011032, 0.065212, 3.8322,   0.000981,  0,         0.017774, 2.985421,
     0,        2.418859, 1.360141, 18.531553, 0.025006,  0,        0.003064,
     0.40868,  0,        0.299978, 2.20843,   4.718199,  0.316372, 0.0103,
     0.897101, 1.164525, 0.00988,  30.574631, 35.563093, 0,        12.868484,
     0.040902, 0.640495, 0.794366, 0.039428,  0.000858,  0.150527, 2.171984,
     0.000368, 0.000123, 0.020471, 3.409178,  0,         0.010419, 0.703728,
     0.590833, 0.011768, 0,        0.005026,  0.701399,  0,        0,
     0.081931, 0,        0.003713, 0,         0.004832,  1.903571, 8.5E-05,
     0,        0.183143, 1.13591,  0.023909,  0,         0.027355, 0.127696,
     0.000934},
    {1.769879, 0.00318,   0.560831, 0.682254,  0.000589,  0.00106,   0.004593,
     0.344601, 17.450524, 0.387941, 6.798629,  0.772349,  0,         0.000118,
     0.028736, 0.076434,  1.164262, 0.277265,  0.340811,  2.460976,  0.063413,
     0.124232, 0.044676,  0.500433, 39.595443, 27.244097, 12.868484, 0,
     0.134394, 0.068758,  0.015019, 0.663877,  0.034978,  0.000236,  0.007891,
     0.162525, 0.000589,  0.000236, 0.001531,  0.324227,  0.01531,   0.021435,
     0.043222, 0.241197,  0.000353, 0.000589,  0.001413,  0.336828,  0,
     0.001377, 0,         0.534375, 0.000579,  0.001208,  0.00172,   0.660622,
     0,        0.077815,  0.019696, 0.726908,  0.000741,  9.4E-05,   0.003054,
     0.143832},
    {0.43362,  0.01454,  0.000679, 0.019568,  0.94456,   0.000679, 0.000408,
     0.004348, 0.409432, 0.002718, 0.000951,  0.009512,  4.40061,  0.203017,
     1.635281, 1.328581, 1.205738, 0.059927,  0.105449,  0.438648, 1.07379,
     0.040087, 0.016442, 0.181411, 0.918198,  0.005436,  0.040902, 0.134394,
     0,        8.808275, 8.319767, 21.437257, 0.313495,  0.001359, 0.000136,
     0.012366, 0.741135, 0.000136, 0,         0.004077,  0.165784, 0,
     0,        0.000272, 2.047159, 0.043756,  0.173122,  0.555104, 0,
     0.011978, 0,        0.01665,  0.496046,  0.000186,  0.000115, 0.000678,
     0,        0.021578, 0.017106, 0.020649,  27.219895, 0.198558, 16.560966,
     1.036474},
    {0.002143, 0.18788,  0.022384,  0,         0.000119, 0.89749,  0.000595,
     6E-05,    6E-05,    0.300513,  0.000952,  6E-05,    0.136148, 3.765697,
     1.434579, 0.18401,  0.071794,  0.617694,  0.422671, 0.057328, 0.016609,
     0.648769, 0.118229, 0.036254,  0.112395,  0.544828, 0.640495, 0.068758,
     8.808275, 0,        15.484088, 15.874441, 0.002679, 0.135255, 0.010061,
     0,        0.000357, 1.191514,  0.000893,  0.000417, 6E-05,    0.240505,
     0.000119, 6E-05,    0.03173,   2.720153,  0.477439, 0.072866, 0,
     0.622089, 0,        0.000116,  9.6E-05,   0.342813, 0.000344, 8.5E-05,
     0,        0.674176, 0.113701,  0.000466,  1.373823, 2.30611,  5.651603,
     0.083684},
    {3.5E-05,  0.034916,  0.133032, 0.00014,  7E-05,    0.073657, 0.733202,
     7E-05,    0,         0.0173,   0.04032,  0.000105, 0.048882, 2.469249,
     2.236557, 0.089308,  0.033372, 0.330036, 0.703795, 0.044742, 0.040917,
     0.149771, 0.495176,  0.014388, 0.041969, 0.563956, 0.794366, 0.015019,
     8.319767, 15.484088, 0,        4.802017, 0.00014,  0.015686, 0.1763,
     0.000491, 0.000351,  0.103766, 1.524024, 0.000772, 7E-05,    0.047268,
     0.185038, 0.000175,  0.020529, 1.08517,  2.26249,  0.01158,  0,
     0.308859, 0,         0.004815, 0,        0.001022, 0.266943, 0,
     0,        0.265948,  0.504866, 0.002639, 1.045943, 1.341144, 12.455337,
     0.07355},
    {0.060922,  0.00033,   0.039362, 0.25938,  0.000857,  0.000396, 0.000264,
     0.831215,  0.004747,  0.00033,  0.00956,  0.322807,  1.260239, 0.39019,
     1.22002,   3.330793,  0.529045, 0.058614, 0.079119,  0.664866, 0.065669,
     0.026571,  0.007978,  0.822643, 0.424607, 0.016022,  0.039428, 0.663877,
     21.437257, 15.874441, 4.802017, 0,        0.03956,   6.6E-05,  0.00422,
     0.129492,  0.002374,  0.000132, 6.6E-05,  0.879741,  0.00033,  0,
     6.6E-05,   0.169777,  0.509595, 0.105361, 0.091844,  1.89715,  0,
     0.000299,  0,         0.485469, 0.000289, 0.000186,  0,        0.277929,
     0,         0.000674,  0.010122, 0.54324,  12.035723, 0.207692, 11.161511,
     2.016257},
    {2.258321, 0.193544, 0.308851, 0.975582, 1.164866, 0.109664, 0.003464,
     0.251423, 0.668173, 0.308372, 0.00442,  0.832592, 0.361403, 0.009174,
     0.033994, 0.038612, 3.081614, 0.106069, 0.536567, 0.452442, 0.890822,
     0.105112, 0.00541,  0.184749, 0.440217, 0.025678, 0.000858, 0.034978,
     0.313495, 0.002679, 0.00014,  0.03956,  0,        0.892903, 12.984714,
     2.738552, 0.905488, 0.140546, 0.227527, 0.502355, 0.639125, 0.030585,
     0.136937, 0.089148, 0.469281, 0.042565, 0.055025, 0.276499, 0,
     0.043721, 0,        0.257122, 1.265487, 0.08568,  0.002179, 0.330481,
     0,        0.003641, 0.009966, 0.028878, 0.287373, 0.006464, 0.005472,
     0.084945},
    {0.053168,  2.729647, 0.426684, 0.167041, 0.003354, 1.013424, 0.095207,
     0.000158,  0.000718, 2.005334, 0.008986, 0.000388, 0,        0.032447,
     0.011379,  0,        0.121389, 0.975727, 0.928319, 0.100928, 0.003672,
     0.976175,  0.644235, 9.6E-05,  0.009981, 0.915505, 0.150527, 0.000236,
     0.001359,  0.135255, 0.015686, 6.6E-05,  0.892903, 0,        3.195698,
     14.214694, 0.027912, 0.802516, 0.702594, 0.018617, 0.067431, 1.228004,
     0.403521,  0.03512,  0.006776, 0.119062, 0.04128,  0.004101, 0,
     0.184704,  0,        0.010037, 0.007428, 1.023142, 0.670108, 0.000254,
     0,         0.071612, 0.066384, 0,        6.2E-05,  0.055366, 0.006808,
     0},
    {0.159248, 0.372719, 1.563846, 0.149578, 0.000838,  0.360196, 1.447392,
     0.033581, 0.00041,  0.822643, 1.19579,  0.129098,  7.8E-05,  0.031984,
     0.262465, 0.003312, 0.343314, 0.566034, 3.036767,  0.159217, 0.001791,
     0.294294, 0.99033,  0.034437, 0.00104,  0.528692,  2.171984, 0.007891,
     0.000136, 0.010061, 0.1763,   0.00422,  12.984714, 3.195698, 0,
     1.091224, 0.157605, 0.938586, 1.251589, 0.106257,  0.053748, 0.239725,
     0.968146, 0.030223, 0.053017, 0.245019, 0.362328,  0.049842, 0,
     0.136432, 0,        0.042815, 0.001061, 0.283432,  1.029128, 0.04238,
     0,        0.013216, 0.137634, 0.014439, 0,         0.034428, 0.159955,
     0.010974},
    {0.604859, 0.371685, 0.188097, 3.529593, 0.092988, 0.000559,  0.042595,
     0.928969, 0.030474, 0.012481, 0.015763, 1.702817, 0.001171,  4.2E-05,
     0.059065, 0.066966, 0.706782, 0.046739, 0.130873, 0.746792,  0.147873,
     0.000769, 0.03156,  0.661776, 0.00707,  0,        0.000368,  0.162525,
     0.012366, 0,        0.000491, 0.129492, 2.738552, 14.214694, 1.091224,
     0,        0.18909,  0.01514,  0.043198, 0.396521, 0.375097,  0.037461,
     0.235747, 0.629243, 0.078381, 0.007112, 0.011491, 0.153418,  0,
     0.015452, 0,        0.223763, 0.348448, 0.003717, 0.117533,  1.120532,
     0,        0.000135, 0.028249, 0.099985, 0.042112, 0,         0.038557,
     0.064397},
    {0.923644, 0.041435, 0.004382, 0.08462,   2.735831,  0.077341, 0.318574,
     0.381796, 0.461729, 0.063353, 0.00442,   0.126382,  0.983926, 0.000589,
     0.517896, 0.002262, 1.274118, 0.004982,  0.002219,  0.039265, 1.236457,
     0.069754, 0.087384, 0.335924, 0.286547,  6.8E-05,   0.000123, 0.000589,
     0.741135, 0.000357, 0.000351, 0.002374,  0.905488,  0.027912, 0.157605,
     0.18909,  0,        6.74656,  11.561124, 24.400553, 1.693998, 0.027973,
     0.672077, 0.585071, 3.415722, 0.092405,  0.415718,  0.718719, 0,
     0.034737, 0,        0.176829, 4.380679,  0.5585,    0.505677, 1.93135,
     0,        0.297371, 0.031466, 0.806554,  1.041312,  0.016535, 0.019406,
     0.109975},
    {0.0055,   0.565968, 0.373948, 4.5E-05,   0.019665, 2.159328, 0.498504,
     0.038559, 0,        2.214735, 0.001768,  0.000485, 0,        0.536362,
     0.169264, 4E-05,    0.018814, 0.696016,  0.634927, 0.000562, 0.013077,
     1.394892, 0.971148, 0.022062, 0.000416,  1.610248, 0.020471, 0.000236,
     0.000136, 1.191514, 0.103766, 0.000132,  0.140546, 0.802516, 0.938586,
     0.01514,  6.74656,  0,        19.373137, 9.612709, 0.036022, 1.797671,
     0.496552, 0.086923, 0.028569, 2.620833,  0.682579, 0.046583, 0,
     0.380788, 0,        5.8E-05,  0.084218,  3.45257,  1.978448, 0.111968,
     0,        1.514097, 0.044178, 0.000466,  0,        0.512203, 0.001654,
     9.3E-05},
    {0.000482, 0.068501,  0.759132,  0.003771, 0.049848, 0.728891, 2.866325,
     0.023862, 0,         0.200205,  0.187832, 0.006402, 7.8E-05,  0.004629,
     0.837302, 8.1E-05,   0.001165,  0.190037, 1.544626, 0.080124, 0.017824,
     0.417565, 1.950083,  0.014101,  0.000624, 0.083744, 3.409178, 0.001531,
     0,        0.000893,  1.524024,  6.6E-05,  0.227527, 0.702594, 1.251589,
     0.043198, 11.561124, 19.373137, 0,        5.140068, 0.046588, 1.398079,
     1.526141, 0.083552,  0.081861,  0.968351, 2.211488, 0.054049, 0,
     0.106187, 0,         0.027035,  0.150589, 1.262618, 4.658653, 0.103323,
     0,        0.586111,  0.446015,  0.028567, 0,        0.074851, 0.220908,
     0.005884},
    {0.216244, 0.001329,  0.268662, 0.64316,  0.324162, 0.120121, 0.108501,
     2.359362, 0.013852,  0.005328, 0.045374, 2.323091, 0.001795, 0.000253,
     0.451134, 0.536332,  0.27295,  9.1E-05,  0.040907, 0.42058,  0.346978,
     0.073021, 0.013526,  1.272426, 0.001871, 0,        0,        0.324227,
     0.004077, 0.000417,  0.000772, 0.879741, 0.502355, 0.018617, 0.106257,
     0.396521, 24.400553, 9.612709, 5.140068, 0,        0.658541, 0.022214,
     0.238907, 1.572808,  0.662578, 0.131929, 0.152215, 2.600428, 0,
     0.000419, 0,         0.370309, 1.825878, 0.771771, 0.250545, 3.994417,
     0,        0.011733,  0.03586,  1.899865, 0.008892, 0.000234, 0.03563,
     0.483563},
    {0.713961, 0.2804,    0.00176,  0.909861, 0.46677,  0.000112, 0.000187,
     0.002449, 0.938439,  0.298738, 0.165587, 1.179053, 0.194319, 8.4E-05,
     0.037724, 0.000283,  0.551493, 0.004982, 0.000289, 0.097554, 0.556204,
     0.000384, 0.000164,  0.003549, 0.247245, 0.000753, 0.010419, 0.01531,
     0.165784, 6E-05,     7E-05,    0.00033,  0.639125, 0.067431, 0.053748,
     0.375097, 1.693998,  0.036022, 0.046588, 0.658541, 0,        5.214689,
     25.64086, 21.171295, 0.324696, 0.009773, 0.016839, 0.080337, 0,
     0.029826, 0,         0.082323, 1.720919, 0.001951, 0.00172,  0.012121,
     0,        0.061497,  0.073682, 0.197641, 0.201112, 0.018315, 0.001082,
     0.113991},
    {0.002863,  1.110726, 0.176224, 0.001122, 0,        0.518903, 0.006459,
     0,         0.000821, 2.392606, 0.012227, 0.054025, 0,        0.055425,
     0.018603,  0.000283, 0.016193, 0.566759, 0.336277, 0.000843, 9E-05,
     0.636916,  0.395771, 9.6E-05,  0.008942, 0.676049, 0.703728, 0.021435,
     0,         0.240505, 0.047268, 0,        0.030585, 1.228004, 0.239725,
     0.037461,  0.027973, 1.797671, 1.398079, 0.022214, 5.214689, 0,
     18.675227, 13.93595, 0.001557, 0.201477, 0.051048, 0.00205,  0,
     0.127388,  0,        5.8E-05,  0.000289, 0.880032, 0.356038, 8.5E-05,
     0,         0.309374, 0.105305, 0.007608, 0,        0.172889, 0.000191,
     0},
    {0.001158, 0.293884,  0.744,    0.194964, 0.00061,  0.000447, 0.716441,
     0.000553, 0.069567,  1.149846, 1.558784, 0.684968, 7.8E-05,  0.000295,
     0.410199, 8.1E-05,   0.003029, 0.053714, 0.634203, 0.08406,  0.001254,
     0.001441, 0.703092,  0.001918, 0.143481, 0.097165, 0.590833, 0.043222,
     0,        0.000119,  0.185038, 6.6E-05,  0.136937, 0.403521, 0.968146,
     0.235747, 0.672077,  0.496552, 1.526141, 0.238907, 25.64086, 18.675227,
     0,        13.981617, 0.074536, 0.064227, 0.276276, 0.032177, 0,
     0.014314, 0,         0.007948, 0.003376, 0.002974, 2.163175, 0.002797,
     0,        0.183952,  0.381671, 0.105884, 0,        0.032039, 0.175861,
     0.018773},
    {0.04873,   0.005905, 0.021649, 1.322234, 0.000534, 0.000112,  0.000374,
     0.380374,  0.037657, 0.326035, 0.047437, 2.382451, 0.000156,  0,
     0.027479,  0.069995, 0.042812, 9.1E-05,  0.003377, 0.388156,  0.002508,
     0.000288,  0.001312, 0.418802, 0.042005, 0.004656, 0.011768,  0.241197,
     0.000272,  6E-05,    0.000175, 0.169777, 0.089148, 0.03512,   0.030223,
     0.629243,  0.585071, 0.086923, 0.083552, 1.572808, 21.171295, 13.93595,
     13.981617, 0,        0.072521, 0.016776, 0.024883, 0.164143,  0,
     0.00012,   0,        0.13094,  0.011673, 0.001951, 0.007109,  0.976185,
     0,         0.045044, 0.039313, 0.420899, 0.000741, 0.000141,  0.003881,
     0.164659},
    {0.708204, 0.002362, 0.000524, 0.008844, 3.879355,  0.001957,  0.002528,
     0.009008, 0.560642, 0.000657, 0.002062, 0.006305,  11.271062, 0.313779,
     0.569076, 2.581654, 0.606945, 0.002808, 0.000145,  0.019586,  0.732111,
     0.000192, 8.2E-05,  0.001151, 0.255147, 0,         0,         0.000353,
     2.047159, 0.03173,  0.020529, 0.509595, 0.469281,  0.006776,  0.053017,
     0.078381, 3.415722, 0.028569, 0.081861, 0.662578,  0.324696,  0.001557,
     0.074536, 0.072521, 0,        5.637509, 13.945647, 25.313949, 0,
     0.06043,  0,        0.236179, 0.81372,  0.000279,  0.000115,  0.001356,
     0,        0.086986, 0.058616, 0.754233, 2.299543,  0.047403,  0.762425,
     0.565566},
    {0.00193,  0.215492, 0.056145, 0,        0.002515,  2.862216,  0.010298,
     0.001027, 0.000205, 0.381287, 0.002062, 9.7E-05,   0.154207,  7.487816,
     0.350473, 0.458622, 0.006757, 0.491034, 0.06932,   0.000375,  0.000537,
     0.76009,  0.031642, 0.000192, 0.001871, 0.648523,  0.005026,  0.000589,
     0.043756, 2.720153, 1.08517,  0.105361, 0.042565,  0.119062,  0.245019,
     0.007112, 0.092405, 2.620833, 0.968351, 0.131929,  0.009773,  0.201477,
     0.064227, 0.016776, 5.637509, 0,        18.744445, 10.956917, 0,
     0.582801, 0,        0.000116, 9.6E-05,  0.396897,  0.001261,  8.5E-05,
     0,        1.273908, 0.092044, 0.001087, 0.00599,   0.946136,  0.140867,
     0.026338},
    {0.000193, 0.013582, 0.311885,  0.000628,  0.011433, 0.089643, 3.0925,
     0.003635, 0.000103, 0.00416,   0.314379,  0.001358, 0.911193, 3.487342,
     1.399673, 0.953353, 0.000466,  0.044112,  0.475496, 0.032237, 0.000717,
     0.001537, 0.602428, 0.000384,  0.000832,  0.003287, 0.701399, 0.001413,
     0.173122, 0.477439, 2.26249,   0.091844,  0.055025, 0.04128,  0.362328,
     0.011491, 0.415718, 0.682579,  2.211488,  0.152215, 0.016839, 0.051048,
     0.276276, 0.024883, 13.945647, 18.744445, 0,        8.832621, 0,
     0.116309, 0,        0.00963,   0.000772,  0.001394, 0.451899, 0.000254,
     0,        0.530278, 0.277072,  0.126844,  0.024699, 0.371072, 1.108802,
     0.068927},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.20148,  0.000295, 0.072138,  0.318595,  0.05625,  0.00302,  0.004868,
     2.898791, 0.032116, 0.000219,  0.051709,  0.501456, 2.577578, 0.575921,
     0.430124, 6.546163, 0.150804,  9.1E-05,   0.0096,   0.338207, 0.009225,
     0.000192, 0.000246, 0.708395,  0.003743,  0,        0,        0.336828,
     0.555104, 0.072866, 0.01158,   1.89715,   0.276499, 0.004101, 0.049842,
     0.153418, 0.718719, 0.046583,  0.054049,  2.600428, 0.080337, 0.00205,
     0.032177, 0.164143, 25.313949, 10.956917, 8.832621, 0,        0,
     0.000359, 0,        0.571505,  0.002219,  0.000186, 0.000115, 0.563995,
     0,        0.004316, 0.038763,  1.598824,  0.748196, 0.065905, 0.529619,
     0.86397},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.042942, 0.487814, 0.140864,  0.042762, 0.053363, 0.393545, 0.177757,
     0.000599, 0.060909, 0.34689,   0.26951,  0.00018,  0.025454, 0.255975,
     0.300354, 0.00018,  0.079236,  3.193996, 0.332396, 0.340541, 0.025873,
     0.310416, 0.037372, 0.000479,  0.051686, 0.604541, 0.081931, 0.001377,
     0.011978, 0.622089, 0.308859,  0.000299, 0.043721, 0.184704, 0.136432,
     0.015452, 0.034737, 0.380788,  0.106187, 0.000419, 0.029826, 0.127388,
     0.014314, 0.00012,  0.06043,   0.582801, 0.116309, 0.000359, 0,
     0,        0,        24.177765, 0.070809, 0.524116, 0.213967, 0.069588,
     0,        0.628438, 1.421996,  0.05486,  0.033529, 4.483501, 0.177833,
     0.481042},
    {0.467136,  0.046586, 0.072867, 0.74787,  0.208041, 0.000116, 0.042119,
     0.599932,  0.424321, 0.000116, 0.200499, 0.50647,  0.573013, 0.000116,
     0.294368,  0.352731, 0.486281, 0.265766, 0.09207,  3.088481, 0.03214,
     0.000116,  0.004177, 0.337879, 0.043917, 0.000116, 0.003713, 0.534375,
     0.01665,   0.000116, 0.004815, 0.485469, 0.257122, 0.010037, 0.042815,
     0.223763,  0.176829, 5.8E-05,  0.027035, 0.370309, 0.082323, 5.8E-05,
     0.007948,  0.13094,  0.236179, 0.000116, 0.00963,  0.571505, 0,
     24.177765, 0,        0,        0.341791, 0.047115, 0.058136, 0.688169,
     0,         0.068342, 1.140051, 0.822999, 0.798582, 0.503397, 0.337279,
     4.317981},
    {1.496628, 0.187826, 0.004438, 0.872084, 5.709933,  0.150107,  0.516594,
     2.297807, 1.094736, 1.049877, 0.009261, 5.964323,  0.403435,  9.6E-05,
     0.246094, 0.000386, 2.066955, 0.01447,  0.002122,  0.128111,  3.121656,
     0.072352, 0.064924, 0.544474, 0.557015, 0,         0,         0.000579,
     0.496046, 9.6E-05,  0,        0.000289, 1.265487,  0.007428,  0.001061,
     0.348448, 4.380679, 0.084218, 0.150589, 1.825878,  1.720919,  0.000289,
     0.003376, 0.011673, 0.81372,  9.6E-05,  0.000772,  0.002219,  0,
     0.070809, 0,        0.341791, 0,        15.982573, 17.424222, 35.921779,
     0,        0.121937, 0.195833, 0.75198,  1.184813,  0.056677,  0.611887,
     0.27809},
    {0.020909, 1.118208, 0.25165,   0.000929,  0.409721, 3.82958,   1.562591,
     0.487317, 0.002044, 10.892976, 0.028715,  0.083636, 0,         0.115975,
     0.042282, 0,        0.080383,  1.144692,  0.423382, 0.002137,  0.138742,
     2.487136, 0.371063, 0.196358,  0.004089,  0.685812, 0.004832,  0.001208,
     0.000186, 0.342813, 0.001022,  0.000186,  0.08568,  1.023142,  0.283432,
     0.003717, 0.5585,   3.45257,   1.262618,  0.771771, 0.001951,  0.880032,
     0.002974, 0.001951, 0.000279,  0.396897,  0.001394, 0.000186,  0,
     0.524116, 0,        0.047115,  15.982573, 0,        35.359077, 23.65509,
     0,        1.323765, 0.081312,  0.343463,  0.011609, 0.656004,  0.158873,
     0.030074},
    {0.000459, 0.725836, 0.768607, 0.040706,  0.349846,  2.395833, 4.919174,
     0.199748, 0.000115, 9.818281, 0.514392,  0.681575,  0,        0.000344,
     0.527005, 0,        0.002179, 0.114551,  1.519211,  0.07373,  0.151589,
     0.43252,  2.075226, 0.078776, 0.003211,  0.032106,  1.903571, 0.00172,
     0.000115, 0.000344, 0.266943, 0,         0.002179,  0.670108, 1.029128,
     0.117533, 0.505677, 1.978448, 4.658653,  0.250545,  0.00172,  0.356038,
     2.163175, 0.007109, 0.000115, 0.001261,  0.451899,  0.000115, 0,
     0.213967, 0,        0.058136, 17.424222, 35.359077, 0,        11.510965,
     0,        0.493179, 0.410046, 0.143447,  0.010188,  0.198277, 0.694091,
     0.034137},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.340991, 0.00339,  0.156468, 1.773102,  2.018483,  0.196983,  0.361164,
     4.693944, 0.04789,  0.094762, 0.063994,  12.169045, 0.000424,  0,
     0.093491, 0.172403, 0.508308, 0.000593,  0.049246,  1.253945,  0.487542,
     0.101204, 0.021444, 2.846677, 0.006103,  0,         8.5E-05,   0.660622,
     0.000678, 8.5E-05,  0,        0.277929,  0.330481,  0.000254,  0.04238,
     1.120532, 1.93135,  0.111968, 0.103323,  3.994417,  0.012121,  8.5E-05,
     0.002797, 0.976185, 0.001356, 8.5E-05,   0.000254,  0.563995,  0,
     0.069588, 0,        0.688169, 35.921779, 23.65509,  11.510965, 0,
     0,        0.138244, 0.069758, 1.811753,  0.249707,  0.052602,  0.27499,
     0.773935},
    {0.004316, 0.325422, 0.034794, 0.000135,  0.061227, 0.806071, 0.173298,
     0.001483, 0.030883, 1.372357, 0.070533,  0.181794, 0.012138, 0.309643,
     0.324613, 0.000405, 0.032232, 0.483076,  0.105597, 0.001483, 0.01025,
     0.215779, 0.004585, 0.00027,  0.16615,   0.516927, 0.183143, 0.077815,
     0.021578, 0.674176, 0.265948, 0.000674,  0.003641, 0.071612, 0.013216,
     0.000135, 0.297371, 1.514097, 0.586111,  0.011733, 0.061497, 0.309374,
     0.183952, 0.045044, 0.086986, 1.273908,  0.530278, 0.004316, 0,
     0.628438, 0,        0.068342, 0.121937,  1.323765, 0.493179, 0.138244,
     0,        0,        0.210115, 56.838378, 0.040012, 0.56162,  0.240632,
     0.045951},
    {0.051005, 0.053908, 0.105226, 0.074859, 0.060421, 0.037822, 0.362681,
     0.035939, 0.145245, 0.167138, 0.496706, 0.139046, 0.170041, 0.136849,
     0.321642, 0.078312, 0.055163, 0.369273, 0.24749,  0.195073, 0.070308,
     0.032564, 0.215788, 0.061833, 0.146501, 0.176476, 1.13591,  0.019696,
     0.017106, 0.113701, 0.504866, 0.010122, 0.009966, 0.066384, 0.137634,
     0.028249, 0.031466, 0.044178, 0.446015, 0.03586,  0.073682, 0.105305,
     0.381671, 0.039313, 0.058616, 0.092044, 0.277072, 0.038763, 0,
     1.421996, 0,        1.140051, 0.195833, 0.081312, 0.410046, 0.069758,
     0,        0.210115, 0,        0.264556, 0.271072, 1.183337, 0.632947,
     0.786871},
    {0.099519, 0.000932,  0.011489, 0.360038, 0.415775, 0.000776, 0.053874,
     1.089585, 0.144388,  0.248099, 0.122186, 2.007768, 0.069555, 0.000311,
     0.298091, 0.431456,  0.163174, 0.000155, 0.05791,  0.634065, 0.002795,
     0,        0.000155,  0.239715, 0.232728, 0.012886, 0.023909, 0.726908,
     0.020649, 0.000466,  0.002639, 0.54324,  0.028878, 0,        0.014439,
     0.099985, 0.806554,  0.000466, 0.028567, 1.899865, 0.197641, 0.007608,
     0.105884, 0.420899,  0.754233, 0.001087, 0.126844, 1.598824, 0,
     0.05486,  0,         0.822999, 0.75198,  0.343463, 0.143447, 1.811753,
     0,        56.838378, 0.264556, 0,        0.645571, 0.076912, 0.395942,
     0.733587},
    {0.61266,   0.00284,  6.2E-05,  0.271628,  0.871568, 6.2E-05,  6.2E-05,
     0.012473,  0.423774, 0.000432, 0.000247,  0.010929, 5.159075, 0.042112,
     1.418466,  2.130663, 0.576476, 0.000123,  0,        0.026551, 0.261069,
     0,         0,        0.001358, 0.136647,  0,        0,        0.000741,
     27.219895, 1.373823, 1.045943, 12.035723, 0.287373, 6.2E-05,  0,
     0.042112,  1.041312, 0,        0,         0.008892, 0.201112, 0,
     0,         0.000741, 2.299543, 0.00599,   0.024699, 0.748196, 0,
     0.033529,  0,        0.798582, 1.184813,  0.011609, 0.010188, 0.249707,
     0,         0.040012, 0.271072, 0.645571,  0,        0.151858, 18.541946,
     2.395822},
    {0.005996, 0.143614, 0.043609, 9.4E-05,  0.010539, 0.371541, 0.036489,
     0.000141, 0.0126,   0.166706, 0.056771, 4.7E-05,  0.064968, 1.006045,
     0.800602, 0.059956, 0.016628, 0.761771, 0.107218, 0.001312, 0.006558,
     0.285635, 0.079161, 0.000141, 0.01602,  0.200806, 0.027355, 9.4E-05,
     0.198558, 2.30611,  1.341144, 0.207692, 0.006464, 0.055366, 0.034428,
     0,        0.016535, 0.512203, 0.074851, 0.000234, 0.018315, 0.172889,
     0.032039, 0.000141, 0.047403, 0.946136, 0.371072, 0.065905, 0,
     4.483501, 0,        0.503397, 0.056677, 0.656004, 0.198277, 0.052602,
     0,        0.56162,  1.183337, 0.076912, 0.151858, 0,        0.675537,
     16.011531},
    {0.004963,  0.060699, 0.33378,   0.077878,  0.011134,  0.00299,  0.586818,
     0.015652,  0.001718, 0.00579,   0.506841,  0.009289,  1.065537, 0.478019,
     3.062807,  1.292935, 0.007508,  0.002163,  0.250748,  0.040275, 0.005535,
     0.000382,  0.112999, 0.003499,  0.001527,  6.4E-05,   0.127696, 0.003054,
     16.560966, 5.651603, 12.455337, 11.161511, 0.005472,  0.006808, 0.159955,
     0.038557,  0.019406, 0.001654,  0.220908,  0.03563,   0.001082, 0.000191,
     0.175861,  0.003881, 0.762425,  0.140867,  1.108802,  0.529619, 0,
     0.177833,  0,        0.337279,  0.611887,  0.158873,  0.694091, 0.27499,
     0,         0.240632, 0.632947,  0.395942,  18.541946, 0.675537, 0,
     1.204356},
    {0.148268, 9.3E-05,  0.013122, 0.263567, 0.079948, 9.3E-05,   0.008032,
     0.497293, 0.140516, 9.3E-05,  0.08331,  0.225554, 1.075187,  0.056038,
     0.67937,  1.119411, 0.12632,  0.000467, 0.00976,  0.638696,  0.025217,
     0.00014,  0.004063, 0.324368, 0.030121, 0,        0.000934,  0.143832,
     1.036474, 0.083684, 0.07355,  2.016257, 0.084945, 0,         0.010974,
     0.064397, 0.109975, 9.3E-05,  0.005884, 0.483563, 0.113991,  0,
     0.018773, 0.164659, 0.565566, 0.026338, 0.068927, 0.86397,   0,
     0.481042, 0,        4.317981, 0.27809,  0.030074, 0.034137,  0.773935,
     0,        0.045951, 0.786871, 0.733587, 2.395822, 16.011531, 1.204356,
     0}};

/* ECM unrestrictied nucleotide frequencies, Kosiol et al. 2007, supplemental
   material in A,C,G,T nucleotide order*/
Vector64f ecm_pi((Vector64f() << 0.031090, 0.020321, 0.026699, 0.022276,
                  0.013120, 0.017882, 0.010682, 0.012656, 0.009746, 0.013701,
                  0.006788, 0.010310, 0.012814, 0.023762, 0.021180, 0.024759,
                  0.017168, 0.011040, 0.020730, 0.010671, 0.011165, 0.010408,
                  0.012199, 0.010425, 0.004809, 0.014604, 0.008158, 0.008491,
                  0.007359, 0.016798, 0.028497, 0.015167, 0.034527, 0.025285,
                  0.030606, 0.028590, 0.016516, 0.026817, 0.018288, 0.018907,
                  0.016386, 0.023659, 0.010223, 0.016883, 0.010921, 0.018419,
                  0.022626, 0.019020, 0.000000, 0.016697, 0.000000, 0.017237,
                  0.010366, 0.010761, 0.008721, 0.011798, 0.000000, 0.007415,
                  0.012744, 0.006441, 0.016195, 0.021349, 0.015717, 0.021414)
                     .finished());

const double kappa = 2.5;  // Kosiol et al. 2007, supplemental material

/* calculate number of transitions and transversions between codons c1 and c2*/
void nts_ntv(uint8_t c1, uint8_t c2, int& nts, int& ntv) {
    nts = ntv = 0;
    if(c1 == c2) return;
    for(int i = 0; i < 3; i++) {
        uint8_t nt1 = ((c1 & (uint8_t)(48 / pow(4, i))) >> (4 - 2 * i));
        uint8_t nt2 = ((c2 & (uint8_t)(48 / pow(4, i))) >> (4 - 2 * i));

        if(nt1 == nt2) continue;
        ((nt1 % 2 == nt2 % 2) ? nts : ntv) += 1;
    }
    return;
}

TEST_CASE("[mut_models.cc] nts_ntv") {
    int nts, ntv;

    nts_ntv(0, 0, nts, ntv);  // AAA -> AAA
    CHECK(nts == 0);
    CHECK(ntv == 0);

    nts_ntv(0, 1, nts, ntv);  // AAA -> AAC
    CHECK(nts == 0);
    CHECK(ntv == 1);

    nts_ntv(39, 60, nts, ntv);  // GCT -> TTA
    CHECK(nts == 1);
    CHECK(ntv == 2);

    nts_ntv(21, 42, nts, ntv);  // CCC -> GGG
    CHECK(nts == 0);
    CHECK(ntv == 3);

    nts_ntv(42, 0, nts, ntv);  // GGG -> AAA
    CHECK(nts == 3);
    CHECK(ntv == 0);
}

/* transition-transversion bias function, depending on # of ts and tv (Nts,Ntv)
 */
double k(uint8_t c1, uint8_t c2, int model) {
    int nts, ntv;
    nts_ntv(c1, c2, nts, ntv);
    switch(model) {
    case 0:
        return 1;  // ECM+f+omega. Assumes ts-tv bias is accounted for
    case 1:
        return pow(kappa, nts);  // ECM+F+omega+1k(ts)
    case 2:
        return pow(kappa, ntv);  // ECM+F+omega+1k(tv)
    default:
        return 1;  // ECM+f+omega. Assumes ts-tv bias is accounted for
    }

    return 0;
}

TEST_CASE("[mut_models.cc] k") {
    CHECK(k(0, 0, 0) == 1);                // AAA -> AAA, ECM+f+omega
    CHECK(k(32, 0, 0) == 1);               // GAA -> CTC, ECM+f+omega
    CHECK(k(47, 38) == 1);                 // GTT -> GCT, ECM+f+omega
    CHECK(k(22, 19) == 1);                 // CCG -> CAT, ECM+f+omega
    CHECK(k(0, 42, 1) == pow(kappa, 3));   // AAA -> GGG, ECM+F+omega+1k(ts)
    CHECK(k(32, 29, 1) == 1);              // GAA -> CTC, ECM+F+omega+1k(ts)
    CHECK(k(47, 38, 1) == kappa);          // GTT -> GCT, ECM+F+omega+1k(ts)
    CHECK(k(21, 51, 1) == kappa * kappa);  // CCC -> TAT, ECM+F+omega+1k(ts)
    CHECK(k(0, 0, 2) == 1);                // AAA -> AAA, ECM+F+omega+1k(tv)
    CHECK(k(32, 29, 2) == pow(kappa, 3));  // GAA -> CTC, ECM+F+omega+1k(tv)
    CHECK(k(47, 38, 2) == kappa);          // GTT -> GCT, ECM+F+omega+1k(tv)
    CHECK(k(22, 19, 2) == kappa * kappa);  // CCG -> CAT, ECM+F+omega+1k(tv)
}

/* Empirical Codon Model P matrix */
void ecm_p(Matrix64f& P, const double& br_len) {
    Matrix64f Q = Matrix64f::Zero();

    double d = 0.0;

    for(uint8_t i = 0; i < 64; i++) {
        double rowSum = 0.0;
        for(uint8_t j = 0; j < 64; j++) {
            // check if codons i or j are stop codons
            if(i == j || nt4_table[i] == '*' || nt4_table[j] == '*') {
                continue;
            } else if(nt4_table[i] == nt4_table[j]) {
                Q(i, j) = s[i][j] * ecm_pi(j) * k(i, j, 0);
            } else {  // nt4_table[i] != nt4_table[j]{
                Q(i, j) = s[i][j] * ecm_pi(j) * k(i, j, 0) * omega;
            }
            rowSum += Q(i, j);
        }
        Q(i, i) = -rowSum;
        d += ecm_pi(i) * rowSum;
    }

    // normalize
    Q = Q / d;

    // P matrix
    Q = Q * br_len;
    P = Q.exp();
}

/* Empirical Codon Model (Kosiol et al. 2007) FST */
void ecm(VectorFst<StdArc>& mut_fst, const double& br_len) {
    Matrix64f P;
    ecm_p(P, br_len);

    // Add state 0 and make it the start state
    VectorFst<StdArc> ecm;
    ecm.AddState();
    ecm.SetStart(0);

    int r = 1;
    for(uint8_t i = 0; i < 64; i++) {
        for(uint8_t j = 0; j < 64; j++) {
            add_arc(ecm, 0, r, ((i & 48) >> 4) + 1, ((j & 48) >> 4) + 1,
                    P(i, j));
            add_arc(ecm, r, r + 1, ((i & 12) >> 2) + 1, ((j & 12) >> 2) + 1);
            add_arc(ecm, r + 1, 0, (i & 3) + 1, (j & 3) + 1);
            r = r + 2;
        }
    }

    // Set final state
    ecm.SetFinal(0, 0.0);
    mut_fst = optimize(ecm);
}

/* Dynamic Programming implementation of Marginal MG94 model*/
int mg94_marginal(vector<string> sequences, alignment_t& aln, Matrix64f& P_m) {
    // P matrix for marginal Muse and Gaut codon model
    Eigen::Tensor<double, 3> p(64, 3, 4);

    mg94_marginal_p(p, P_m);

    string seq_a = sequences[0];
    string seq_b = sequences[1];
    int m = sequences[0].length();
    int n = sequences[1].length();

    // ensure that length of first sequence (reference) is multiple of 3
    if(m % 3 != 0) {
        cout << "Reference coding sequence length must be a multiple of 3 ("
             << m << "). Exiting!" << endl;
        exit(EXIT_FAILURE);
    }

    // DP matrices for match/mismatch (D), insertion (P), and deletion (Q)
    Eigen::MatrixXf D = Eigen::MatrixXf::Constant(
        m + 1, n + 1, std::numeric_limits<float>::max());
    Eigen::MatrixXf P = Eigen::MatrixXf::Constant(
        m + 1, n + 1, std::numeric_limits<float>::max());
    Eigen::MatrixXf Q = Eigen::MatrixXf::Constant(
        m + 1, n + 1, std::numeric_limits<float>::max());

    // backtracking info matrices for match/mismatch (Bd), insert (Bp), and
    // deletion (Bq)
    Eigen::MatrixXd Bd = Eigen::MatrixXd::Constant(m + 1, n + 1, -1);
    Eigen::MatrixXd Bp = Eigen::MatrixXd::Constant(m + 1, n + 1, -1);
    Eigen::MatrixXd Bq = Eigen::MatrixXd::Constant(m + 1, n + 1, -1);

    double insertion = log(0.001);
    double deletion = log(0.001);
    double insertion_ext = log(1.0 - (1.0 / 6.0));
    double deletion_ext = log(1.0 - (1.0 / 6.0));
    double no_insertion = log(1.0 - 0.001);
    double no_deletion = log(1.0 - 0.001);
    double no_insertion_ext = log(1.0 / 6.0);
    double no_deletion_ext = log(1.0 / 6.0);

    Vector5d nuc_freqs;
    nuc_freqs << log(0.308), log(0.185), log(0.199), log(0.308), log(0.25);

    // DP and backtracking matrices initialization

    // fill first values on D that are independent
    D(0, 0) = 0.0;  // 0.0;
    Bd(0, 0) = 0;
    D(0, 1) = -insertion - nuc_freqs[nt4_table[seq_b[0]]] - no_insertion_ext;
    P(0, 1) = -insertion - nuc_freqs[nt4_table[seq_b[0]]] - no_insertion_ext;
    Bd(0, 1) = 1;
    Bp(0, 1) = 2;
    D(1, 0) = -no_insertion - deletion - no_deletion_ext;
    Q(1, 0) = -no_insertion - deletion - no_deletion_ext;
    Bd(1, 0) = 2;
    Bq(1, 0) = 2;

    // fill first row of D
    if(n + 1 >= 2) {
        for(int j = 2; j < n + 1; j++) {
            D(0, j) = D(0, j - 1) - insertion_ext -
                      nuc_freqs[nt4_table[seq_b[j - 1]]];
            P(0, j) = P(0, j - 1) - insertion_ext -
                      nuc_freqs[nt4_table[seq_b[j - 1]]];
            Bd(0, j) = 1;
            Bp(0, j) = 1;
        }
    }

    // fill first column of D
    if(m + 1 >= 2) {
        for(int i = 2; i < m + 1; i++) {
            D(i, 0) = D(i - 1, 0) - deletion_ext;
            Q(i, 0) = Q(i - 1, 0) - deletion_ext;
            Bd(i, 0) = 2;
            Bq(i, 0) = 1;
        }
    }

    string codon;
    double p1, p2, q1, q2, d;

    for(int i = 1; i < m + 1; i++) {
        codon = seq_a.substr((((i - 1) / 3) * 3), 3);  // current codon
        for(int j = 1; j < n + 1; j++) {
            // insertion
            p1 = P(i, j - 1) - insertion_ext -
                 nuc_freqs[nt4_table[seq_b[j - 1]]];
            p2 = Bd(i, j - 1) == 0
                     ? D(i, j - 1) - insertion -
                           nuc_freqs[nt4_table[seq_b[j - 1]]] - no_insertion_ext
                 : Bd(i, j - 1) == 1 ? D(i, j - 1) - insertion_ext -
                                           nuc_freqs[nt4_table[seq_b[j - 1]]]
                                     : numeric_limits<double>::max();
            P(i, j) = min(p1, p2);
            Bp(i, j) =
                p1 < p2
                    ? 1
                    : 2;  // 1 is insertion extension, 2 is insertion opening

            // deletion
            q1 = Q(i - 1, j) - deletion_ext;
            q2 = Bd(i - 1, j) == 0
                     ? D(i - 1, j) - no_insertion - deletion - no_deletion_ext
                 : Bd(i - 1, j) == 1 ? D(i - 1, j) - no_deletion_ext - deletion
                                     : D(i - 1, j) - deletion_ext;
            Q(i, j) = min(q1, q2);
            Bq(i, j) =
                q1 < q2 ? 1
                        : 2;  // 1 is deletion extension, 2 is deletion opening

            // match/mismatch
            if(Bd(i - 1, j - 1) == 0) {
                d = D(i - 1, j - 1) - no_insertion - no_deletion -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            } else if(Bd(i - 1, j - 1) == 1) {
                d = D(i - 1, j - 1) - no_deletion -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            } else {
                d = D(i - 1, j - 1) -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            }

            // D[i,j] = highest weight between insertion, deletion, and
            // match/mismatch
            //	in this case, lowest (-log(weight)) value
            if(d < P(i, j)) {
                if(d < Q(i, j)) {
                    D(i, j) = d;
                    Bd(i, j) = 0;
                } else {
                    D(i, j) = Q(i, j);
                    Bd(i, j) = 2;
                }
            } else {
                if(P(i, j) < Q(i, j)) {
                    D(i, j) = P(i, j);
                    Bd(i, j) = 1;
                } else {
                    D(i, j) = Q(i, j);
                    Bd(i, j) = 2;
                }
            }
        }
    }

    aln.weight = D(m, n);  // weight

    // backtracking to obtain alignment
    return backtracking(Bd, Bp, Bq, seq_a, seq_b, aln);
}

/* Dynamic Programming with no frameshifts*/
int gotoh_noframeshifts(vector<string> sequences, alignment_t& aln,
                        Matrix64f& P_m) {
    // P matrix for marginal Muse and Gaut codon model
    Eigen::Tensor<double, 3> p(64, 3, 4);

    mg94_marginal_p(p, P_m);

    string seq_a = sequences[0];
    string seq_b = sequences[1];
    int m = sequences[0].length();
    int n = sequences[1].length();

    // ensure that length of first sequence (reference) is multiple of 3
    if((m % 3 != 0) || (n % 3 != 0)) {
        cout << "The length of both sequences must be a multiple of 3. Exiting!"
             << endl;
        exit(EXIT_FAILURE);
    }

    // DP matrices for match/mismatch (D), insertion (P), and deletion (Q)
    Eigen::MatrixXf D = Eigen::MatrixXf::Constant(
        m + 1, n + 1, std::numeric_limits<float>::max());
    Eigen::MatrixXf P = Eigen::MatrixXf::Constant(
        m + 1, n + 1, std::numeric_limits<float>::max());
    Eigen::MatrixXf Q = Eigen::MatrixXf::Constant(
        m + 1, n + 1, std::numeric_limits<float>::max());

    // backtracking info matrices for match/mismatch (Bd), insert (Bp), and
    // deletion (Bq)
    Eigen::MatrixXd Bd = Eigen::MatrixXd::Constant(m + 1, n + 1, -1);
    Eigen::MatrixXd Bp = Eigen::MatrixXd::Constant(m + 1, n + 1, -1);
    Eigen::MatrixXd Bq = Eigen::MatrixXd::Constant(m + 1, n + 1, -1);

    double insertion = 0.001;
    double deletion = 0.001;
    double insertion_ext = 1.0 - (1.0 / 6.0);
    double deletion_ext = 1.0 - (1.0 / 6.0);

    Vector5d nuc_freqs;
    nuc_freqs << 0.308, 0.185, 0.199, 0.308, 0.25;

    // DP and backtracking matrices initialization

    // fill first values on D that are independent
    D(0, 0) = 0.0;
    Bd(0, 0) = 0;
    D(0, 3) = P(0, 3) = -log(insertion) - log(nuc_freqs[nt4_table[seq_b[0]]]) -
                        log(nuc_freqs[nt4_table[seq_b[1]]]) -
                        log(nuc_freqs[nt4_table[seq_b[2]]]) -
                        log(1.0 - insertion_ext) - 2 * log(insertion_ext);
    D(3, 0) = Q(3, 0) = -log(1.0 - insertion) - log(deletion) -
                        2 * log(deletion_ext) - log(1.0 - deletion_ext);
    Bd(0, 3) = 1;
    Bd(3, 0) = Bp(0, 3) = Bq(3, 0) = 2;

    // fill first row of D
    if(n + 1 >= 6) {
        for(int j = 6; j < n + 1; j += 3) {
            D(0, j) = P(0, j) = D(0, j - 3) - 3 * log(insertion_ext) -
                                log(nuc_freqs[nt4_table[seq_b[j - 3]]]) -
                                log(nuc_freqs[nt4_table[seq_b[j - 2]]]) -
                                log(nuc_freqs[nt4_table[seq_b[j - 1]]]);
            Bd(0, j) = 1;
            Bp(0, j) = 1;
        }
    }

    // fill first column of D
    if(m + 1 >= 6) {
        for(int i = 6; i < m + 1; i += 3) {
            D(i, 0) = D(i - 3, 0) - 3 * log(deletion_ext);
            Q(i, 0) = Q(i - 3, 0) - 3 * log(deletion_ext);
            Bd(i, 0) = 2;
            Bq(i, 0) = 1;
        }
    }

    string codon;
    double p1, p2, q1, q2, d, temp;

    // Cells with only match/mismatch (1,1) & (2,2)
    codon = seq_a.substr(0, 3);
    for(int i = 1; i < 3; i++) {
        D(i, i) = D(i - 1, i - 1) - log(1.0 - insertion) - log(1.0 - deletion) -
                  log(transition(codon, i % 3, seq_b[i - 1], p));
        Bd(i, i) = 0;
    }

    // Second and third row/column (match/mismatch && insertion || deletion)
    for(int i = 1; i < 3; i++) {
        for(int j = i + 3; j < n + 1; j += 3) {  // rows
            codon = seq_a.substr(0, 3);
            // match/mismatch
            if(Bd(i - 1, j - 1) == 0) {
                d = D(i - 1, j - 1) - log(1.0 - insertion) -
                    log(1.0 - deletion) -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            } else if(Bd(i - 1, j - 1) == 1) {
                d = D(i - 1, j - 1) - log(1.0 - deletion) -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            } else {
                d = D(i - 1, j - 1) -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            }
            // insertion
            p1 = P(i, j - 3) - 3 * log(insertion_ext) -
                 log(nuc_freqs[nt4_table[seq_b[j - 3]]]) -
                 log(nuc_freqs[nt4_table[seq_b[j - 2]]]) -
                 log(nuc_freqs[nt4_table[seq_b[j - 1]]]);
            p2 = Bd(i, j - 3) == 0
                     ? D(i, j - 3) - log(insertion) - 2 * log(insertion_ext) -
                           log(nuc_freqs[nt4_table[seq_b[j - 3]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 2]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 1]]]) -
                           log(1.0 - insertion_ext)
                 : Bd(i, j - 1) == 1
                     ? D(i, j - 1) - 3 * log(insertion_ext) -
                           log(nuc_freqs[nt4_table[seq_b[j - 3]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 2]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 1]]])
                     : numeric_limits<double>::max();
            P(i, j) = min(p1, p2);
            Bp(i, j) =
                p1 < p2
                    ? 1
                    : 2;  // 1 is insertion extension, 2 is insertion opening
            D(i, j) = P(i, j) < d ? P(i, j) : d;
            Bd(i, j) = P(i, j) < d ? 1 : 0;
        }

        for(int j = i + 3; j < m + 1; j += 3) {            // columns
            codon = seq_a.substr((((j - 1) / 3) * 3), 3);  // current codon
            // match/mismatch
            if(Bd(j - 1, i - 1) == 0) {
                d = D(j - 1, i - 1) - log(1.0 - insertion) -
                    log(1.0 - deletion) -
                    log(transition(codon, (j) % 3, seq_b[i - 1], p));
            } else if(Bd(j - 1, i - 1) == 1) {
                d = D(j - 1, i - 1) - log(1.0 - deletion) -
                    log(transition(codon, (j) % 3, seq_b[i - 1], p));
            } else {
                d = D(j - 1, i - 1) -
                    log(transition(codon, (j) % 3, seq_b[i - 1], p));
            }
            // deletion
            q1 = Q(j - 3, i) - 3 * log(deletion_ext);
            q2 = Bd(j - 3, i) == 0
                     ? D(j - 3, i) - log(1.0 - insertion) - log(deletion) -
                           log(1.0 - deletion_ext) - 2 * log(deletion_ext)
                 : Bd(j - 3, i) == 1 ? D(j - 3, i) - log(1.0 - deletion_ext) -
                                           log(deletion) - 2 * log(deletion_ext)
                                     : D(j - 3, i) - 3 * log(deletion_ext);
            Q(j, i) = min(q1, q2);
            Bq(j, i) =
                q1 < q2 ? 1
                        : 2;  // 1 is deletion extension, 2 is deletion opening
            D(j, i) = Q(j, i) < d ? Q(j, i) : d;
            Bd(j, i) = Q(j, i) < d ? 1 : 2;
        }
    }

    // Cells considering all 3 events (insertion, deletion, match/mismatch)
    for(int i = 3; i < m + 1; i++) {
        codon = seq_a.substr((((i - 1) / 3) * 3), 3);  // current codon
        for(int j = 3; j < n + 1; j += 3) {
            temp = j;
            j += i % 3;
            if(j > n) continue;
            // match/mismatch
            if(Bd(i - 1, j - 1) == 0) {
                d = D(i - 1, j - 1) - log(1.0 - insertion) -
                    log(1.0 - deletion) -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            } else if(Bd(i - 1, j - 1) == 1) {
                d = D(i - 1, j - 1) - log(1.0 - deletion) -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            } else {
                d = D(i - 1, j - 1) -
                    log(transition(codon, (i) % 3, seq_b[j - 1], p));
            }
            // insertion
            p1 = P(i, j - 3) - 3 * log(insertion_ext) -
                 log(nuc_freqs[nt4_table[seq_b[j - 3]]]) -
                 log(nuc_freqs[nt4_table[seq_b[j - 2]]]) -
                 log(nuc_freqs[nt4_table[seq_b[j - 1]]]);
            p2 = Bd(i, j - 3) == 0
                     ? D(i, j - 3) - log(insertion) - 2 * log(insertion_ext) -
                           log(nuc_freqs[nt4_table[seq_b[j - 3]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 2]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 1]]]) -
                           log(1.0 - insertion_ext)
                 : Bd(i, j - 1) == 1
                     ? D(i, j - 1) - 3 * log(insertion_ext) -
                           log(nuc_freqs[nt4_table[seq_b[j - 3]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 2]]]) -
                           log(nuc_freqs[nt4_table[seq_b[j - 1]]])
                     : numeric_limits<double>::max();
            P(i, j) = min(p1, p2);
            Bp(i, j) =
                p1 < p2
                    ? 1
                    : 2;  // 1 is insertion extension, 2 is insertion opening
            // deletion
            q1 = Q(i - 3, j) - 3 * log(deletion_ext);
            q2 = Bd(i - 3, j) == 0
                     ? D(i - 3, j) - log(1.0 - insertion) - log(deletion) -
                           log(1.0 - deletion_ext) - 2 * log(deletion_ext)
                 : Bd(i - 3, j) == 1 ? D(i - 3, j) - log(1.0 - deletion_ext) -
                                           log(deletion) - 2 * log(deletion_ext)
                                     : D(i - 3, j) - 3 * log(deletion_ext);
            Q(i, j) = min(q1, q2);
            Bq(i, j) =
                q1 < q2 ? 1
                        : 2;  // 1 is deletion extension, 2 is deletion opening
            // D[i,j] = highest weight between insertion, deletion, and
            // match/mismatch
            //	in this case, lowest (-log(weight)) value
            if(d < P(i, j)) {
                if(d < Q(i, j)) {
                    D(i, j) = d;
                    Bd(i, j) = 0;
                } else {
                    D(i, j) = Q(i, j);
                    Bd(i, j) = 2;
                }
            } else {
                if(P(i, j) < Q(i, j)) {
                    D(i, j) = P(i, j);
                    Bd(i, j) = 1;
                } else {
                    D(i, j) = Q(i, j);
                    Bd(i, j) = 2;
                }
            }
            j = temp;
        }
    }

    aln.weight = D(m, n);  // weight

    // backtracking to obtain alignment
    return backtracking_noframeshifts(Bd, Bp, Bq, seq_a, seq_b, aln);
}
/* Return value from marginal MG94 model p matrix for a given transition */
double transition(string codon, int position, char nuc,
                  const Eigen::Tensor<double, 3>& p) {
    position = position == 0 ? 2 : --position;

    if(nuc != 'N') {
        return p(cod_int(codon), position, nt4_table[nuc]);
    } else {
        double val = 0.0;
        for(int i = 0; i < 4; i++) {
            val += p(cod_int(codon), position, i);
        }
        return val / 4.0;
    }
}

/* Recover alignment given backtracking matrices for DP alignment */
int backtracking(Eigen::MatrixXd Bd, Eigen::MatrixXd Bp, Eigen::MatrixXd Bq,
                 string seqa, string seqb, alignment_t& aln) {
    int i = seqa.length();
    int j = seqb.length();

    // vector<string> alignment;
    aln.f.seq_data.push_back(string());
    aln.f.seq_data.push_back(string());

    while((i != 0) || (j != 0)) {
        // match/mismatch
        if(Bd(i, j) == 0) {
            aln.f.seq_data[0].insert(0, 1, seqa[i - 1]);
            aln.f.seq_data[1].insert(0, 1, seqb[j - 1]);
            i--;
            j--;
            // insertion
        } else if(Bd(i, j) == 1) {
            while(Bp(i, j) == 1) {
                aln.f.seq_data[0].insert(0, 1, '-');
                aln.f.seq_data[1].insert(0, 1, seqb[j - 1]);
                j--;
            }
            aln.f.seq_data[0].insert(0, 1, '-');
            aln.f.seq_data[1].insert(0, 1, seqb[j - 1]);
            j--;
            // deletion
        } else {
            while(Bq(i, j) == 1) {
                aln.f.seq_data[0].insert(0, 1, seqa[i - 1]);
                aln.f.seq_data[1].insert(0, 1, '-');
                i--;
            }
            aln.f.seq_data[0].insert(0, 1, seqa[i - 1]);
            aln.f.seq_data[1].insert(0, 1, '-');
            i--;
        }
    }

    return 0;
}

/* Recover alignment given backtracking matrices for DP alignment */
int backtracking_noframeshifts(Eigen::MatrixXd Bd, Eigen::MatrixXd Bp,
                               Eigen::MatrixXd Bq, string seqa, string seqb,
                               alignment_t& aln) {
    int i = seqa.length();
    int j = seqb.length();

    // vector<string> alignment;
    aln.f.seq_data.push_back(string());
    aln.f.seq_data.push_back(string());

    while((i != 0) || (j != 0)) {
        // match/mismatch
        if(Bd(i, j) == 0) {
            aln.f.seq_data[0].insert(0, 1, seqa[i - 1]);
            aln.f.seq_data[1].insert(0, 1, seqb[j - 1]);
            i--;
            j--;
            // insertion
        } else if(Bd(i, j) == 1) {
            while(Bp(i, j) == 1) {
                for(int h = 0; h < 3; h++) {
                    aln.f.seq_data[0].insert(0, 1, '-');
                    aln.f.seq_data[1].insert(0, 1, seqb[j - 1]);
                    j--;
                }
            }
            for(int h = 0; h < 3; h++) {
                aln.f.seq_data[0].insert(0, 1, '-');
                aln.f.seq_data[1].insert(0, 1, seqb[j - 1]);
                j--;
            }
            // deletion
        } else {
            while(Bq(i, j) == 1) {
                for(int h = 0; h < 3; h++) {
                    aln.f.seq_data[0].insert(0, 1, seqa[i - 1]);
                    aln.f.seq_data[1].insert(0, 1, '-');
                    i--;
                }
            }
            for(int h = 0; h < 3; h++) {
                aln.f.seq_data[0].insert(0, 1, seqa[i - 1]);
                aln.f.seq_data[1].insert(0, 1, '-');
                i--;
            }
        }
    }

    return 0;
}

float alignment_score(vector<string> alignment, Matrix64f& P) {
    if(alignment[0].length() != alignment[1].length()) {
        cout << "For alignment scoring both sequences must have equal lenght. "
                "Exiting!"
             << endl;
        exit(EXIT_FAILURE);
    }

    int state = 0;
    double weight = 0.0;
    string codon;

    double insertion = 0.001;
    double deletion = 0.001;
    double insertion_ext = 1.0 - (1.0 / 6.0);
    double deletion_ext = 1.0 - (1.0 / 6.0);

    // P matrix for marginal Muse and Gaut codon model
    Eigen::Tensor<double, 3> p(64, 3, 4);
    mg94_marginal_p(p, P);

    string seq1 = alignment[0];
    boost::erase_all(seq1, "-");
    int gap_n = 0;

    Vector5d nuc_freqs;
    nuc_freqs << 0.308, 0.185, 0.199, 0.308, 0.25;

    for(int i = 0; i < alignment[0].length(); i++) {
        codon = seq1.substr(((i - gap_n) / 3) * 3, 3);  // current codon
        switch(state) {
        case 0:
            if(alignment[0][i] == '-') {
                // insertion;
                weight = weight - log(insertion) -
                         log(nuc_freqs[nt4_table[alignment[1][i]]]) -
                         log(1.0 - insertion_ext);
                state = 1;
                gap_n++;
            } else if(alignment[1][i] == '-') {
                // deletion;
                weight = weight - log(1.0 - insertion) - log(deletion) -
                         log(1.0 - deletion_ext);
                state = 2;
            } else {
                // match/mismatch;
                weight = weight - log(1.0 - insertion) - log(1.0 - deletion) -
                         log(transition(codon, (i + 1 - gap_n) % 3,
                                        alignment[1][i], p));
            }
            break;

        case 1:
            if(alignment[0][i] == '-') {
                // insertion_ext
                weight = weight - log(insertion_ext) -
                         log(nuc_freqs[nt4_table[alignment[1][i]]]);
                gap_n++;
            } else if(alignment[1][i] == '-') {
                // deletion
                weight = weight - log(deletion) - log(1.0 - deletion_ext);
                state = 2;
            } else {
                // match/mismatch
                weight = weight - log(1.0 - deletion) -
                         log(transition(codon, (i + 1 - gap_n) % 3,
                                        alignment[1][i], p));
                state = 0;
            }
            break;

        case 2:
            if(alignment[0][i] == '-') {
                cout << "Insertion after deletion is not modeled. Exiting!";
                exit(EXIT_FAILURE);
            } else if(alignment[1][i] == '-') {
                // deletion_ext
                weight = weight - log(deletion_ext);
            } else {
                // match/mismatch
                weight = weight - log(transition(codon, (i + 1 - gap_n) % 3,
                                                 alignment[1][i], p));
                state = 0;
            }
        }
    }

    return (weight);
}
