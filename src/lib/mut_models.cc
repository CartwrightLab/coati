
#include "mut_models.h"

// #include "eigen.h"
// #include "matrix.h"

using namespace fst;

#define A 1
#define C 2
#define G 3
#define T 4

const std::string nuc_table[6] = {"T","C","A","G","U","N"};

const std::map<char, int> nuc_sym = {{'A',1},{'C',2},{'G',3},{'T',4}};

const std::string codon_table[64] = {"TTT","TTC","TTA","TTG","TCT","TCC","TCA",\
	"TCG","TAT","TAC","TAA","TAG","TGT","TGC","TGA","TGG","CTT","CTC","CTA","CTG",\
	"CCT","CCC","CCA","CCG","CAT","CAC","CAA","CAG","CGT","CGC","CGA","CGG","ATT",\
	"ATC","ATA","ATG","ACT","ACC","ACA","ACG","AAT","AAC","AAA","AAG","AGT","AGC",\
	"AGA","AGG","GTT","GTC","GTA","GTG","GCT","GCC","GCA","GCG","GAT","GAC","GAA",\
	"GAG","GGT","GGC","GGA","GGG"};

const std::unordered_map<std::string, std::string> codon_aa = {{"TTT","F"},\
	{"TTC","F"},{"TTA","L"},{"TTG","L"},{"TCT","S"},{"TCC","S"},{"TCA","S"},{"TCG","S"},\
	{"TAT","Y"},{"TAC","Y"},{"TAA","*"},{"TAG","*"},{"TGT","C"},{"TGC","C"},{"TGA","*"},\
	{"TGG","W"},{"CTT","L"},{"CTC","L"},{"CTA","L"},{"CTG","L"},{"CCT","P"},{"CCC","P"},\
	{"CCA","P"},{"CCG","P"},{"CAT","H"},{"CAC","H"},{"CAA","Q"},{"CAG","Q"},{"CGT","R"},\
	{"CGC","R"},{"CGA","R"},{"CGG","R"},{"ATT","I"},{"ATC","I"},{"ATA","I"},{"ATG","M"},\
	{"ACT","T"},{"ACC","T"},{"ACA","T"},{"ACG","T"},{"AAT","N"},{"AAC","N"},{"AAA","K"},\
	{"AAG","K"},{"AGT","S"},{"AGC","S"},{"AGA","R"},{"AGG","R"},{"GTT","V"},{"GTC","V"},\
	{"GTA","V"},{"GTG","V"},{"GCT","A"},{"GCC","A"},{"GCA","A"},{"GCG","A"},{"GAT","D"},\
	{"GAC","D"},{"GAA","E"},{"GAG","E"},{"GGT","G"},{"GGC","G"},{"GGA","G"},{"GGG","G"}};

/* void MG94(float** m) {
//
// }*/

VectorFst<StdArc> nuc2pos() {
	VectorFst<StdArc> n2p;

	// Add state 0 and make it the start state
	n2p.AddState();
	n2p.SetStart(0);

	int s = 1;		// variable to keep track of states
	int c = 101;	// variable to keep track of codons
	// TODO: find more elegant way than 3 nested for loops
	for(int i=1; i<5; i++) {
		for(int j=1; j<5; j++) {
			for(int k=1; k<5; k++) {
				add_arc(n2p, 0, 	s, 		i, c);
				add_arc(n2p, s, 	s+1, 	j, c+1);
				add_arc(n2p, s+1, 	0,		k, c+2);
				s += 2;
				c += 3;
			}
		}
	}

	n2p.SetFinal(0, 0.0);

	return n2p;
}


// TODO: make as template so that I can use any kind of fst and arc
VectorFst<StdArc> marg_mut() {

	// // tropical semiring & read raw FSTs
	const VectorFst<StdArc> *marg_pos = VectorFst<StdArc>::Read("fst/marg_pos.fst");
	VectorFst<StdArc> nuc2pos_raw = nuc2pos();

	// optimize raw FSTs
	VectorFst<StdArc> nuc2cod_fst, cod2pos_fst, marg_pos_fst, nuc2pos_fst;
	marg_pos_fst = optimize(*marg_pos);
	nuc2pos_fst = optimize(nuc2pos_raw);

	// sort FSTs
	VectorFst<StdArc> nuc2cod_sort, cod2pos_sort, marg_pos_sort, nuc2pos_sort;
	marg_pos_sort = ArcSortFst<StdArc, ILabelCompare<StdArc>>(marg_pos_fst, ILabelCompare<StdArc>());
	nuc2pos_sort = ArcSortFst<StdArc, OLabelCompare<StdArc>>(nuc2pos_fst, OLabelCompare<StdArc>());

	// compose FSTs
	ComposeFst<StdArc> marg_mut = ComposeFst<StdArc>(nuc2pos_sort, marg_pos_sort);

	// optimize final marginalized mutation FST
	VectorFst<StdArc> marg_mut_opt;
	marg_mut_opt = optimize(VectorFst<StdArc>(marg_mut));

	return marg_mut_opt;
}

VectorFst<StdArc> toycoati() {
	const VectorFst<StdArc> *toy_raw = VectorFst<StdArc>::Read("fst/mutation.fst");
	VectorFst<StdArc> mutation_fst;
	mutation_fst = optimize(*toy_raw);

	return mutation_fst;
}

VectorFst<StdArc> dna_mut() {
	const VectorFst<StdArc> *dna_raw = VectorFst<StdArc>::Read("fst/dna_marg.fst");
	VectorFst<StdArc> dna_model;
	dna_model = optimize(*dna_raw);

	return dna_model;
}

// ECM unrestricted exchangeabilities, Kosiol et al. 2007, supplemental data [61x61]
std::vector<float> s = {0,16.011531,2.395822,1.204356,0.773935,0.030074,0.27809,0.034137,4.317981,0.481042,0.733587,0.045951,0.786871,2.016257,0.083684,1.036474,0.07355,0.324368,0.00014,0.025217,0.004063,0.638696,0.000467,0.12632,0.00976,0.143832,0,0.030121,0.000934,1.119411,0.056038,1.075187,0.67937,0.497293,9.3e-05,0.079948,0.008032,0.263567,9.3e-05,0.148268,0.013122,0.225554,9.3e-05,0.140516,0.08331,0.86397,0.026338,0.565566,0.068927,0.483563,9.3e-05,0.109975,0.005884,0.064397,0,0.084945,0.010974,0.164659,0,0.113991,0.018773,
16.011531,0,0.151858,0.675537,0.052602,0.656004,0.056677,0.198277,0.503397,4.483501,0.076912,0.56162,1.183337,0.207692,2.30611,0.198558,1.341144,0.000141,0.285635,0.006558,0.079161,0.001312,0.761771,0.016628,0.107218,9.4e-05,0.200806,0.01602,0.027355,0.059956,1.006045,0.064968,0.800602,0.000141,0.371541,0.010539,0.036489,9.4e-05,0.143614,0.005996,0.043609,4.7e-05,0.166706,0.0126,0.056771,0.065905,0.946136,0.047403,0.371072,0.000234,0.512203,0.016535,0.074851,0,0.055366,0.006464,0.034428,0.000141,0.172889,0.018315,0.032039,
2.395822,0.151858,0,18.541946,0.249707,0.011609,1.184813,0.010188,0.798582,0.033529,0.645571,0.040012,0.271072,12.035723,1.373823,27.219895,1.045943,0.001358,0,0.261069,0,0.026551,0.000123,0.576476,0,0.000741,0,0.136647,0,2.130663,0.042112,5.159075,1.418466,0.012473,6.2e-05,0.871568,6.2e-05,0.271628,0.00284,0.61266,6.2e-05,0.010929,0.000432,0.423774,0.000247,0.748196,0.00599,2.299543,0.024699,0.008892,0,1.041312,0,0.042112,6.2e-05,0.287373,0,0.000741,0,0.201112,0,
1.204356,0.675537,18.541946,0,0.27499,0.158873,0.611887,0.694091,0.337279,0.177833,0.395942,0.240632,0.632947,11.161511,5.651603,16.560966,12.455337,0.003499,0.000382,0.005535,0.112999,0.040275,0.002163,0.007508,0.250748,0.003054,6.4e-05,0.001527,0.127696,1.292935,0.478019,1.065537,3.062807,0.015652,0.00299,0.011134,0.586818,0.077878,0.060699,0.004963,0.33378,0.009289,0.00579,0.001718,0.506841,0.529619,0.140867,0.762425,1.108802,0.03563,0.001654,0.019406,0.220908,0.038557,0.006808,0.005472,0.159955,0.003881,0.000191,0.001082,0.175861,
0.773935,0.052602,0.249707,0.27499,0,23.65509,35.921779,11.510965,0.688169,0.069588,1.811753,0.138244,0.069758,0.277929,8.5e-05,0.000678,0,2.846677,0.101204,0.487542,0.021444,1.253945,0.000593,0.508308,0.049246,0.660622,0,0.006103,8.5e-05,0.172403,0,0.000424,0.093491,4.693944,0.196983,2.018483,0.361164,1.773102,0.00339,0.340991,0.156468,12.169045,0.094762,0.04789,0.063994,0.563995,8.5e-05,0.001356,0.000254,3.994417,0.111968,1.93135,0.103323,1.120532,0.000254,0.330481,0.04238,0.976185,8.5e-05,0.012121,0.002797,
0.030074,0.656004,0.011609,0.158873,23.65509,0,15.982573,35.359077,0.047115,0.524116,0.343463,1.323765,0.081312,0.000186,0.342813,0.000186,0.001022,0.196358,2.487136,0.138742,0.371063,0.002137,1.144692,0.080383,0.423382,0.001208,0.685812,0.004089,0.004832,0,0.115975,0,0.042282,0.487317,3.82958,0.409721,1.562591,0.000929,1.118208,0.020909,0.25165,0.083636,10.892976,0.002044,0.028715,0.000186,0.396897,0.000279,0.001394,0.771771,3.45257,0.5585,1.262618,0.003717,1.023142,0.08568,0.283432,0.001951,0.880032,0.001951,0.002974,
0.27809,0.056677,1.184813,0.611887,35.921779,15.982573,0,17.424222,0.341791,0.070809,0.75198,0.121937,0.195833,0.000289,9.6e-05,0.496046,0,0.544474,0.072352,3.121656,0.064924,0.128111,0.01447,2.066955,0.002122,0.000579,0,0.557015,0,0.000386,9.6e-05,0.403435,0.246094,2.297807,0.150107,5.709933,0.516594,0.872084,0.187826,1.496628,0.004438,5.964323,1.049877,1.094736,0.009261,0.002219,9.6e-05,0.81372,0.000772,1.825878,0.084218,4.380679,0.150589,0.348448,0.007428,1.265487,0.001061,0.011673,0.000289,1.720919,0.003376,
0.034137,0.198277,0.010188,0.694091,11.510965,35.359077,17.424222,0,0.058136,0.213967,0.143447,0.493179,0.410046,0,0.000344,0.000115,0.266943,0.078776,0.43252,0.151589,2.075226,0.07373,0.114551,0.002179,1.519211,0.00172,0.032106,0.003211,1.903571,0,0.000344,0,0.527005,0.199748,2.395833,0.349846,4.919174,0.040706,0.725836,0.000459,0.768607,0.681575,9.818281,0.000115,0.514392,0.000115,0.001261,0.000115,0.451899,0.250545,1.978448,0.505677,4.658653,0.117533,0.670108,0.002179,1.029128,0.007109,0.356038,0.00172,2.163175,
4.317981,0.503397,0.798582,0.337279,0.688169,0.047115,0.341791,0.058136,0,24.177765,0.822999,0.068342,1.140051,0.485469,0.000116,0.01665,0.004815,0.337879,0.000116,0.03214,0.004177,3.088481,0.265766,0.486281,0.09207,0.534375,0.000116,0.043917,0.003713,0.352731,0.000116,0.573013,0.294368,0.599932,0.000116,0.208041,0.042119,0.74787,0.046586,0.467136,0.072867,0.50647,0.000116,0.424321,0.200499,0.571505,0.000116,0.236179,0.00963,0.370309,5.8e-05,0.176829,0.027035,0.223763,0.010037,0.257122,0.042815,0.13094,5.8e-05,0.082323,0.007948,
0.481042,4.483501,0.033529,0.177833,0.069588,0.524116,0.070809,0.213967,24.177765,0,0.05486,0.628438,1.421996,0.000299,0.622089,0.011978,0.308859,0.000479,0.310416,0.025873,0.037372,0.340541,3.193996,0.079236,0.332396,0.001377,0.604541,0.051686,0.081931,0.00018,0.255975,0.025454,0.300354,0.000599,0.393545,0.053363,0.177757,0.042762,0.487814,0.042942,0.140864,0.00018,0.34689,0.060909,0.26951,0.000359,0.582801,0.06043,0.116309,0.000419,0.380788,0.034737,0.106187,0.015452,0.184704,0.043721,0.136432,0.00012,0.127388,0.029826,0.014314,
0.733587,0.076912,0.645571,0.395942,1.811753,0.343463,0.75198,0.143447,0.822999,0.05486,0,56.838378,0.264556,0.54324,0.000466,0.020649,0.002639,0.239715,0,0.002795,0.000155,0.634065,0.000155,0.163174,0.05791,0.726908,0.012886,0.232728,0.023909,0.431456,0.000311,0.069555,0.298091,1.089585,0.000776,0.415775,0.053874,0.360038,0.000932,0.099519,0.011489,2.007768,0.248099,0.144388,0.122186,1.598824,0.001087,0.754233,0.126844,1.899865,0.000466,0.806554,0.028567,0.099985,0,0.028878,0.014439,0.420899,0.007608,0.197641,0.105884,
0.045951,0.56162,0.040012,0.240632,0.138244,1.323765,0.121937,0.493179,0.068342,0.628438,56.838378,0,0.210115,0.000674,0.674176,0.021578,0.265948,0.00027,0.215779,0.01025,0.004585,0.001483,0.483076,0.032232,0.105597,0.077815,0.516927,0.16615,0.183143,0.000405,0.309643,0.012138,0.324613,0.001483,0.806071,0.061227,0.173298,0.000135,0.325422,0.004316,0.034794,0.181794,1.372357,0.030883,0.070533,0.004316,1.273908,0.086986,0.530278,0.011733,1.514097,0.297371,0.586111,0.000135,0.071612,0.003641,0.013216,0.045044,0.309374,0.061497,0.183952,
0.786871,1.183337,0.271072,0.632947,0.069758,0.081312,0.195833,0.410046,1.140051,1.421996,0.264556,0.210115,0,0.010122,0.113701,0.017106,0.504866,0.061833,0.032564,0.070308,0.215788,0.195073,0.369273,0.055163,0.24749,0.019696,0.176476,0.146501,1.13591,0.078312,0.136849,0.170041,0.321642,0.035939,0.037822,0.060421,0.362681,0.074859,0.053908,0.051005,0.105226,0.139046,0.167138,0.145245,0.496706,0.038763,0.092044,0.058616,0.277072,0.03586,0.044178,0.031466,0.446015,0.028249,0.066384,0.009966,0.137634,0.039313,0.105305,0.073682,0.381671,
2.016257,0.207692,12.035723,11.161511,0.277929,0.000186,0.000289,0,0.485469,0.000299,0.54324,0.000674,0.010122,0,15.874441,21.437257,4.802017,0.822643,0.026571,0.065669,0.007978,0.664866,0.058614,0.529045,0.079119,0.663877,0.016022,0.424607,0.039428,3.330793,0.39019,1.260239,1.22002,0.831215,0.000396,0.000857,0.000264,0.25938,0.00033,0.060922,0.039362,0.322807,0.00033,0.004747,0.00956,1.89715,0.105361,0.509595,0.091844,0.879741,0.000132,0.002374,6.6e-05,0.129492,6.6e-05,0.03956,0.00422,0.169777,0,0.00033,6.6e-05,
0.083684,2.30611,1.373823,5.651603,8.5e-05,0.342813,9.6e-05,0.000344,0.000116,0.622089,0.000466,0.674176,0.113701,15.874441,0,8.808275,15.484088,0.036254,0.648769,0.016609,0.118229,0.057328,0.617694,0.071794,0.422671,0.068758,0.544828,0.112395,0.640495,0.18401,3.765697,0.136148,1.434579,6e-05,0.89749,0.000119,0.000595,0,0.18788,0.002143,0.022384,6e-05,0.300513,6e-05,0.000952,0.072866,2.720153,0.03173,0.477439,0.000417,1.191514,0.000357,0.000893,0,0.135255,0.002679,0.010061,6e-05,0.240505,6e-05,0.000119,
1.036474,0.198558,27.219895,16.560966,0.000678,0.000186,0.496046,0.000115,0.01665,0.011978,0.020649,0.021578,0.017106,21.437257,8.808275,0,8.319767,0.181411,0.040087,1.07379,0.016442,0.438648,0.059927,1.205738,0.105449,0.134394,0.005436,0.918198,0.040902,1.328581,0.203017,4.40061,1.635281,0.004348,0.000679,0.94456,0.000408,0.019568,0.01454,0.43362,0.000679,0.009512,0.002718,0.409432,0.000951,0.555104,0.043756,2.047159,0.173122,0.004077,0.000136,0.741135,0,0.012366,0.001359,0.313495,0.000136,0.000272,0,0.165784,0,
0.07355,1.341144,1.045943,12.455337,0,0.001022,0,0.266943,0.004815,0.308859,0.002639,0.265948,0.504866,4.802017,15.484088,8.319767,0,0.014388,0.149771,0.040917,0.495176,0.044742,0.330036,0.033372,0.703795,0.015019,0.563956,0.041969,0.794366,0.089308,2.469249,0.048882,2.236557,7e-05,0.073657,7e-05,0.733202,0.00014,0.034916,3.5e-05,0.133032,0.000105,0.0173,0,0.04032,0.01158,1.08517,0.020529,2.26249,0.000772,0.103766,0.000351,1.524024,0.000491,0.015686,0.00014,0.1763,0.000175,0.047268,7e-05,0.185038,
0.324368,0.000141,0.001358,0.003499,2.846677,0.196358,0.544474,0.078776,0.337879,0.000479,0.239715,0.00027,0.061833,0.822643,0.036254,0.181411,0.014388,0,23.496083,40.922701,10.291826,0.775254,0.061583,0.435109,0.107434,0.500433,0.002398,0.352807,0.00988,0.292855,9.6e-05,0.002014,0.081631,1.050363,0.044125,0.368538,0.079712,0.78734,0.000959,0.247195,0.220816,1.035015,0.001247,0.011511,0.060432,0.708395,0.000192,0.001151,0.000384,1.272426,0.022062,0.335924,0.014101,0.661776,9.6e-05,0.184749,0.034437,0.418802,9.6e-05,0.003549,0.001918,
0.00014,0.285635,0,0.000382,0.101204,2.487136,0.072352,0.43252,0.000116,0.310416,0,0.215779,0.032564,0.026571,0.648769,0.040087,0.149771,23.496083,0,15.426733,33.45378,0.091276,0.730306,0.074846,0.529594,0.124232,0.563799,0.154017,0.897101,9.6e-05,0.270274,0,0.008455,0.053805,0.870967,0.02623,0.435243,0.000192,0.532092,0.012394,0.303613,0.000288,1.337629,0.000384,0.033244,0.000192,0.76009,0.000192,0.001537,0.073021,1.394892,0.069754,0.417565,0.000769,0.976175,0.105112,0.294294,0.000288,0.636916,0.000384,0.001441,
0.025217,0.006558,0.261069,0.005535,0.487542,0.138742,3.121656,0.151589,0.03214,0.025873,0.002795,0.01025,0.070308,0.065669,0.016609,1.07379,0.040917,40.922701,15.426733,0,15.127582,0.286252,0.089835,1.05204,0.184327,0.063413,0.001702,0.626603,0.0103,0.002597,0.000448,0.480521,0.042006,0.345545,0.027138,1.018005,0.083475,0.096104,0.074161,1.042457,0.012002,0.021048,0.005195,0.493508,0.009225,0.009225,0.000537,0.732111,0.000717,0.346978,0.013077,1.236457,0.017824,0.147873,0.003672,0.890822,0.001791,0.002508,9e-05,0.556204,0.001254,
0.004063,0.079161,0,0.112999,0.021444,0.371063,0.064924,2.075226,0.004177,0.037372,0.000155,0.004585,0.215788,0.007978,0.118229,0.016442,0.495176,10.291826,33.45378,15.127582,0,0.054021,0.364129,0.063366,0.715716,0.044676,0.798346,0.091073,1.164525,0.000246,0.021723,0,0.193459,0.011476,0.527094,0.015001,0.962295,0.002705,0.095418,0.00041,0.561523,0.001066,0.104681,0,0.273876,0.000246,0.031642,8.2e-05,0.602428,0.013526,0.971148,0.087384,1.950083,0.03156,0.644235,0.00541,0.99033,0.001312,0.395771,0.000164,0.703092,
0.638696,0.001312,0.026551,0.040275,1.253945,0.002137,0.128111,0.07373,3.088481,0.340541,0.634065,0.001483,0.195073,0.664866,0.057328,0.438648,0.044742,0.775254,0.091276,0.286252,0.054021,0,38.685701,2.473439,1.106179,2.460976,0.170088,1.35386,0.316372,0.193328,0.000469,0.040109,0.323588,0.898794,0.001125,0.082373,0.076938,2.691226,0.46097,0.899262,0.324525,1.293228,0.00506,0.411115,0.140943,0.338207,0.000375,0.019586,0.032237,0.42058,0.000562,0.039265,0.080124,0.746792,0.100928,0.452442,0.159217,0.388156,0.000843,0.097554,0.08406,
0.000467,0.761771,0.000123,0.002163,0.000593,1.144692,0.01447,0.114551,0.265766,3.193996,0.000155,0.483076,0.369273,0.058614,0.617694,0.059927,0.330036,0.061583,0.730306,0.089835,0.364129,38.685701,0,0.751904,2.503268,0.277265,2.478358,0.526904,2.20843,0,0.127899,0.000272,0.163406,0.000272,0.969387,0.02192,0.10308,0.188587,2.203539,0.143479,0.571469,0.000453,1.282522,0.025544,0.169022,9.1e-05,0.491034,0.002808,0.044112,9.1e-05,0.696016,0.004982,0.190037,0.046739,0.975727,0.106069,0.566034,9.1e-05,0.566759,0.004982,0.053714,
0.12632,0.016628,0.576476,0.007508,0.508308,0.080383,2.066955,0.002179,0.486281,0.079236,0.163174,0.032232,0.055163,0.529045,0.071794,1.205738,0.033372,0.435109,0.074846,1.05204,0.063366,2.473439,0.751904,0,17.923045,1.164262,0.14894,4.72584,0.299978,0.078926,0.010543,0.390087,0.443617,0.374419,0.066519,1.660885,0.002854,1.759732,0.377447,3.215817,0.461383,1.177718,0.232701,1.24214,0.003786,0.150804,0.006757,0.606945,0.000466,0.27295,0.018814,1.274118,0.001165,0.706782,0.121389,3.081614,0.343314,0.042812,0.016193,0.551493,0.003029,
0.00976,0.107218,0,0.250748,0.049246,0.423382,0.002122,1.519211,0.09207,0.332396,0.05791,0.105597,0.24749,0.079119,0.422671,0.105449,0.703795,0.107434,0.529594,0.184327,0.715716,1.106179,2.503268,17.923045,0,0.340811,2.029914,0.61732,4.718199,0.003859,0.105885,4.8e-05,0.834976,0.029088,0.617464,0.001302,1.766961,0.206851,0.985145,0.285384,2.285052,0.083261,1.418383,0.000289,1.148387,0.0096,0.06932,0.000145,0.475496,0.040907,0.634927,0.002219,1.544626,0.130873,0.928319,0.536567,3.036767,0.003377,0.336277,0.000289,0.634203,
0.143832,9.4e-05,0.000741,0.003054,0.660622,0.001208,0.000579,0.00172,0.534375,0.001377,0.726908,0.077815,0.019696,0.663877,0.068758,0.134394,0.015019,0.500433,0.124232,0.063413,0.044676,2.460976,0.277265,1.164262,0.340811,0,27.244097,39.595443,12.868484,0.076434,0.000118,0,0.028736,0.344601,0.00106,0.000589,0.004593,0.682254,0.00318,1.769879,0.560831,0.772349,0.387941,17.450524,6.798629,0.336828,0.000589,0.000353,0.001413,0.324227,0.000236,0.000589,0.001531,0.162525,0.000236,0.034978,0.007891,0.241197,0.021435,0.01531,0.043222,
0,0.200806,0,6.4e-05,0,0.685812,0,0.032106,0.000116,0.604541,0.012886,0.516927,0.176476,0.016022,0.544828,0.005436,0.563956,0.002398,0.563799,0.001702,0.798346,0.170088,2.478358,0.14894,2.029914,27.244097,0,12.677657,35.563093,0,0.238839,0,0.029786,0,1.481721,0,0.014243,6.8e-05,0.863191,0.296358,2.721043,0.018146,1.320875,1.113671,4.087042,0,0.648523,0,0.003287,0,1.610248,6.8e-05,0.083744,0,0.915505,0.025678,0.528692,0.004656,0.676049,0.000753,0.097165,
0.030121,0.01602,0.136647,0.001527,0.006103,0.004089,0.557015,0.003211,0.043917,0.051686,0.232728,0.16615,0.146501,0.424607,0.112395,0.918198,0.041969,0.352807,0.154017,0.626603,0.091073,1.35386,0.526904,4.72584,0.61732,39.595443,12.677657,0,30.574631,0.000416,0.001248,0.121855,0.015596,0.00104,0.002079,0.360575,0.002911,0.009981,0.016636,3.06551,0.034519,0.530881,0.354545,31.949764,15.287419,0.003743,0.001871,0.255147,0.000832,0.001871,0.000416,0.286547,0.000624,0.00707,0.009981,0.440217,0.00104,0.042005,0.008942,0.247245,0.143481,
0.000934,0.027355,0,0.127696,8.5e-05,0.004832,0,1.903571,0.003713,0.081931,0.023909,0.183143,1.13591,0.039428,0.640495,0.040902,0.794366,0.00988,0.897101,0.0103,1.164525,0.316372,2.20843,0.299978,4.718199,12.868484,35.563093,30.574631,0,0,0.003064,0,0.40868,0,0.017774,0,2.985421,0.000981,0.065212,0.011032,3.8322,0.025006,1.360141,2.418859,18.531553,0,0.005026,0,0.701399,0,0.020471,0.000123,3.409178,0.000368,0.150527,0.000858,2.171984,0.011768,0.703728,0.010419,0.590833,
1.119411,0.059956,2.130663,1.292935,0.172403,0,0.000386,0,0.352731,0.00018,0.431456,0.000405,0.078312,3.330793,0.18401,1.328581,0.089308,0.292855,9.6e-05,0.002597,0.000246,0.193328,0,0.078926,0.003859,0.076434,0,0.000416,0,0,13.60931,16.415611,1.155098,1.266654,0.034573,0.296014,0.090674,0.239388,0.025405,0.221536,0.04144,0.359183,0.03114,0.116039,0.093542,6.546163,0.458622,2.581654,0.953353,0.536332,4e-05,0.002262,8.1e-05,0.066966,0,0.038612,0.003312,0.069995,0.000283,0.000283,8.1e-05,
0.056038,1.006045,0.042112,0.478019,0,0.115975,9.6e-05,0.000344,0.000116,0.255975,0.000311,0.309643,0.136849,0.39019,3.765697,0.203017,2.469249,9.6e-05,0.270274,0.000448,0.021723,0.000469,0.127899,0.010543,0.105885,0.000118,0.238839,0.001248,0.003064,13.60931,0,5.784672,1.428293,0.075878,1.066285,0.048902,0.311759,0.014351,0.175491,0.02302,0.116405,0.018727,0.238533,0.012331,0.062369,0.575921,7.487816,0.313779,3.487342,0.000253,0.536362,0.000589,0.004629,4.2e-05,0.032447,0.009174,0.031984,0,0.055425,8.4e-05,0.000295,
1.075187,0.064968,5.159075,1.065537,0.000424,0,0.403435,0,0.573013,0.025454,0.069555,0.012138,0.170041,1.260239,0.136148,4.40061,0.048882,0.002014,0,0.480521,0,0.040109,0.000272,0.390087,4.8e-05,0,0,0.121855,0,16.415611,5.784672,0,2.230691,0.351882,0.016701,2.260424,0.154441,0.256283,0.020837,0.667397,0.056267,0.269862,0.021539,0.780008,0.317466,2.577578,0.154207,11.271062,0.911193,0.001795,0,0.983926,7.8e-05,0.001171,0,0.361403,7.8e-05,0.000156,0,0.194319,7.8e-05,
0.67937,0.800602,1.418466,3.062807,0.093491,0.042282,0.246094,0.527005,0.294368,0.300354,0.298091,0.324613,0.321642,1.22002,1.434579,1.635281,2.236557,0.081631,0.008455,0.042006,0.193459,0.323588,0.163406,0.443617,0.834976,0.028736,0.029786,0.015596,0.40868,1.155098,1.428293,2.230691,0,0.419831,0.433759,0.853779,1.376727,0.208924,0.21917,0.275355,0.497593,0.306375,0.304581,0.305714,0.90581,0.430124,0.350473,0.569076,1.399673,0.451134,0.169264,0.517896,0.837302,0.059065,0.011379,0.033994,0.262465,0.027479,0.018603,0.037724,0.410199,
0.497293,0.000141,0.012473,0.015652,4.693944,0.487317,2.297807,0.199748,0.599932,0.000599,1.089585,0.001483,0.035939,0.831215,6e-05,0.004348,7e-05,1.050363,0.053805,0.345545,0.011476,0.898794,0.000272,0.374419,0.029088,0.344601,0,0.00104,0,1.266654,0.075878,0.351882,0.419831,0,13.991583,31.915858,12.116657,2.057449,0.296066,0.878163,0.291009,4.943439,0.622868,0.432918,0.309656,2.898791,0.001027,0.009008,0.003635,2.359362,0.038559,0.381796,0.023862,0.928969,0.000158,0.251423,0.033581,0.380374,0,0.002449,0.000553,
9.3e-05,0.371541,6.2e-05,0.00299,0.196983,3.82958,0.150107,2.395833,0.000116,0.393545,0.000776,0.806071,0.037822,0.000396,0.89749,0.000679,0.073657,0.044125,0.870967,0.027138,0.527094,0.001125,0.969387,0.066519,0.617464,0.00106,1.481721,0.002079,0.017774,0.034573,1.066285,0.016701,0.433759,13.991583,0,8.373639,28.470047,0.067554,1.346385,0.089476,0.623366,0.275865,4.699375,0.021698,0.140701,0.00302,2.862216,0.001957,0.089643,0.120121,2.159328,0.077341,0.728891,0.000559,1.013424,0.109664,0.360196,0.000112,0.518903,0.000112,0.000447,
0.079948,0.010539,0.871568,0.011134,2.018483,0.409721,5.709933,0.349846,0.208041,0.053363,0.415775,0.061227,0.060421,0.000857,0.000119,0.94456,7e-05,0.368538,0.02623,1.018005,0.015001,0.082373,0.02192,1.660885,0.001302,0.000589,0,0.360575,0,0.296014,0.048902,2.260424,0.853779,31.915858,8.373639,0,19.459275,1.243753,0.259909,1.523251,0.256174,2.397415,0.441084,1.316696,0.511968,0.05625,0.002515,3.879355,0.011433,0.324162,0.019665,2.735831,0.049848,0.092988,0.003354,1.164866,0.000838,0.000534,0,0.46677,0.00061,
0.008032,0.036489,6.2e-05,0.586818,0.361164,1.562591,0.516594,4.919174,0.042119,0.177757,0.053874,0.173298,0.362681,0.000264,0.000595,0.000408,0.733202,0.079712,0.435243,0.083475,0.962295,0.076938,0.10308,0.002854,1.766961,0.004593,0.014243,0.002911,2.985421,0.090674,0.311759,0.154441,1.376727,12.116657,28.470047,19.459275,0,0.224397,0.822133,0.199589,1.144639,0.563566,2.871848,0.087905,0.765495,0.004868,0.010298,0.002528,3.0925,0.108501,0.498504,0.318574,2.866325,0.042595,0.095207,0.003464,1.447392,0.000374,0.006459,0.000187,0.716441,
0.263567,9.4e-05,0.271628,0.077878,1.773102,0.000929,0.872084,0.040706,0.74787,0.042762,0.360038,0.000135,0.074859,0.25938,0,0.019568,0.00014,0.78734,0.000192,0.096104,0.002705,2.691226,0.188587,1.759732,0.206851,0.682254,6.8e-05,0.009981,0.000981,0.239388,0.014351,0.256283,0.208924,2.057449,0.067554,1.243753,0.224397,0,17.634677,2.075154,0.524647,4.971507,0.643789,0.93684,0.454347,0.318595,0,0.008844,0.000628,0.64316,4.5e-05,0.08462,0.003771,3.529593,0.167041,0.975582,0.149578,1.322234,0.001122,0.909861,0.194964,
9.3e-05,0.143614,0.00284,0.060699,0.00339,1.118208,0.187826,0.725836,0.046586,0.487814,0.000932,0.325422,0.053908,0.00033,0.18788,0.01454,0.034916,0.000959,0.532092,0.074161,0.095418,0.46097,2.203539,0.377447,0.985145,0.00318,0.863191,0.016636,0.065212,0.025405,0.175491,0.020837,0.21917,0.296066,1.346385,0.259909,0.822133,17.634677,0,0.413957,1.038682,0.586685,4.127466,0.273855,0.600415,0.000295,0.215492,0.002362,0.013582,0.001329,0.565968,0.041435,0.068501,0.371685,2.729647,0.193544,0.372719,0.005905,1.110726,0.2804,0.293884,
0.148268,0.005996,0.61266,0.004963,0.340991,0.020909,1.496628,0.000459,0.467136,0.042942,0.099519,0.004316,0.051005,0.060922,0.002143,0.43362,3.5e-05,0.247195,0.012394,1.042457,0.00041,0.899262,0.143479,3.215817,0.285384,1.769879,0.296358,3.06551,0.011032,0.221536,0.02302,0.667397,0.275355,0.878163,0.089476,1.523251,0.199589,2.075154,0.413957,0,12.931524,1.29386,0.334224,5.815294,1.868194,0.20148,0.00193,0.708204,0.000193,0.216244,0.0055,0.923644,0.000482,0.604859,0.053168,2.258321,0.159248,0.04873,0.002863,0.713961,0.001158,
0.013122,0.043609,6.2e-05,0.33378,0.156468,0.25165,0.004438,0.768607,0.072867,0.140864,0.011489,0.034794,0.105226,0.039362,0.022384,0.000679,0.133032,0.220816,0.303613,0.012002,0.561523,0.324525,0.571469,0.461383,2.285052,0.560831,2.721043,0.034519,3.8322,0.04144,0.116405,0.056267,0.497593,0.291009,0.623366,0.256174,1.144639,0.524647,1.038682,12.931524,0,0.389004,0.928876,1.197614,7.316623,0.072138,0.056145,0.000524,0.311885,0.268662,0.373948,0.004382,0.759132,0.188097,0.426684,0.308851,1.563846,0.021649,0.176224,0.00176,0.744,
0.225554,4.7e-05,0.010929,0.009289,12.169045,0.083636,5.964323,0.681575,0.50647,0.00018,2.007768,0.181794,0.139046,0.322807,6e-05,0.009512,0.000105,1.035015,0.000288,0.021048,0.001066,1.293228,0.000453,1.177718,0.083261,0.772349,0.018146,0.530881,0.025006,0.359183,0.018727,0.269862,0.306375,4.943439,0.275865,2.397415,0.563566,4.971507,0.586685,1.29386,0.389004,0,28.579806,1.644621,1.477696,0.501456,9.7e-05,0.006305,0.001358,2.323091,0.000485,0.126382,0.006402,1.702817,0.000388,0.832592,0.129098,2.382451,0.054025,1.179053,0.684968,
9.3e-05,0.166706,0.000432,0.00579,0.094762,10.892976,1.049877,9.818281,0.000116,0.34689,0.248099,1.372357,0.167138,0.00033,0.300513,0.002718,0.0173,0.001247,1.337629,0.005195,0.104681,0.00506,1.282522,0.232701,1.418383,0.387941,1.320875,0.354545,1.360141,0.03114,0.238533,0.021539,0.304581,0.622868,4.699375,0.441084,2.871848,0.643789,4.127466,0.334224,0.928876,28.579806,0,0.403913,1.28699,0.000219,0.381287,0.000657,0.00416,0.005328,2.214735,0.063353,0.200205,0.012481,2.005334,0.308372,0.822643,0.326035,2.392606,0.298738,1.149846,
0.140516,0.0126,0.423774,0.001718,0.04789,0.002044,1.094736,0.000115,0.424321,0.060909,0.144388,0.030883,0.145245,0.004747,6e-05,0.409432,0,0.011511,0.000384,0.493508,0,0.411115,0.025544,1.24214,0.000289,17.450524,1.113671,31.949764,2.418859,0.116039,0.012331,0.780008,0.305714,0.432918,0.021698,1.316696,0.087905,0.93684,0.273855,5.815294,1.197614,1.644621,0.403913,0,43.916187,0.032116,0.000205,0.560642,0.000103,0.013852,0,0.461729,0,0.030474,0.000718,0.668173,0.00041,0.037657,0.000821,0.938439,0.069567,
0.08331,0.056771,0.000247,0.506841,0.063994,0.028715,0.009261,0.514392,0.200499,0.26951,0.122186,0.070533,0.496706,0.00956,0.000952,0.000951,0.04032,0.060432,0.033244,0.009225,0.273876,0.140943,0.169022,0.003786,1.148387,6.798629,4.087042,15.287419,18.531553,0.093542,0.062369,0.317466,0.90581,0.309656,0.140701,0.511968,0.765495,0.454347,0.600415,1.868194,7.316623,1.477696,1.28699,43.916187,0,0.051709,0.002062,0.002062,0.314379,0.045374,0.001768,0.00442,0.187832,0.015763,0.008986,0.00442,1.19579,0.047437,0.012227,0.165587,1.558784,
0.86397,0.065905,0.748196,0.529619,0.563995,0.000186,0.002219,0.000115,0.571505,0.000359,1.598824,0.004316,0.038763,1.89715,0.072866,0.555104,0.01158,0.708395,0.000192,0.009225,0.000246,0.338207,9.1e-05,0.150804,0.0096,0.336828,0,0.003743,0,6.546163,0.575921,2.577578,0.430124,2.898791,0.00302,0.05625,0.004868,0.318595,0.000295,0.20148,0.072138,0.501456,0.000219,0.032116,0.051709,0,10.956917,25.313949,8.832621,2.600428,0.046583,0.718719,0.054049,0.153418,0.004101,0.276499,0.049842,0.164143,0.00205,0.080337,0.032177,
0.026338,0.946136,0.00599,0.140867,8.5e-05,0.396897,9.6e-05,0.001261,0.000116,0.582801,0.001087,1.273908,0.092044,0.105361,2.720153,0.043756,1.08517,0.000192,0.76009,0.000537,0.031642,0.000375,0.491034,0.006757,0.06932,0.000589,0.648523,0.001871,0.005026,0.458622,7.487816,0.154207,0.350473,0.001027,2.862216,0.002515,0.010298,0,0.215492,0.00193,0.056145,9.7e-05,0.381287,0.000205,0.002062,10.956917,0,5.637509,18.744445,0.131929,2.620833,0.092405,0.968351,0.007112,0.119062,0.042565,0.245019,0.016776,0.201477,0.009773,0.064227,
0.565566,0.047403,2.299543,0.762425,0.001356,0.000279,0.81372,0.000115,0.236179,0.06043,0.754233,0.086986,0.058616,0.509595,0.03173,2.047159,0.020529,0.001151,0.000192,0.732111,8.2e-05,0.019586,0.002808,0.606945,0.000145,0.000353,0,0.255147,0,2.581654,0.313779,11.271062,0.569076,0.009008,0.001957,3.879355,0.002528,0.008844,0.002362,0.708204,0.000524,0.006305,0.000657,0.560642,0.002062,25.313949,5.637509,0,13.945647,0.662578,0.028569,3.415722,0.081861,0.078381,0.006776,0.469281,0.053017,0.072521,0.001557,0.324696,0.074536,
0.068927,0.371072,0.024699,1.108802,0.000254,0.001394,0.000772,0.451899,0.00963,0.116309,0.126844,0.530278,0.277072,0.091844,0.477439,0.173122,2.26249,0.000384,0.001537,0.000717,0.602428,0.032237,0.044112,0.000466,0.475496,0.001413,0.003287,0.000832,0.701399,0.953353,3.487342,0.911193,1.399673,0.003635,0.089643,0.011433,3.0925,0.000628,0.013582,0.000193,0.311885,0.001358,0.00416,0.000103,0.314379,8.832621,18.744445,13.945647,0,0.152215,0.682579,0.415718,2.211488,0.011491,0.04128,0.055025,0.362328,0.024883,0.051048,0.016839,0.276276,
0.483563,0.000234,0.008892,0.03563,3.994417,0.771771,1.825878,0.250545,0.370309,0.000419,1.899865,0.011733,0.03586,0.879741,0.000417,0.004077,0.000772,1.272426,0.073021,0.346978,0.013526,0.42058,9.1e-05,0.27295,0.040907,0.324227,0,0.001871,0,0.536332,0.000253,0.001795,0.451134,2.359362,0.120121,0.324162,0.108501,0.64316,0.001329,0.216244,0.268662,2.323091,0.005328,0.013852,0.045374,2.600428,0.131929,0.662578,0.152215,0,9.612709,24.400553,5.140068,0.396521,0.018617,0.502355,0.106257,1.572808,0.022214,0.658541,0.238907,
9.3e-05,0.512203,0,0.001654,0.111968,3.45257,0.084218,1.978448,5.8e-05,0.380788,0.000466,1.514097,0.044178,0.000132,1.191514,0.000136,0.103766,0.022062,1.394892,0.013077,0.971148,0.000562,0.696016,0.018814,0.634927,0.000236,1.610248,0.000416,0.020471,4e-05,0.536362,0,0.169264,0.038559,2.159328,0.019665,0.498504,4.5e-05,0.565968,0.0055,0.373948,0.000485,2.214735,0,0.001768,0.046583,2.620833,0.028569,0.682579,9.612709,0,6.74656,19.373137,0.01514,0.802516,0.140546,0.938586,0.086923,1.797671,0.036022,0.496552,
0.109975,0.016535,1.041312,0.019406,1.93135,0.5585,4.380679,0.505677,0.176829,0.034737,0.806554,0.297371,0.031466,0.002374,0.000357,0.741135,0.000351,0.335924,0.069754,1.236457,0.087384,0.039265,0.004982,1.274118,0.002219,0.000589,6.8e-05,0.286547,0.000123,0.002262,0.000589,0.983926,0.517896,0.381796,0.077341,2.735831,0.318574,0.08462,0.041435,0.923644,0.004382,0.126382,0.063353,0.461729,0.00442,0.718719,0.092405,3.415722,0.415718,24.400553,6.74656,0,11.561124,0.18909,0.027912,0.905488,0.157605,0.585071,0.027973,1.693998,0.672077,
0.005884,0.074851,0,0.220908,0.103323,1.262618,0.150589,4.658653,0.027035,0.106187,0.028567,0.586111,0.446015,6.6e-05,0.000893,0,1.524024,0.014101,0.417565,0.017824,1.950083,0.080124,0.190037,0.001165,1.544626,0.001531,0.083744,0.000624,3.409178,8.1e-05,0.004629,7.8e-05,0.837302,0.023862,0.728891,0.049848,2.866325,0.003771,0.068501,0.000482,0.759132,0.006402,0.200205,0,0.187832,0.054049,0.968351,0.081861,2.211488,5.140068,19.373137,11.561124,0,0.043198,0.702594,0.227527,1.251589,0.083552,1.398079,0.046588,1.526141,
0.064397,0,0.042112,0.038557,1.120532,0.003717,0.348448,0.117533,0.223763,0.015452,0.099985,0.000135,0.028249,0.129492,0,0.012366,0.000491,0.661776,0.000769,0.147873,0.03156,0.746792,0.046739,0.706782,0.130873,0.162525,0,0.00707,0.000368,0.066966,4.2e-05,0.001171,0.059065,0.928969,0.000559,0.092988,0.042595,3.529593,0.371685,0.604859,0.188097,1.702817,0.012481,0.030474,0.015763,0.153418,0.007112,0.078381,0.011491,0.396521,0.01514,0.18909,0.043198,0,14.214694,2.738552,1.091224,0.629243,0.037461,0.375097,0.235747,
0,0.055366,6.2e-05,0.006808,0.000254,1.023142,0.007428,0.670108,0.010037,0.184704,0,0.071612,0.066384,6.6e-05,0.135255,0.001359,0.015686,9.6e-05,0.976175,0.003672,0.644235,0.100928,0.975727,0.121389,0.928319,0.000236,0.915505,0.009981,0.150527,0,0.032447,0,0.011379,0.000158,1.013424,0.003354,0.095207,0.167041,2.729647,0.053168,0.426684,0.000388,2.005334,0.000718,0.008986,0.004101,0.119062,0.006776,0.04128,0.018617,0.802516,0.027912,0.702594,14.214694,0,0.892903,3.195698,0.03512,1.228004,0.067431,0.403521,
0.084945,0.006464,0.287373,0.005472,0.330481,0.08568,1.265487,0.002179,0.257122,0.043721,0.028878,0.003641,0.009966,0.03956,0.002679,0.313495,0.00014,0.184749,0.105112,0.890822,0.00541,0.452442,0.106069,3.081614,0.536567,0.034978,0.025678,0.440217,0.000858,0.038612,0.009174,0.361403,0.033994,0.251423,0.109664,1.164866,0.003464,0.975582,0.193544,2.258321,0.308851,0.832592,0.308372,0.668173,0.00442,0.276499,0.042565,0.469281,0.055025,0.502355,0.140546,0.905488,0.227527,2.738552,0.892903,0,12.984714,0.089148,0.030585,0.639125,0.136937,
0.010974,0.034428,0,0.159955,0.04238,0.283432,0.001061,1.029128,0.042815,0.136432,0.014439,0.013216,0.137634,0.00422,0.010061,0.000136,0.1763,0.034437,0.294294,0.001791,0.99033,0.159217,0.566034,0.343314,3.036767,0.007891,0.528692,0.00104,2.171984,0.003312,0.031984,7.8e-05,0.262465,0.033581,0.360196,0.000838,1.447392,0.149578,0.372719,0.159248,1.563846,0.129098,0.822643,0.00041,1.19579,0.049842,0.245019,0.053017,0.362328,0.106257,0.938586,0.157605,1.251589,1.091224,3.195698,12.984714,0,0.030223,0.239725,0.053748,0.968146,
0.164659,0.000141,0.000741,0.003881,0.976185,0.001951,0.011673,0.007109,0.13094,0.00012,0.420899,0.045044,0.039313,0.169777,6e-05,0.000272,0.000175,0.418802,0.000288,0.002508,0.001312,0.388156,9.1e-05,0.042812,0.003377,0.241197,0.004656,0.042005,0.011768,0.069995,0,0.000156,0.027479,0.380374,0.000112,0.000534,0.000374,1.322234,0.005905,0.04873,0.021649,2.382451,0.326035,0.037657,0.047437,0.164143,0.016776,0.072521,0.024883,1.572808,0.086923,0.585071,0.083552,0.629243,0.03512,0.089148,0.030223,0,13.93595,21.171295,13.981617,
0,0.172889,0,0.000191,8.5e-05,0.880032,0.000289,0.356038,5.8e-05,0.127388,0.007608,0.309374,0.105305,0,0.240505,0,0.047268,9.6e-05,0.636916,9e-05,0.395771,0.000843,0.566759,0.016193,0.336277,0.021435,0.676049,0.008942,0.703728,0.000283,0.055425,0,0.018603,0,0.518903,0,0.006459,0.001122,1.110726,0.002863,0.176224,0.054025,2.392606,0.000821,0.012227,0.00205,0.201477,0.001557,0.051048,0.022214,1.797671,0.027973,1.398079,0.037461,1.228004,0.030585,0.239725,13.93595,0,5.214689,18.675227,
0.113991,0.018315,0.201112,0.001082,0.012121,0.001951,1.720919,0.00172,0.082323,0.029826,0.197641,0.061497,0.073682,0.00033,6e-05,0.165784,7e-05,0.003549,0.000384,0.556204,0.000164,0.097554,0.004982,0.551493,0.000289,0.01531,0.000753,0.247245,0.010419,0.000283,8.4e-05,0.194319,0.037724,0.002449,0.000112,0.46677,0.000187,0.909861,0.2804,0.713961,0.00176,1.179053,0.298738,0.938439,0.165587,0.080337,0.009773,0.324696,0.016839,0.658541,0.036022,1.693998,0.046588,0.375097,0.067431,0.639125,0.053748,21.171295,5.214689,0,25.64086,
0.018773,0.032039,0,0.175861,0.002797,0.002974,0.003376,2.163175,0.007948,0.014314,0.105884,0.183952,0.381671,6.6e-05,0.000119,0,0.185038,0.001918,0.001441,0.001254,0.703092,0.08406,0.053714,0.003029,0.634203,0.043222,0.097165,0.143481,0.590833,8.1e-05,0.000295,7.8e-05,0.410199,0.000553,0.000447,0.00061,0.716441,0.194964,0.293884,0.001158,0.744,0.684968,1.149846,0.069567,1.558784,0.032177,0.064227,0.074536,0.276276,0.238907,0.496552,0.672077,1.526141,0.235747,0.403521,0.136937,0.968146,13.981617,18.675227,25.64086,0};

// ECM unrestrictied nucleotide frequencies, Kosiol et al. 2007, supplemental material
Vector64f pi = {0.021414, 0.021349, 0.016195, 0.015717, 0.011798, 0.010761, 0.010366,\
	 0.008721, 0.017237, 0.016697, 0.0, 0.0, 0.006441, 0.007415, 0.0, 0.012744, 0.015167, 0.016798,\
	 0.007359, 0.028497, 0.010425, 0.010408, 0.011165, 0.012199, 0.010671, 0.011040,\
	 0.017168, 0.020730, 0.008491, 0.014604, 0.004809, 0.008158, 0.024759, 0.023762,\
	 0.012814, 0.021180, 0.012656, 0.017882, 0.013120, 0.010682, 0.022276, 0.020321,\
	 0.031090, 0.026699, 0.010310, 0.013701, 0.009746, 0.006788, 0.019020, 0.018419,\
	 0.010921, 0.022626, 0.018907, 0.026817, 0.016516, 0.018288, 0.028590, 0.025285,\
	 0.034527, 0.030606, 0.016883, 0.023659, 0.016386, 0.010223};

// nonsynonymous-synonymous bias (\omega) and branch length (t)
float omega = 0.2; // from toycoati, github.com/reedacartwright/toycoati
float t = 0.0133; // from toycoati, github.com/reedacartwright/toycoati

// map codon to amino acid
std::string cod2aa(std::string codon) {
	std::unordered_map<std::string,std::string>::const_iterator it = codon_aa.find(codon);
	return (it == codon_aa.end()) ? "NA" : it->second;
}

// true if codon i and codon j are synonymous, false if non-synonymous
bool syn(std::string i, std::string j) {
	return(cod2aa(i).compare(cod2aa(j)) == 0);
}

// transition-transversion bias function, depending on # of ts and tv (Nts,Ntv)
float k(std::string i, std::string j, int model=0) {
	switch (model) {
		case 0:	return 1; // ECM+F+omega. Assumes ts-tv bias is accounted for
		default:	return 1;
	}

	return 0;
}

bool isStop(std::string codon) {
	std::vector<std::string> stop_cod{"TAA","TAG","TGA"};
	return std::find(std::begin(stop_cod), std::end(stop_cod), codon) != std::end(stop_cod);

}

VectorFst<StdArc> ecm() {
	Matrix64f Q = Matrix64f::Zero();

	float rowSum;
	float d = 0.0;
	std::vector<float>::iterator s_it = s.begin();
	for(int i=0; i<64; i++) {
		rowSum = 0.0;
		for(int j=0; j<64; j++) {
			if(isStop(codon_table[i]) || isStop(codon_table[j])) {
				continue;
			} else if(i==j) {
				s_it++;
				continue;
			} else if(syn(codon_table[i],codon_table[j])) {
				Q(i,j) = *s_it*pi[j]*k(codon_table[i],codon_table[j]);
				s_it++;
			} else if(!syn(codon_table[i],codon_table[j])) {
				Q(i,j) = *s_it*pi[j]*k(codon_table[i],codon_table[j])*omega;
				s_it++;
			} else {
				std::exit(EXIT_FAILURE);
			}
			rowSum += Q(i,j);
		}
		Q(i,i) = -rowSum;
		d += pi[i]*rowSum;
	}

	assert(s_it == s.end());

	// normalize
	Q = Q/d;

	// P matrix

	Q = Q * t;
	Matrix64f P = Q.exp();

	VectorFst<StdArc> ecm;

	// Add state 0 and make it the start state
	ecm.AddState();
	ecm.SetStart(0);

	int r = 1;
	for(int i=0; i<64; i++) {
		for(int j=0; j<64; j++) {
			add_arc(ecm, 0, r, nuc_sym.find(codon_table[i][0])->second, nuc_sym.find(codon_table[j][0])->second, P(i,j));
			add_arc(ecm, r, r+1, nuc_sym.find(codon_table[i][1])->second, nuc_sym.find(codon_table[j][1])->second);
			add_arc(ecm, r+1, 0, nuc_sym.find(codon_table[i][2])->second, nuc_sym.find(codon_table[j][2])->second);
			r = r+2;
		}
	}

	// Set final state
	ecm.SetFinal(0, 0.0);
	return ecm;
}

/*
// Matrix64 qt(FindEigenspace(Q,pi,t));
Matrix64 S = Symmetric(Q,pi,t);

Vector64 rVals;
Matrix64 rVecs;
int nRot = EigenSystem(S, rVals, rVecs);
if(EigenSystem(S,rVals,rVecs) == -1) {
	std::cout << "Eigensystem failed to converge;" << std::endl;
	exit(EXIT_FAILURE);
}

// void jacobi(Matrix64& a, Vector64 d, Matrix64& v);
// int nRot = jacobi(S, rVals, rVecs);

Matrix64 phi_inv = InverseDiagonal(SqrtDiagonal(pi));
// InverseOfMatrix(SqrtDiagonal(pi)).PrintMatrix();
rVecs.Multiply(phi_inv,rVecs);

Matrix64 lVecs = Matrix64(rVecs);
InverseOfMatrix(lVecs);
// lVecs = rVecs^(-1)
Vector64 D;
for(int i=0; i<64; i++) {
	D[i] = exp(rVals[i]);
}

Matrix64 P;
P.Multiply(lVecs,D);
P.Multiply(P,rVals);
*/
