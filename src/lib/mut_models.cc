/*
# Copyright (c) 2020 Juan J. Garcia Mesa <juanjosegarciamesa@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
*/

#include <doctest/doctest.h>
#include <coati/mut_models.hpp>

/* Muse & Gaut Model (1994) P matrix */
void mg94_p(Matrix64f& P) {
	// Yang (1994) estimating the pattern of nucleotide substitution
	double nuc_freqs[4] = {0.308,0.185,0.199,0.308};
	double nuc_q[4][4] = {{-0.818, 0.132, 0.586, 0.1},{0.221, -1.349, 0.231, 0.897},\
						{0.909, 0.215, -1.322, 0.198},{0.1, 0.537, 0.128, -0.765}};
	double omega = 0.2;
	double brlen = 0.0133;	// branch length (t)

	// MG94 model - doi:10.1534/genetics.108.092254
	Matrix64f Q = Matrix64f::Zero();
	double Pi[64];
	double w,rowSum,d = 0.0;
	int x,y = 0;

	// construct transition matrix
	for(int i=0; i<64; i++) {
		Pi[i] = nuc_freqs[cod_table[i].nt[0].sym-1]*\
				nuc_freqs[cod_table[i].nt[1].sym-1]*\
				nuc_freqs[cod_table[i].nt[2].sym-1];
		rowSum = 0.0;
		for(int j=0; j<64; j++) {
			if(i==j) {
				Q(i,j) = 0;
			} else if(cod_distance(cod_table[i],cod_table[j]) > 1) {
				Q(i,j) = 0;
			} else {
				w = (syn(cod_table[i],cod_table[j]) ? 1 : omega);

				for(int k=0; k<3; k++) {	// find 1 nt change
					if(cod_table[i].nt[k] != cod_table[j].nt[k]) {
						x = cod_table[i].nt[k].sym-1;
						y = cod_table[j].nt[k].sym-1;
					}
				}

				Q(i,j) = w*nuc_q[x][y];
			}
			rowSum += Q(i,j);
		}
		Q(i,i) = -rowSum;
		d += Pi[i]*rowSum;
	}

	// normalize
	Q = Q/d;

	// P matrix
	Q = Q * brlen;
	P = Q.exp();

}

/* Create Muse and Gaut codon model FST */
void mg94(VectorFst<StdArc>& mut_fst) {
	Matrix64f P;
	mg94_p(P);

	// Add state 0 and make it the start state
	VectorFst<StdArc> mg94;
	mg94.AddState();
	mg94.SetStart(0);

	// Creat FST
	int r = 1;
	for(int i=0; i<64; i++) {
		for(int j=0; j<64; j++) {
			add_arc(mg94, 0, r, cod_table[i].nt[0].sym, cod_table[j].nt[0].sym, P(i,j));
			add_arc(mg94, r, r+1, cod_table[i].nt[1].sym, cod_table[j].nt[1].sym);
			add_arc(mg94, r+1, 0, cod_table[i].nt[2].sym, cod_table[j].nt[2].sym);
			r = r+2;
		}
	}

	// Set final state & optimize
	mg94.SetFinal(0, 0.0);
	mut_fst = optimize(mg94);
}

/* Create marginal Muse and Gaut codon model FST */
void mg94_marginal(VectorFst<StdArc>& mut_fst) {
	Matrix64f P;
	mg94_p(P);

	// Add state 0 and make it the start state
	VectorFst<StdArc> m_mg94;
	m_mg94.AddState();
	m_mg94.SetStart(0);

	double marg;
	int r = 100;

	for(int i=0; i<64; i++) {
		for(int j=0; j<3; j++) {
			r += 1;
			for(int k=0; k<4; k++) {
				// Marginalization
				marg = 0.0;
				for(int l=0; l<64; l++) {
					marg += (cod_table[l].nt[j] == nuc_table[k] ? P(i,l) : 0.0);
				}

				// Add arc to FST
				add_arc(m_mg94, 0, 0, r, nuc_table[k].sym, marg);
			}
		}
	}

	// Set final state & optimize
	m_mg94.SetFinal(0,0.0);
	marg_mut(mut_fst, m_mg94);
}

/* Create marginal Muse and Gaut codon model P matrix*/
void mg94_marginal_p(Eigen::Tensor<double, 3>& p) {
	Matrix64f P;
	mg94_p(P);

	double marg;

	for(int i=0; i<64; i++) {
		for(int j=0; j<3; j++) {
			for(int k=0; k<4; k++) {
				marg = 0.0;
				for(int l=0; l<64; l++) {
					marg += (cod_table[l].nt[j] == nuc_table[k] ? P(i,l) : 0.0);
				}
				p(i,j,k) = marg;
			}
		}
	}

}

/* Create dna marginal Muse and Gaut codon model FST*/
void dna(VectorFst<StdArc>& mut_fst) {
	Matrix64f P;
	mg94_p(P);

	// Add state 0 and make it the start state
	VectorFst<StdArc> dna;
	dna.AddState();
	dna.SetStart(0);

	Matrix4f dna_p = Matrix4f::Zero();
	double rowsum;

	for(int i=0; i<64; i++) {		// for each codon
		rowsum = 0.0;
		for(int j=0; j<3; j++) {		// for each position in a codon
			for(int k=0; k<4; k++) {		// for each nucleotide (from)
				for(int l=0; l<4; l++) {		// for each nucleotide (to)
					for(int m=0; m<64; m++) {		// sum over all codons
						dna_p(k,l) += (cod_table[m].nt[j] == nuc_table[l] ? \
							cod_table[i].nt[j] == nuc_table[k] ? P(i,m) : 0.0 : 0.0);
					}
				}
			}
		}

	}

	for(int i=0; i<4; i++) {
		dna_p.row(i) /= dna_p.row(i).sum();
		for(int j=0; j<4; j++) {
			add_arc(dna, 0, 0, nuc_table[i].sym, nuc_table[j].sym, dna_p(i,j));
		}
	}

	// Set final state & optimize
	dna.SetFinal(0,0.0);
	mut_fst = optimize(dna);
}

/* Create FST that maps nucleotide to AA position */
void nuc2pos(VectorFst<StdArc> &n2p) {
	// Add state 0 and make it the start state
	n2p.AddState();
	n2p.SetStart(0);

	int s = 1;		// variable to keep track of states
	int c = 101;	// variable to keep track of codons
	// TODO: find more elegant way than 3 nested for loops
	for(int i=1; i<5; i++) {
		for(int j=1; j<5; j++) {
			for(int k=1; k<5; k++) {
				add_arc(n2p, 0, 	s, 		i, c);
				add_arc(n2p, s, 	s+1, 	j, c+1);
				add_arc(n2p, s+1, 	0,		k, c+2);
				s += 2;
				c += 3;
			}
		}
	}

	n2p.SetFinal(0, 0.0);
}

/* Marginal model FST */
void marg_mut(VectorFst<StdArc>& mut_fst, VectorFst<StdArc> marg_pos) {

	VectorFst<StdArc> nuc2pos_raw;
	nuc2pos(nuc2pos_raw);

	// optimize raw FSTs
	VectorFst<StdArc> nuc2cod_fst, cod2pos_fst, marg_pos_fst, nuc2pos_fst;
	marg_pos_fst = optimize(marg_pos);
	nuc2pos_fst = optimize(nuc2pos_raw);

	// sort FSTs
	VectorFst<StdArc> nuc2cod_sort, cod2pos_sort, marg_pos_sort, nuc2pos_sort;
	marg_pos_sort = ArcSortFst<StdArc, ILabelCompare<StdArc>>(marg_pos_fst, ILabelCompare<StdArc>());
	nuc2pos_sort = ArcSortFst<StdArc, OLabelCompare<StdArc>>(nuc2pos_fst, OLabelCompare<StdArc>());

	// compose FSTs
	ComposeFst<StdArc> marg_mut = ComposeFst<StdArc>(nuc2pos_sort, marg_pos_sort);

	// optimize final marginalized mutation FST
	mut_fst = optimize(VectorFst<StdArc>(marg_mut));
}

/* Create affine gap indel model FST*/
void indel(VectorFst<StdArc>& indel_model) {
	double deletion = 0.001, insertion = 0.001;
	double deletion_ext = 1.0-1.0/6.0, insertion_ext = 1.0-1.0/6.0;
	double nuc_freqs[4] = {0.308, 0.185, 0.199, 0.308};

	VectorFst<StdArc> indel_fst;

	// Add state 0 and make it the start state
	indel_fst.AddState();
	indel_fst.SetStart(0);

	// Insertion
	add_arc(indel_fst, 0, 1, 0, 0, insertion);	// 0 as ilabel/olabel is <eps>
	add_arc(indel_fst, 0, 3, 0, 0, 1.0-insertion);

	for(int i=0; i<4; i++) {
		add_arc(indel_fst, 1, 2, 0, nuc_table[i].sym, nuc_freqs[i]);
	}

	add_arc(indel_fst, 1, 2, 0, 5);	// 5 as ilabel/olabel is N
	add_arc(indel_fst, 2, 1, 0, 0, insertion_ext);
	add_arc(indel_fst, 2, 3, 0, 0, 1.0-insertion_ext);

	// Deletion
	add_arc(indel_fst, 3, 4, 0, 0, deletion);
	add_arc(indel_fst, 3, 6, 0, 0, 1.0-deletion);

	for(int i=0; i<4; i++) {
	    add_arc(indel_fst, 4, 5, nuc_table[i].sym);
	}

	add_arc(indel_fst, 4, 7);

	add_arc(indel_fst, 5, 4, 0, 0, deletion_ext);
	add_arc(indel_fst, 5, 6, 0, 0, 1.0-deletion_ext);

	// Matches
	for(int i=0; i<4; i++) {
	    add_arc(indel_fst, 6, 0, nuc_table[i].sym, nuc_table[i].sym);
	    add_arc(indel_fst, 6, 0, nuc_table[i].sym, 5);
	}

	add_arc(indel_fst, 6, 7);

	// Set final state & optimize
	indel_fst.SetFinal(7,0.0);
	indel_model = optimize(indel_fst);
}

/* ECM unrestricted exchangeabilities, Kosiol et al. 2007, supplemental data [61x61]
	in A,C,G,T order */
constexpr double s[64][64] = {{0,0.413957,12.931524,2.075154,1.523251,0.089476,0.199589,0.878163,5.815294,0.334224,1.868194,1.29386,0.667397,0.02302,0.275355,0.221536,3.215817,0.143479,0.285384,0.899262,1.042457,0.012394,0.00041,0.247195,3.06551,0.296358,0.011032,1.769879,0.43362,0.002143,3.5E-05,0.060922,2.258321,0.053168,0.159248,0.604859,0.923644,0.0055,0.000482,0.216244,0.713961,0.002863,0.001158,0.04873,0.708204,0.00193,0.000193,0.20148,0,0.042942,0,0.467136,1.496628,0.020909,0.000459,0.340991,0,0.004316,0.051005,0.099519,0.61266,0.005996,0.004963,0.148268},
{0.413957,0,1.038682,17.634677,0.259909,1.346385,0.822133,0.296066,0.273855,4.127466,0.600415,0.586685,0.020837,0.175491,0.21917,0.025405,0.377447,2.203539,0.985145,0.46097,0.074161,0.532092,0.095418,0.000959,0.016636,0.863191,0.065212,0.00318,0.01454,0.18788,0.034916,0.00033,0.193544,2.729647,0.372719,0.371685,0.041435,0.565968,0.068501,0.001329,0.2804,1.110726,0.293884,0.005905,0.002362,0.215492,0.013582,0.000295,0,0.487814,0,0.046586,0.187826,1.118208,0.725836,0.00339,0,0.325422,0.053908,0.000932,0.00284,0.143614,0.060699,9.3E-05},
{12.931524,1.038682,0,0.524647,0.256174,0.623366,1.144639,0.291009,1.197614,0.928876,7.316623,0.389004,0.056267,0.116405,0.497593,0.04144,0.461383,0.571469,2.285052,0.324525,0.012002,0.303613,0.561523,0.220816,0.034519,2.721043,3.8322,0.560831,0.000679,0.022384,0.133032,0.039362,0.308851,0.426684,1.563846,0.188097,0.004382,0.373948,0.759132,0.268662,0.00176,0.176224,0.744,0.021649,0.000524,0.056145,0.311885,0.072138,0,0.140864,0,0.072867,0.004438,0.25165,0.768607,0.156468,0,0.034794,0.105226,0.011489,6.2E-05,0.043609,0.33378,0.013122},
{2.075154,17.634677,0.524647,0,1.243753,0.067554,0.224397,2.057449,0.93684,0.643789,0.454347,4.971507,0.256283,0.014351,0.208924,0.239388,1.759732,0.188587,0.206851,2.691226,0.096104,0.000192,0.002705,0.78734,0.009981,6.8E-05,0.000981,0.682254,0.019568,0,0.00014,0.25938,0.975582,0.167041,0.149578,3.529593,0.08462,4.5E-05,0.003771,0.64316,0.909861,0.001122,0.194964,1.322234,0.008844,0,0.000628,0.318595,0,0.042762,0,0.74787,0.872084,0.000929,0.040706,1.773102,0,0.000135,0.074859,0.360038,0.271628,9.4E-05,0.077878,0.263567},
{1.523251,0.259909,0.256174,1.243753,0,8.373639,19.459275,31.915858,1.316696,0.441084,0.511968,2.397415,2.260424,0.048902,0.853779,0.296014,1.660885,0.02192,0.001302,0.082373,1.018005,0.02623,0.015001,0.368538,0.360575,0,0,0.000589,0.94456,0.000119,7E-05,0.000857,1.164866,0.003354,0.000838,0.092988,2.735831,0.019665,0.049848,0.324162,0.46677,0,0.00061,0.000534,3.879355,0.002515,0.011433,0.05625,0,0.053363,0,0.208041,5.709933,0.409721,0.349846,2.018483,0,0.061227,0.060421,0.415775,0.871568,0.010539,0.011134,0.079948},
{0.089476,1.346385,0.623366,0.067554,8.373639,0,28.470047,13.991583,0.021698,4.699375,0.140701,0.275865,0.016701,1.066285,0.433759,0.034573,0.066519,0.969387,0.617464,0.001125,0.027138,0.870967,0.527094,0.044125,0.002079,1.481721,0.017774,0.00106,0.000679,0.89749,0.073657,0.000396,0.109664,1.013424,0.360196,0.000559,0.077341,2.159328,0.728891,0.120121,0.000112,0.518903,0.000447,0.000112,0.001957,2.862216,0.089643,0.00302,0,0.393545,0,0.000116,0.150107,3.82958,2.395833,0.196983,0,0.806071,0.037822,0.000776,6.2E-05,0.371541,0.00299,9.3E-05},
{0.199589,0.822133,1.144639,0.224397,19.459275,28.470047,0,12.116657,0.087905,2.871848,0.765495,0.563566,0.154441,0.311759,1.376727,0.090674,0.002854,0.10308,1.766961,0.076938,0.083475,0.435243,0.962295,0.079712,0.002911,0.014243,2.985421,0.004593,0.000408,0.000595,0.733202,0.000264,0.003464,0.095207,1.447392,0.042595,0.318574,0.498504,2.866325,0.108501,0.000187,0.006459,0.716441,0.000374,0.002528,0.010298,3.0925,0.004868,0,0.177757,0,0.042119,0.516594,1.562591,4.919174,0.361164,0,0.173298,0.362681,0.053874,6.2E-05,0.036489,0.586818,0.008032},
{0.878163,0.296066,0.291009,2.057449,31.915858,13.991583,12.116657,0,0.432918,0.622868,0.309656,4.943439,0.351882,0.075878,0.419831,1.266654,0.374419,0.000272,0.029088,0.898794,0.345545,0.053805,0.011476,1.050363,0.00104,0,0,0.344601,0.004348,6E-05,7E-05,0.831215,0.251423,0.000158,0.033581,0.928969,0.381796,0.038559,0.023862,2.359362,0.002449,0,0.000553,0.380374,0.009008,0.001027,0.003635,2.898791,0,0.000599,0,0.599932,2.297807,0.487317,0.199748,4.693944,0,0.001483,0.035939,1.089585,0.012473,0.000141,0.015652,0.497293},
{5.815294,0.273855,1.197614,0.93684,1.316696,0.021698,0.087905,0.432918,0,0.403913,43.916187,1.644621,0.780008,0.012331,0.305714,0.116039,1.24214,0.025544,0.000289,0.411115,0.493508,0.000384,0,0.011511,31.949764,1.113671,2.418859,17.450524,0.409432,6E-05,0,0.004747,0.668173,0.000718,0.00041,0.030474,0.461729,0,0,0.013852,0.938439,0.000821,0.069567,0.037657,0.560642,0.000205,0.000103,0.032116,0,0.060909,0,0.424321,1.094736,0.002044,0.000115,0.04789,0,0.030883,0.145245,0.144388,0.423774,0.0126,0.001718,0.140516},
{0.334224,4.127466,0.928876,0.643789,0.441084,4.699375,2.871848,0.622868,0.403913,0,1.28699,28.579806,0.021539,0.238533,0.304581,0.03114,0.232701,1.282522,1.418383,0.00506,0.005195,1.337629,0.104681,0.001247,0.354545,1.320875,1.360141,0.387941,0.002718,0.300513,0.0173,0.00033,0.308372,2.005334,0.822643,0.012481,0.063353,2.214735,0.200205,0.005328,0.298738,2.392606,1.149846,0.326035,0.000657,0.381287,0.00416,0.000219,0,0.34689,0,0.000116,1.049877,10.892976,9.818281,0.094762,0,1.372357,0.167138,0.248099,0.000432,0.166706,0.00579,9.3E-05},
{1.868194,0.600415,7.316623,0.454347,0.511968,0.140701,0.765495,0.309656,43.916187,1.28699,0,1.477696,0.317466,0.062369,0.90581,0.093542,0.003786,0.169022,1.148387,0.140943,0.009225,0.033244,0.273876,0.060432,15.287419,4.087042,18.531553,6.798629,0.000951,0.000952,0.04032,0.00956,0.00442,0.008986,1.19579,0.015763,0.00442,0.001768,0.187832,0.045374,0.165587,0.012227,1.558784,0.047437,0.002062,0.002062,0.314379,0.051709,0,0.26951,0,0.200499,0.009261,0.028715,0.514392,0.063994,0,0.070533,0.496706,0.122186,0.000247,0.056771,0.506841,0.08331},
{1.29386,0.586685,0.389004,4.971507,2.397415,0.275865,0.563566,4.943439,1.644621,28.579806,1.477696,0,0.269862,0.018727,0.306375,0.359183,1.177718,0.000453,0.083261,1.293228,0.021048,0.000288,0.001066,1.035015,0.530881,0.018146,0.025006,0.772349,0.009512,6E-05,0.000105,0.322807,0.832592,0.000388,0.129098,1.702817,0.126382,0.000485,0.006402,2.323091,1.179053,0.054025,0.684968,2.382451,0.006305,9.7E-05,0.001358,0.501456,0,0.00018,0,0.50647,5.964323,0.083636,0.681575,12.169045,0,0.181794,0.139046,2.007768,0.010929,4.7E-05,0.009289,0.225554},
{0.667397,0.020837,0.056267,0.256283,2.260424,0.016701,0.154441,0.351882,0.780008,0.021539,0.317466,0.269862,0,5.784672,2.230691,16.415611,0.390087,0.000272,4.8E-05,0.040109,0.480521,0,0,0.002014,0.121855,0,0,0,4.40061,0.136148,0.048882,1.260239,0.361403,0,7.8E-05,0.001171,0.983926,0,7.8E-05,0.001795,0.194319,0,7.8E-05,0.000156,11.271062,0.154207,0.911193,2.577578,0,0.025454,0,0.573013,0.403435,0,0,0.000424,0,0.012138,0.170041,0.069555,5.159075,0.064968,1.065537,1.075187},
{0.02302,0.175491,0.116405,0.014351,0.048902,1.066285,0.311759,0.075878,0.012331,0.238533,0.062369,0.018727,5.784672,0,1.428293,13.60931,0.010543,0.127899,0.105885,0.000469,0.000448,0.270274,0.021723,9.6E-05,0.001248,0.238839,0.003064,0.000118,0.203017,3.765697,2.469249,0.39019,0.009174,0.032447,0.031984,4.2E-05,0.000589,0.536362,0.004629,0.000253,8.4E-05,0.055425,0.000295,0,0.313779,7.487816,3.487342,0.575921,0,0.255975,0,0.000116,9.6E-05,0.115975,0.000344,0,0,0.309643,0.136849,0.000311,0.042112,1.006045,0.478019,0.056038},
{0.275355,0.21917,0.497593,0.208924,0.853779,0.433759,1.376727,0.419831,0.305714,0.304581,0.90581,0.306375,2.230691,1.428293,0,1.155098,0.443617,0.163406,0.834976,0.323588,0.042006,0.008455,0.193459,0.081631,0.015596,0.029786,0.40868,0.028736,1.635281,1.434579,2.236557,1.22002,0.033994,0.011379,0.262465,0.059065,0.517896,0.169264,0.837302,0.451134,0.037724,0.018603,0.410199,0.027479,0.569076,0.350473,1.399673,0.430124,0,0.300354,0,0.294368,0.246094,0.042282,0.527005,0.093491,0,0.324613,0.321642,0.298091,1.418466,0.800602,3.062807,0.67937},
{0.221536,0.025405,0.04144,0.239388,0.296014,0.034573,0.090674,1.266654,0.116039,0.03114,0.093542,0.359183,16.415611,13.60931,1.155098,0,0.078926,0,0.003859,0.193328,0.002597,9.6E-05,0.000246,0.292855,0.000416,0,0,0.076434,1.328581,0.18401,0.089308,3.330793,0.038612,0,0.003312,0.066966,0.002262,4E-05,8.1E-05,0.536332,0.000283,0.000283,8.1E-05,0.069995,2.581654,0.458622,0.953353,6.546163,0,0.00018,0,0.352731,0.000386,0,0,0.172403,0,0.000405,0.078312,0.431456,2.130663,0.059956,1.292935,1.119411},
{3.215817,0.377447,0.461383,1.759732,1.660885,0.066519,0.002854,0.374419,1.24214,0.232701,0.003786,1.177718,0.390087,0.010543,0.443617,0.078926,0,0.751904,17.923045,2.473439,1.05204,0.074846,0.063366,0.435109,4.72584,0.14894,0.299978,1.164262,1.205738,0.071794,0.033372,0.529045,3.081614,0.121389,0.343314,0.706782,1.274118,0.018814,0.001165,0.27295,0.551493,0.016193,0.003029,0.042812,0.606945,0.006757,0.000466,0.150804,0,0.079236,0,0.486281,2.066955,0.080383,0.002179,0.508308,0,0.032232,0.055163,0.163174,0.576476,0.016628,0.007508,0.12632},
{0.143479,2.203539,0.571469,0.188587,0.02192,0.969387,0.10308,0.000272,0.025544,1.282522,0.169022,0.000453,0.000272,0.127899,0.163406,0,0.751904,0,2.503268,38.685701,0.089835,0.730306,0.364129,0.061583,0.526904,2.478358,2.20843,0.277265,0.059927,0.617694,0.330036,0.058614,0.106069,0.975727,0.566034,0.046739,0.004982,0.696016,0.190037,9.1E-05,0.004982,0.566759,0.053714,9.1E-05,0.002808,0.491034,0.044112,9.1E-05,0,3.193996,0,0.265766,0.01447,1.144692,0.114551,0.000593,0,0.483076,0.369273,0.000155,0.000123,0.761771,0.002163,0.000467},
{0.285384,0.985145,2.285052,0.206851,0.001302,0.617464,1.766961,0.029088,0.000289,1.418383,1.148387,0.083261,4.8E-05,0.105885,0.834976,0.003859,17.923045,2.503268,0,1.106179,0.184327,0.529594,0.715716,0.107434,0.61732,2.029914,4.718199,0.340811,0.105449,0.422671,0.703795,0.079119,0.536567,0.928319,3.036767,0.130873,0.002219,0.634927,1.544626,0.040907,0.000289,0.336277,0.634203,0.003377,0.000145,0.06932,0.475496,0.0096,0,0.332396,0,0.09207,0.002122,0.423382,1.519211,0.049246,0,0.105597,0.24749,0.05791,0,0.107218,0.250748,0.00976},
{0.899262,0.46097,0.324525,2.691226,0.082373,0.001125,0.076938,0.898794,0.411115,0.00506,0.140943,1.293228,0.040109,0.000469,0.323588,0.193328,2.473439,38.685701,1.106179,0,0.286252,0.091276,0.054021,0.775254,1.35386,0.170088,0.316372,2.460976,0.438648,0.057328,0.044742,0.664866,0.452442,0.100928,0.159217,0.746792,0.039265,0.000562,0.080124,0.42058,0.097554,0.000843,0.08406,0.388156,0.019586,0.000375,0.032237,0.338207,0,0.340541,0,3.088481,0.128111,0.002137,0.07373,1.253945,0,0.001483,0.195073,0.634065,0.026551,0.001312,0.040275,0.638696},
{1.042457,0.074161,0.012002,0.096104,1.018005,0.027138,0.083475,0.345545,0.493508,0.005195,0.009225,0.021048,0.480521,0.000448,0.042006,0.002597,1.05204,0.089835,0.184327,0.286252,0,15.426733,15.127582,40.922701,0.626603,0.001702,0.0103,0.063413,1.07379,0.016609,0.040917,0.065669,0.890822,0.003672,0.001791,0.147873,1.236457,0.013077,0.017824,0.346978,0.556204,9E-05,0.001254,0.002508,0.732111,0.000537,0.000717,0.009225,0,0.025873,0,0.03214,3.121656,0.138742,0.151589,0.487542,0,0.01025,0.070308,0.002795,0.261069,0.006558,0.005535,0.025217},
{0.012394,0.532092,0.303613,0.000192,0.02623,0.870967,0.435243,0.053805,0.000384,1.337629,0.033244,0.000288,0,0.270274,0.008455,9.6E-05,0.074846,0.730306,0.529594,0.091276,15.426733,0,33.45378,23.496083,0.154017,0.563799,0.897101,0.124232,0.040087,0.648769,0.149771,0.026571,0.105112,0.976175,0.294294,0.000769,0.069754,1.394892,0.417565,0.073021,0.000384,0.636916,0.001441,0.000288,0.000192,0.76009,0.001537,0.000192,0,0.310416,0,0.000116,0.072352,2.487136,0.43252,0.101204,0,0.215779,0.032564,0,0,0.285635,0.000382,0.00014},
{0.00041,0.095418,0.561523,0.002705,0.015001,0.527094,0.962295,0.011476,0,0.104681,0.273876,0.001066,0,0.021723,0.193459,0.000246,0.063366,0.364129,0.715716,0.054021,15.127582,33.45378,0,10.291826,0.091073,0.798346,1.164525,0.044676,0.016442,0.118229,0.495176,0.007978,0.00541,0.644235,0.99033,0.03156,0.087384,0.971148,1.950083,0.013526,0.000164,0.395771,0.703092,0.001312,8.2E-05,0.031642,0.602428,0.000246,0,0.037372,0,0.004177,0.064924,0.371063,2.075226,0.021444,0,0.004585,0.215788,0.000155,0,0.079161,0.112999,0.004063},
{0.247195,0.000959,0.220816,0.78734,0.368538,0.044125,0.079712,1.050363,0.011511,0.001247,0.060432,1.035015,0.002014,9.6E-05,0.081631,0.292855,0.435109,0.061583,0.107434,0.775254,40.922701,23.496083,10.291826,0,0.352807,0.002398,0.00988,0.500433,0.181411,0.036254,0.014388,0.822643,0.184749,9.6E-05,0.034437,0.661776,0.335924,0.022062,0.014101,1.272426,0.003549,9.6E-05,0.001918,0.418802,0.001151,0.000192,0.000384,0.708395,0,0.000479,0,0.337879,0.544474,0.196358,0.078776,2.846677,0,0.00027,0.061833,0.239715,0.001358,0.000141,0.003499,0.324368},
{3.06551,0.016636,0.034519,0.009981,0.360575,0.002079,0.002911,0.00104,31.949764,0.354545,15.287419,0.530881,0.121855,0.001248,0.015596,0.000416,4.72584,0.526904,0.61732,1.35386,0.626603,0.154017,0.091073,0.352807,0,12.677657,30.574631,39.595443,0.918198,0.112395,0.041969,0.424607,0.440217,0.009981,0.00104,0.00707,0.286547,0.000416,0.000624,0.001871,0.247245,0.008942,0.143481,0.042005,0.255147,0.001871,0.000832,0.003743,0,0.051686,0,0.043917,0.557015,0.004089,0.003211,0.006103,0,0.16615,0.146501,0.232728,0.136647,0.01602,0.001527,0.030121},
{0.296358,0.863191,2.721043,6.8E-05,0,1.481721,0.014243,0,1.113671,1.320875,4.087042,0.018146,0,0.238839,0.029786,0,0.14894,2.478358,2.029914,0.170088,0.001702,0.563799,0.798346,0.002398,12.677657,0,35.563093,27.244097,0.005436,0.544828,0.563956,0.016022,0.025678,0.915505,0.528692,0,6.8E-05,1.610248,0.083744,0,0.000753,0.676049,0.097165,0.004656,0,0.648523,0.003287,0,0,0.604541,0,0.000116,0,0.685812,0.032106,0,0,0.516927,0.176476,0.012886,0,0.200806,6.4E-05,0},
{0.011032,0.065212,3.8322,0.000981,0,0.017774,2.985421,0,2.418859,1.360141,18.531553,0.025006,0,0.003064,0.40868,0,0.299978,2.20843,4.718199,0.316372,0.0103,0.897101,1.164525,0.00988,30.574631,35.563093,0,12.868484,0.040902,0.640495,0.794366,0.039428,0.000858,0.150527,2.171984,0.000368,0.000123,0.020471,3.409178,0,0.010419,0.703728,0.590833,0.011768,0,0.005026,0.701399,0,0,0.081931,0,0.003713,0,0.004832,1.903571,8.5E-05,0,0.183143,1.13591,0.023909,0,0.027355,0.127696,0.000934},
{1.769879,0.00318,0.560831,0.682254,0.000589,0.00106,0.004593,0.344601,17.450524,0.387941,6.798629,0.772349,0,0.000118,0.028736,0.076434,1.164262,0.277265,0.340811,2.460976,0.063413,0.124232,0.044676,0.500433,39.595443,27.244097,12.868484,0,0.134394,0.068758,0.015019,0.663877,0.034978,0.000236,0.007891,0.162525,0.000589,0.000236,0.001531,0.324227,0.01531,0.021435,0.043222,0.241197,0.000353,0.000589,0.001413,0.336828,0,0.001377,0,0.534375,0.000579,0.001208,0.00172,0.660622,0,0.077815,0.019696,0.726908,0.000741,9.4E-05,0.003054,0.143832},
{0.43362,0.01454,0.000679,0.019568,0.94456,0.000679,0.000408,0.004348,0.409432,0.002718,0.000951,0.009512,4.40061,0.203017,1.635281,1.328581,1.205738,0.059927,0.105449,0.438648,1.07379,0.040087,0.016442,0.181411,0.918198,0.005436,0.040902,0.134394,0,8.808275,8.319767,21.437257,0.313495,0.001359,0.000136,0.012366,0.741135,0.000136,0,0.004077,0.165784,0,0,0.000272,2.047159,0.043756,0.173122,0.555104,0,0.011978,0,0.01665,0.496046,0.000186,0.000115,0.000678,0,0.021578,0.017106,0.020649,27.219895,0.198558,16.560966,1.036474},
{0.002143,0.18788,0.022384,0,0.000119,0.89749,0.000595,6E-05,6E-05,0.300513,0.000952,6E-05,0.136148,3.765697,1.434579,0.18401,0.071794,0.617694,0.422671,0.057328,0.016609,0.648769,0.118229,0.036254,0.112395,0.544828,0.640495,0.068758,8.808275,0,15.484088,15.874441,0.002679,0.135255,0.010061,0,0.000357,1.191514,0.000893,0.000417,6E-05,0.240505,0.000119,6E-05,0.03173,2.720153,0.477439,0.072866,0,0.622089,0,0.000116,9.6E-05,0.342813,0.000344,8.5E-05,0,0.674176,0.113701,0.000466,1.373823,2.30611,5.651603,0.083684},
{3.5E-05,0.034916,0.133032,0.00014,7E-05,0.073657,0.733202,7E-05,0,0.0173,0.04032,0.000105,0.048882,2.469249,2.236557,0.089308,0.033372,0.330036,0.703795,0.044742,0.040917,0.149771,0.495176,0.014388,0.041969,0.563956,0.794366,0.015019,8.319767,15.484088,0,4.802017,0.00014,0.015686,0.1763,0.000491,0.000351,0.103766,1.524024,0.000772,7E-05,0.047268,0.185038,0.000175,0.020529,1.08517,2.26249,0.01158,0,0.308859,0,0.004815,0,0.001022,0.266943,0,0,0.265948,0.504866,0.002639,1.045943,1.341144,12.455337,0.07355},
{0.060922,0.00033,0.039362,0.25938,0.000857,0.000396,0.000264,0.831215,0.004747,0.00033,0.00956,0.322807,1.260239,0.39019,1.22002,3.330793,0.529045,0.058614,0.079119,0.664866,0.065669,0.026571,0.007978,0.822643,0.424607,0.016022,0.039428,0.663877,21.437257,15.874441,4.802017,0,0.03956,6.6E-05,0.00422,0.129492,0.002374,0.000132,6.6E-05,0.879741,0.00033,0,6.6E-05,0.169777,0.509595,0.105361,0.091844,1.89715,0,0.000299,0,0.485469,0.000289,0.000186,0,0.277929,0,0.000674,0.010122,0.54324,12.035723,0.207692,11.161511,2.016257},
{2.258321,0.193544,0.308851,0.975582,1.164866,0.109664,0.003464,0.251423,0.668173,0.308372,0.00442,0.832592,0.361403,0.009174,0.033994,0.038612,3.081614,0.106069,0.536567,0.452442,0.890822,0.105112,0.00541,0.184749,0.440217,0.025678,0.000858,0.034978,0.313495,0.002679,0.00014,0.03956,0,0.892903,12.984714,2.738552,0.905488,0.140546,0.227527,0.502355,0.639125,0.030585,0.136937,0.089148,0.469281,0.042565,0.055025,0.276499,0,0.043721,0,0.257122,1.265487,0.08568,0.002179,0.330481,0,0.003641,0.009966,0.028878,0.287373,0.006464,0.005472,0.084945},
{0.053168,2.729647,0.426684,0.167041,0.003354,1.013424,0.095207,0.000158,0.000718,2.005334,0.008986,0.000388,0,0.032447,0.011379,0,0.121389,0.975727,0.928319,0.100928,0.003672,0.976175,0.644235,9.6E-05,0.009981,0.915505,0.150527,0.000236,0.001359,0.135255,0.015686,6.6E-05,0.892903,0,3.195698,14.214694,0.027912,0.802516,0.702594,0.018617,0.067431,1.228004,0.403521,0.03512,0.006776,0.119062,0.04128,0.004101,0,0.184704,0,0.010037,0.007428,1.023142,0.670108,0.000254,0,0.071612,0.066384,0,6.2E-05,0.055366,0.006808,0},
{0.159248,0.372719,1.563846,0.149578,0.000838,0.360196,1.447392,0.033581,0.00041,0.822643,1.19579,0.129098,7.8E-05,0.031984,0.262465,0.003312,0.343314,0.566034,3.036767,0.159217,0.001791,0.294294,0.99033,0.034437,0.00104,0.528692,2.171984,0.007891,0.000136,0.010061,0.1763,0.00422,12.984714,3.195698,0,1.091224,0.157605,0.938586,1.251589,0.106257,0.053748,0.239725,0.968146,0.030223,0.053017,0.245019,0.362328,0.049842,0,0.136432,0,0.042815,0.001061,0.283432,1.029128,0.04238,0,0.013216,0.137634,0.014439,0,0.034428,0.159955,0.010974},
{0.604859,0.371685,0.188097,3.529593,0.092988,0.000559,0.042595,0.928969,0.030474,0.012481,0.015763,1.702817,0.001171,4.2E-05,0.059065,0.066966,0.706782,0.046739,0.130873,0.746792,0.147873,0.000769,0.03156,0.661776,0.00707,0,0.000368,0.162525,0.012366,0,0.000491,0.129492,2.738552,14.214694,1.091224,0,0.18909,0.01514,0.043198,0.396521,0.375097,0.037461,0.235747,0.629243,0.078381,0.007112,0.011491,0.153418,0,0.015452,0,0.223763,0.348448,0.003717,0.117533,1.120532,0,0.000135,0.028249,0.099985,0.042112,0,0.038557,0.064397},
{0.923644,0.041435,0.004382,0.08462,2.735831,0.077341,0.318574,0.381796,0.461729,0.063353,0.00442,0.126382,0.983926,0.000589,0.517896,0.002262,1.274118,0.004982,0.002219,0.039265,1.236457,0.069754,0.087384,0.335924,0.286547,6.8E-05,0.000123,0.000589,0.741135,0.000357,0.000351,0.002374,0.905488,0.027912,0.157605,0.18909,0,6.74656,11.561124,24.400553,1.693998,0.027973,0.672077,0.585071,3.415722,0.092405,0.415718,0.718719,0,0.034737,0,0.176829,4.380679,0.5585,0.505677,1.93135,0,0.297371,0.031466,0.806554,1.041312,0.016535,0.019406,0.109975},
{0.0055,0.565968,0.373948,4.5E-05,0.019665,2.159328,0.498504,0.038559,0,2.214735,0.001768,0.000485,0,0.536362,0.169264,4E-05,0.018814,0.696016,0.634927,0.000562,0.013077,1.394892,0.971148,0.022062,0.000416,1.610248,0.020471,0.000236,0.000136,1.191514,0.103766,0.000132,0.140546,0.802516,0.938586,0.01514,6.74656,0,19.373137,9.612709,0.036022,1.797671,0.496552,0.086923,0.028569,2.620833,0.682579,0.046583,0,0.380788,0,5.8E-05,0.084218,3.45257,1.978448,0.111968,0,1.514097,0.044178,0.000466,0,0.512203,0.001654,9.3E-05},
{0.000482,0.068501,0.759132,0.003771,0.049848,0.728891,2.866325,0.023862,0,0.200205,0.187832,0.006402,7.8E-05,0.004629,0.837302,8.1E-05,0.001165,0.190037,1.544626,0.080124,0.017824,0.417565,1.950083,0.014101,0.000624,0.083744,3.409178,0.001531,0,0.000893,1.524024,6.6E-05,0.227527,0.702594,1.251589,0.043198,11.561124,19.373137,0,5.140068,0.046588,1.398079,1.526141,0.083552,0.081861,0.968351,2.211488,0.054049,0,0.106187,0,0.027035,0.150589,1.262618,4.658653,0.103323,0,0.586111,0.446015,0.028567,0,0.074851,0.220908,0.005884},
{0.216244,0.001329,0.268662,0.64316,0.324162,0.120121,0.108501,2.359362,0.013852,0.005328,0.045374,2.323091,0.001795,0.000253,0.451134,0.536332,0.27295,9.1E-05,0.040907,0.42058,0.346978,0.073021,0.013526,1.272426,0.001871,0,0,0.324227,0.004077,0.000417,0.000772,0.879741,0.502355,0.018617,0.106257,0.396521,24.400553,9.612709,5.140068,0,0.658541,0.022214,0.238907,1.572808,0.662578,0.131929,0.152215,2.600428,0,0.000419,0,0.370309,1.825878,0.771771,0.250545,3.994417,0,0.011733,0.03586,1.899865,0.008892,0.000234,0.03563,0.483563},
{0.713961,0.2804,0.00176,0.909861,0.46677,0.000112,0.000187,0.002449,0.938439,0.298738,0.165587,1.179053,0.194319,8.4E-05,0.037724,0.000283,0.551493,0.004982,0.000289,0.097554,0.556204,0.000384,0.000164,0.003549,0.247245,0.000753,0.010419,0.01531,0.165784,6E-05,7E-05,0.00033,0.639125,0.067431,0.053748,0.375097,1.693998,0.036022,0.046588,0.658541,0,5.214689,25.64086,21.171295,0.324696,0.009773,0.016839,0.080337,0,0.029826,0,0.082323,1.720919,0.001951,0.00172,0.012121,0,0.061497,0.073682,0.197641,0.201112,0.018315,0.001082,0.113991},
{0.002863,1.110726,0.176224,0.001122,0,0.518903,0.006459,0,0.000821,2.392606,0.012227,0.054025,0,0.055425,0.018603,0.000283,0.016193,0.566759,0.336277,0.000843,9E-05,0.636916,0.395771,9.6E-05,0.008942,0.676049,0.703728,0.021435,0,0.240505,0.047268,0,0.030585,1.228004,0.239725,0.037461,0.027973,1.797671,1.398079,0.022214,5.214689,0,18.675227,13.93595,0.001557,0.201477,0.051048,0.00205,0,0.127388,0,5.8E-05,0.000289,0.880032,0.356038,8.5E-05,0,0.309374,0.105305,0.007608,0,0.172889,0.000191,0},
{0.001158,0.293884,0.744,0.194964,0.00061,0.000447,0.716441,0.000553,0.069567,1.149846,1.558784,0.684968,7.8E-05,0.000295,0.410199,8.1E-05,0.003029,0.053714,0.634203,0.08406,0.001254,0.001441,0.703092,0.001918,0.143481,0.097165,0.590833,0.043222,0,0.000119,0.185038,6.6E-05,0.136937,0.403521,0.968146,0.235747,0.672077,0.496552,1.526141,0.238907,25.64086,18.675227,0,13.981617,0.074536,0.064227,0.276276,0.032177,0,0.014314,0,0.007948,0.003376,0.002974,2.163175,0.002797,0,0.183952,0.381671,0.105884,0,0.032039,0.175861,0.018773},
{0.04873,0.005905,0.021649,1.322234,0.000534,0.000112,0.000374,0.380374,0.037657,0.326035,0.047437,2.382451,0.000156,0,0.027479,0.069995,0.042812,9.1E-05,0.003377,0.388156,0.002508,0.000288,0.001312,0.418802,0.042005,0.004656,0.011768,0.241197,0.000272,6E-05,0.000175,0.169777,0.089148,0.03512,0.030223,0.629243,0.585071,0.086923,0.083552,1.572808,21.171295,13.93595,13.981617,0,0.072521,0.016776,0.024883,0.164143,0,0.00012,0,0.13094,0.011673,0.001951,0.007109,0.976185,0,0.045044,0.039313,0.420899,0.000741,0.000141,0.003881,0.164659},
{0.708204,0.002362,0.000524,0.008844,3.879355,0.001957,0.002528,0.009008,0.560642,0.000657,0.002062,0.006305,11.271062,0.313779,0.569076,2.581654,0.606945,0.002808,0.000145,0.019586,0.732111,0.000192,8.2E-05,0.001151,0.255147,0,0,0.000353,2.047159,0.03173,0.020529,0.509595,0.469281,0.006776,0.053017,0.078381,3.415722,0.028569,0.081861,0.662578,0.324696,0.001557,0.074536,0.072521,0,5.637509,13.945647,25.313949,0,0.06043,0,0.236179,0.81372,0.000279,0.000115,0.001356,0,0.086986,0.058616,0.754233,2.299543,0.047403,0.762425,0.565566},
{0.00193,0.215492,0.056145,0,0.002515,2.862216,0.010298,0.001027,0.000205,0.381287,0.002062,9.7E-05,0.154207,7.487816,0.350473,0.458622,0.006757,0.491034,0.06932,0.000375,0.000537,0.76009,0.031642,0.000192,0.001871,0.648523,0.005026,0.000589,0.043756,2.720153,1.08517,0.105361,0.042565,0.119062,0.245019,0.007112,0.092405,2.620833,0.968351,0.131929,0.009773,0.201477,0.064227,0.016776,5.637509,0,18.744445,10.956917,0,0.582801,0,0.000116,9.6E-05,0.396897,0.001261,8.5E-05,0,1.273908,0.092044,0.001087,0.00599,0.946136,0.140867,0.026338},
{0.000193,0.013582,0.311885,0.000628,0.011433,0.089643,3.0925,0.003635,0.000103,0.00416,0.314379,0.001358,0.911193,3.487342,1.399673,0.953353,0.000466,0.044112,0.475496,0.032237,0.000717,0.001537,0.602428,0.000384,0.000832,0.003287,0.701399,0.001413,0.173122,0.477439,2.26249,0.091844,0.055025,0.04128,0.362328,0.011491,0.415718,0.682579,2.211488,0.152215,0.016839,0.051048,0.276276,0.024883,13.945647,18.744445,0,8.832621,0,0.116309,0,0.00963,0.000772,0.001394,0.451899,0.000254,0,0.530278,0.277072,0.126844,0.024699,0.371072,1.108802,0.068927},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0.20148,0.000295,0.072138,0.318595,0.05625,0.00302,0.004868,2.898791,0.032116,0.000219,0.051709,0.501456,2.577578,0.575921,0.430124,6.546163,0.150804,9.1E-05,0.0096,0.338207,0.009225,0.000192,0.000246,0.708395,0.003743,0,0,0.336828,0.555104,0.072866,0.01158,1.89715,0.276499,0.004101,0.049842,0.153418,0.718719,0.046583,0.054049,2.600428,0.080337,0.00205,0.032177,0.164143,25.313949,10.956917,8.832621,0,0,0.000359,0,0.571505,0.002219,0.000186,0.000115,0.563995,0,0.004316,0.038763,1.598824,0.748196,0.065905,0.529619,0.86397},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0.042942,0.487814,0.140864,0.042762,0.053363,0.393545,0.177757,0.000599,0.060909,0.34689,0.26951,0.00018,0.025454,0.255975,0.300354,0.00018,0.079236,3.193996,0.332396,0.340541,0.025873,0.310416,0.037372,0.000479,0.051686,0.604541,0.081931,0.001377,0.011978,0.622089,0.308859,0.000299,0.043721,0.184704,0.136432,0.015452,0.034737,0.380788,0.106187,0.000419,0.029826,0.127388,0.014314,0.00012,0.06043,0.582801,0.116309,0.000359,0,0,0,24.177765,0.070809,0.524116,0.213967,0.069588,0,0.628438,1.421996,0.05486,0.033529,4.483501,0.177833,0.481042},
{0.467136,0.046586,0.072867,0.74787,0.208041,0.000116,0.042119,0.599932,0.424321,0.000116,0.200499,0.50647,0.573013,0.000116,0.294368,0.352731,0.486281,0.265766,0.09207,3.088481,0.03214,0.000116,0.004177,0.337879,0.043917,0.000116,0.003713,0.534375,0.01665,0.000116,0.004815,0.485469,0.257122,0.010037,0.042815,0.223763,0.176829,5.8E-05,0.027035,0.370309,0.082323,5.8E-05,0.007948,0.13094,0.236179,0.000116,0.00963,0.571505,0,24.177765,0,0,0.341791,0.047115,0.058136,0.688169,0,0.068342,1.140051,0.822999,0.798582,0.503397,0.337279,4.317981},
{1.496628,0.187826,0.004438,0.872084,5.709933,0.150107,0.516594,2.297807,1.094736,1.049877,0.009261,5.964323,0.403435,9.6E-05,0.246094,0.000386,2.066955,0.01447,0.002122,0.128111,3.121656,0.072352,0.064924,0.544474,0.557015,0,0,0.000579,0.496046,9.6E-05,0,0.000289,1.265487,0.007428,0.001061,0.348448,4.380679,0.084218,0.150589,1.825878,1.720919,0.000289,0.003376,0.011673,0.81372,9.6E-05,0.000772,0.002219,0,0.070809,0,0.341791,0,15.982573,17.424222,35.921779,0,0.121937,0.195833,0.75198,1.184813,0.056677,0.611887,0.27809},
{0.020909,1.118208,0.25165,0.000929,0.409721,3.82958,1.562591,0.487317,0.002044,10.892976,0.028715,0.083636,0,0.115975,0.042282,0,0.080383,1.144692,0.423382,0.002137,0.138742,2.487136,0.371063,0.196358,0.004089,0.685812,0.004832,0.001208,0.000186,0.342813,0.001022,0.000186,0.08568,1.023142,0.283432,0.003717,0.5585,3.45257,1.262618,0.771771,0.001951,0.880032,0.002974,0.001951,0.000279,0.396897,0.001394,0.000186,0,0.524116,0,0.047115,15.982573,0,35.359077,23.65509,0,1.323765,0.081312,0.343463,0.011609,0.656004,0.158873,0.030074},
{0.000459,0.725836,0.768607,0.040706,0.349846,2.395833,4.919174,0.199748,0.000115,9.818281,0.514392,0.681575,0,0.000344,0.527005,0,0.002179,0.114551,1.519211,0.07373,0.151589,0.43252,2.075226,0.078776,0.003211,0.032106,1.903571,0.00172,0.000115,0.000344,0.266943,0,0.002179,0.670108,1.029128,0.117533,0.505677,1.978448,4.658653,0.250545,0.00172,0.356038,2.163175,0.007109,0.000115,0.001261,0.451899,0.000115,0,0.213967,0,0.058136,17.424222,35.359077,0,11.510965,0,0.493179,0.410046,0.143447,0.010188,0.198277,0.694091,0.034137},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0.340991,0.00339,0.156468,1.773102,2.018483,0.196983,0.361164,4.693944,0.04789,0.094762,0.063994,12.169045,0.000424,0,0.093491,0.172403,0.508308,0.000593,0.049246,1.253945,0.487542,0.101204,0.021444,2.846677,0.006103,0,8.5E-05,0.660622,0.000678,8.5E-05,0,0.277929,0.330481,0.000254,0.04238,1.120532,1.93135,0.111968,0.103323,3.994417,0.012121,8.5E-05,0.002797,0.976185,0.001356,8.5E-05,0.000254,0.563995,0,0.069588,0,0.688169,35.921779,23.65509,11.510965,0,0,0.138244,0.069758,1.811753,0.249707,0.052602,0.27499,0.773935},
{0.004316,0.325422,0.034794,0.000135,0.061227,0.806071,0.173298,0.001483,0.030883,1.372357,0.070533,0.181794,0.012138,0.309643,0.324613,0.000405,0.032232,0.483076,0.105597,0.001483,0.01025,0.215779,0.004585,0.00027,0.16615,0.516927,0.183143,0.077815,0.021578,0.674176,0.265948,0.000674,0.003641,0.071612,0.013216,0.000135,0.297371,1.514097,0.586111,0.011733,0.061497,0.309374,0.183952,0.045044,0.086986,1.273908,0.530278,0.004316,0,0.628438,0,0.068342,0.121937,1.323765,0.493179,0.138244,0,0,0.210115,56.838378,0.040012,0.56162,0.240632,0.045951},
{0.051005,0.053908,0.105226,0.074859,0.060421,0.037822,0.362681,0.035939,0.145245,0.167138,0.496706,0.139046,0.170041,0.136849,0.321642,0.078312,0.055163,0.369273,0.24749,0.195073,0.070308,0.032564,0.215788,0.061833,0.146501,0.176476,1.13591,0.019696,0.017106,0.113701,0.504866,0.010122,0.009966,0.066384,0.137634,0.028249,0.031466,0.044178,0.446015,0.03586,0.073682,0.105305,0.381671,0.039313,0.058616,0.092044,0.277072,0.038763,0,1.421996,0,1.140051,0.195833,0.081312,0.410046,0.069758,0,0.210115,0,0.264556,0.271072,1.183337,0.632947,0.786871},
{0.099519,0.000932,0.011489,0.360038,0.415775,0.000776,0.053874,1.089585,0.144388,0.248099,0.122186,2.007768,0.069555,0.000311,0.298091,0.431456,0.163174,0.000155,0.05791,0.634065,0.002795,0,0.000155,0.239715,0.232728,0.012886,0.023909,0.726908,0.020649,0.000466,0.002639,0.54324,0.028878,0,0.014439,0.099985,0.806554,0.000466,0.028567,1.899865,0.197641,0.007608,0.105884,0.420899,0.754233,0.001087,0.126844,1.598824,0,0.05486,0,0.822999,0.75198,0.343463,0.143447,1.811753,0,56.838378,0.264556,0,0.645571,0.076912,0.395942,0.733587},
{0.61266,0.00284,6.2E-05,0.271628,0.871568,6.2E-05,6.2E-05,0.012473,0.423774,0.000432,0.000247,0.010929,5.159075,0.042112,1.418466,2.130663,0.576476,0.000123,0,0.026551,0.261069,0,0,0.001358,0.136647,0,0,0.000741,27.219895,1.373823,1.045943,12.035723,0.287373,6.2E-05,0,0.042112,1.041312,0,0,0.008892,0.201112,0,0,0.000741,2.299543,0.00599,0.024699,0.748196,0,0.033529,0,0.798582,1.184813,0.011609,0.010188,0.249707,0,0.040012,0.271072,0.645571,0,0.151858,18.541946,2.395822},
{0.005996,0.143614,0.043609,9.4E-05,0.010539,0.371541,0.036489,0.000141,0.0126,0.166706,0.056771,4.7E-05,0.064968,1.006045,0.800602,0.059956,0.016628,0.761771,0.107218,0.001312,0.006558,0.285635,0.079161,0.000141,0.01602,0.200806,0.027355,9.4E-05,0.198558,2.30611,1.341144,0.207692,0.006464,0.055366,0.034428,0,0.016535,0.512203,0.074851,0.000234,0.018315,0.172889,0.032039,0.000141,0.047403,0.946136,0.371072,0.065905,0,4.483501,0,0.503397,0.056677,0.656004,0.198277,0.052602,0,0.56162,1.183337,0.076912,0.151858,0,0.675537,16.011531},
{0.004963,0.060699,0.33378,0.077878,0.011134,0.00299,0.586818,0.015652,0.001718,0.00579,0.506841,0.009289,1.065537,0.478019,3.062807,1.292935,0.007508,0.002163,0.250748,0.040275,0.005535,0.000382,0.112999,0.003499,0.001527,6.4E-05,0.127696,0.003054,16.560966,5.651603,12.455337,11.161511,0.005472,0.006808,0.159955,0.038557,0.019406,0.001654,0.220908,0.03563,0.001082,0.000191,0.175861,0.003881,0.762425,0.140867,1.108802,0.529619,0,0.177833,0,0.337279,0.611887,0.158873,0.694091,0.27499,0,0.240632,0.632947,0.395942,18.541946,0.675537,0,1.204356},
{0.148268,9.3E-05,0.013122,0.263567,0.079948,9.3E-05,0.008032,0.497293,0.140516,9.3E-05,0.08331,0.225554,1.075187,0.056038,0.67937,1.119411,0.12632,0.000467,0.00976,0.638696,0.025217,0.00014,0.004063,0.324368,0.030121,0,0.000934,0.143832,1.036474,0.083684,0.07355,2.016257,0.084945,0,0.010974,0.064397,0.109975,9.3E-05,0.005884,0.483563,0.113991,0,0.018773,0.164659,0.565566,0.026338,0.068927,0.86397,0,0.481042,0,4.317981,0.27809,0.030074,0.034137,0.773935,0,0.045951,0.786871,0.733587,2.395822,16.011531,1.204356,0}};

/* ECM unrestrictied nucleotide frequencies, Kosiol et al. 2007, supplemental material
	in A,C,G,T nucleotide order*/
Vector64f pi((Vector64f() << 0.031090,0.020321,0.026699,0.022276,0.013120,0.017882,\
	0.010682,0.012656,0.009746,0.013701,0.006788,0.010310,0.012814,0.023762,0.021180,\
	0.024759,0.017168,0.011040,0.020730,0.010671,0.011165,0.010408,0.012199,0.010425,\
	0.004809,0.014604,0.008158,0.008491,0.007359,0.016798,0.028497,0.015167,0.034527,\
	0.025285,0.030606,0.028590,0.016516,0.026817,0.018288,0.018907,0.016386,0.023659,\
	0.010223,0.016883,0.010921,0.018419,0.022626,0.019020,0.000000,0.016697,0.000000,\
	0.017237,0.010366,0.010761,0.008721,0.011798,0.000000,0.007415,0.012744,0.006441,\
	0.016195,0.021349,0.015717,0.021414).finished());

/* nonsynonymous-synonymous bias (\omega) and branch length (t) */
const double omega = 0.2;	// github.com/reedacartwright/toycoati
const double t = 0.0133;	// github.com/reedacartwright/toycoati
const double kappa = 2.5;	// Kosiol et al. 2007, supplemental material

/* compare if codon i and codon j are synonymous */
bool syn(cod c1, cod c2) {
	// return(cod2aa(i).compare(cod2aa(j)) == 0);
	return(c1.subset == c2.subset);
}

TEST_CASE("[mut_models] syn") {
	cod AAA = {{nuc{'A',1,'R'},nuc{'A',1,'R'},nuc{'A',1,'R'}},'K',1};
    cod AAC = {{nuc{'A',1,'R'},nuc{'A',1,'R'},nuc{'C',2,'Y'}},'N',2};
	cod AAG = {{nuc{'A',1,'R'},nuc{'A',1,'R'},nuc{'G',3,'R'}},'K',3};

	CHECK(syn(AAA,AAC) == false);
	CHECK(syn(AAA,AAA) == true);
}

/* calculate number of transitions and transversions between codons i and j*/
void nts_ntv(cod c1, cod c2, int& nts, int& ntv) {
	nts = ntv = 0;
	if(c1 == c2) return;
	for(int i=0; i<3; i++) {
		if(c1.nt[i] == c2.nt[i]) continue;
		((c1.nt[i].group == c2.nt[i].group) ? nts : ntv) += 1;
	}
	return;
}

/* transition-transversion bias function, depending on # of ts and tv (Nts,Ntv) */
double k(cod c1, cod c2, int model) {
	int nts, ntv;
	nts_ntv(c1, c2, nts, ntv);
	switch (model) {
		case 0: return 1;	// ECM+f+omega. Assumes ts-tv bias is accounted for
		case 1: return pow(kappa,nts); // ECM+F+omega+1k(ts)
		case 2: return pow(kappa,ntv); // ECM+F+omega+1k(tv)
		default:	return 1; // ECM+f+omega. Assumes ts-tv bias is accounted for
	}

	return 0;
}

/* Empirical Codon Model P matrix */
void ecm_p(Matrix64f& P) {
	Matrix64f Q = Matrix64f::Zero();

	double rowSum;
	double d = 0.0;

	for(int i=0; i<64; i++) {
		rowSum = 0.0;
		for(int j=0; j<64; j++) {
			// check if codons i or j are stop codons
			if(i==j || cod_table[i].subset == '*' || cod_table[j].subset == '*') {
				continue;
			} else if(syn(cod_table[i],cod_table[j])) {
				Q(i,j) = s[i][j]*pi[j]*k(cod_table[i],cod_table[j],0);
			} else if(!syn(cod_table[i],cod_table[j])) {
				Q(i,j) = s[i][j]*pi[j]*k(cod_table[i],cod_table[j],0)*omega;
			} else {
				exit(EXIT_FAILURE);
			}
			rowSum += Q(i,j);
		}
		Q(i,i) = -rowSum;
		d += pi[i]*rowSum;
	}

	// normalize
	Q = Q/d;

	// P matrix
	Q = Q * t;
	P = Q.exp();
}

/* Empirical Codon Model (Kosiol et al. 2007) FST */
void ecm(VectorFst<StdArc>& mut_fst) {
	Matrix64f P;
	ecm_p(P);

	// Add state 0 and make it the start state
	VectorFst<StdArc> ecm;
	ecm.AddState();
	ecm.SetStart(0);

	int r = 1;
	for(int i=0; i<64; i++) {
		for(int j=0; j<64; j++) {
			add_arc(ecm, 0, r, cod_table[i].nt[0].sym, cod_table[j].nt[0].sym, P(i,j));
			add_arc(ecm, r, r+1, cod_table[i].nt[1].sym, cod_table[j].nt[1].sym);
			add_arc(ecm, r+1, 0, cod_table[i].nt[2].sym, cod_table[j].nt[2].sym);
			r = r+2;
		}
	}

	// Set final state
	ecm.SetFinal(0, 0.0);
	mut_fst = optimize(ecm);
}

/* Marginal Empirical Codon Model */
void ecm_marginal(VectorFst<StdArc>& mut_fst) {
	VectorFst<StdArc> fst;
	fst.AddState();
	fst.SetStart(0);

	// get Empirical Codon Model P matrix
	Matrix64f P;
	ecm_p(P);

	int c = 101; // first codon_pos (AAA1)
	double m;

	// for loop extravaganza
	for(int i=0; i<64; i++) {	// for each codon
		for(int j=0; j<3; j++) {	// for each position in a codon
			for(int k=0; k<4; k++) {	// for each possible nucleotide
				m = 0.0;
				for(int l=0; l<64; l++) {
					m += ((cod_table[l].nt[j] == nuc_table[k]) ? P(i,l) : 0.0);
				}
				add_arc(fst, 0, 0, c, nuc_table[k].sym, m);
			}
			c++;
		}
	}
	fst.SetFinal(0,0.0);
	marg_mut(mut_fst, fst);
}

/* Dynamic Programming implementation of Marginal MG94 model*/
vector<string> dp_mg94_marginal(vector<string> sequences, float& w) {
	unordered_map<char, int> nucs = {{'A',0},{'C',1},{'G',2},{'T',3}};

	// P matrix for marginal Muse and Gaut codon model
	Eigen::Tensor<double, 3> p(64,3,4);

	mg94_marginal_p(p);

	string seq_a = sequences[0];
	string seq_b = sequences[1];
	int m = sequences[0].length();
	int n = sequences[1].length();

	// ensure that length of first sequence (reference) is multiple of 3
	if(m%3 != 0) {
		cout << "Reference coding sequence length must be a multiple of 3 (" << m << "). Exiting!" << endl;
		exit(1);
	}

	// DP matrices for match/mismatch (D), insertion (P), and deletion (Q)
	Eigen::MatrixXf D = Eigen::MatrixXf::Ones(m+1,n+1);
	Eigen::MatrixXf P = Eigen::MatrixXf::Ones(m+1,n+1);
	Eigen::MatrixXf Q = Eigen::MatrixXf::Ones(m+1,n+1);

	D = D * std::numeric_limits<float>::max();
	P = D;
	Q = D;

	// backtracking info matrices for match/mismatch (Bd), insert (Bp), and deletion (Bq)
	Eigen::MatrixXd Bd = Eigen::MatrixXd::Ones(m+1,n+1);
	Eigen::MatrixXd Bp = Eigen::MatrixXd::Ones(m+1,n+1);
	Eigen::MatrixXd Bq = Eigen::MatrixXd::Ones(m+1,n+1);
	Bd = Bd * (-1);
	Bp = Bd;
	Bq = Bd;

	double insertion = 0.001;
	double deletion = 0.001;
	double insertion_ext = 1.0-(1.0/6.0);
	double deletion_ext = 1.0-(1.0/6.0);

	Eigen::Vector4d nuc_freqs(0.308, 0.185, 0.199, 0.308);

	// DP and backtracking matrices initialization

	// fill first values on D that are independent
	D(0,0) = 0.0;
	Bd(0,0) = 0;
	D(0,1) = -log(insertion) - log(nuc_freqs[nucs[seq_b[0]]]) -log(1.0-insertion_ext);
	P(0,1) = -log(insertion) - log(nuc_freqs[nucs[seq_b[0]]]) -log(1.0-insertion_ext);
	Bd(0,1) = 1;
	Bp(0,1) = 2;
	D(1,0) = -log(1.0 - insertion) - log(deletion) -log(1.0 - deletion_ext);
	Q(1,0) = -log(1.0 - insertion) - log(deletion) -log(1.0 - deletion_ext);
	Bd(1,0) = 2;
	Bq(1,0) = 2;

	// fill first row of D
	if(n+1>=2) {
		for(int j=2; j<n+1; j++) {
			D(0,j) = D(0,j-1) - log(insertion_ext) - log(nuc_freqs[nucs[seq_b[j-1]]]);
			P(0,j) = P(0,j-1) - log(insertion_ext) - log(nuc_freqs[nucs[seq_b[j-1]]]);
			Bd(0,j) = 1;
			Bp(0,j) = 1;
		}
	}

	// fill first column of D
	if(m+1>=2) {
		for(int i=2; i<m+1; i++) {
			D(i,0) = D(i-1, 0) - log(deletion_ext);
			Q(i,0) = Q(i-1, 0) - log(deletion_ext);
			Bd(i,0) = 2;
			Bq(i,0) = 1;
		}
	}

	string codon;
	double p1,p2,q1,q2,d,argmin;

	for(int i=1; i<m+1; i++) {
		codon = seq_a.substr((((i-1)/3)*3),3); // current codon
		for(int j=1; j<n+1; j++) {
			// insertion
			p1 = P(i,j-1) -log(insertion_ext) -log(nuc_freqs[nucs[seq_b[j-1]]]);
			p2 = Bd(i,j-1) == 0 ? D(i,j-1) -log(insertion) -
				log(nuc_freqs[nucs[seq_b[j-1]]]) -log(1.0-insertion_ext) :
				Bd(i,j-1) == 1 ? D(i,j-1) -log(insertion_ext) -log(nuc_freqs[nucs[seq_b[j-1]]])
				: numeric_limits<double>::max();
			P(i,j) = min(p1,p2);
			Bp(i,j) = p1 < p2 ? 1 : 2; // 1 is insertion extension, 2 is insertion opening

			// deletion
			q1 = Q(i-1,j) -log(deletion_ext);
			q2 = Bd(i-1,j) == 0 ? D(i-1,j) -log(1.0 - insertion) -log(deletion) -log(1.0-deletion_ext) :
				Bd(i-1,j) == 1 ? D(i-1,j) -log(1.0 - deletion_ext) -log(deletion) :
				D(i-1,j) -log(deletion_ext);
			Q(i,j) = min(q1,q2);
			Bq(i,j) = q1 < q2 ? 1 : 2; // 1 is deletion extension, 2 is deletion opening

			// match/mismatch
			if(Bd(i-1,j-1) == 0) {
				d = D(i-1,j-1) -log(1.0 - insertion) -log(1.0 - deletion) -
					log(transition(codon, (i)%3, seq_b[j-1],p));
			} else if(Bd(i-1,j-1) == 1) {
				d = D(i-1,j-1) -log(1.0 - deletion) -log(transition(codon, (i)%3, seq_b[j-1],p));
			} else {
				d = D(i-1,j-1) -log(transition(codon, (i)%3, seq_b[j-1],p));
			}

			// D[i,j] = highest weight between insertion, deletion, and match/mismatch
			//	in this case, lowest (-log(weight)) value
			if(d < P(i,j)) {
				if(d < Q(i,j)) {
					D(i,j) = d;
					Bd(i,j) = 0;
				} else {
					D(i,j) = Q(i,j);
					Bd(i,j) = 2;
				}
			} else {
				if(P(i,j) < Q(i,j)) {
					D(i,j) = P(i,j);
					Bd(i,j) = 1;
				} else {
					D(i,j) = Q(i,j);
					Bd(i,j) = 2;
				}
			}

		}
	}

	w = D(m,n); // weight

	// backtracking to obtain alignment
	return backtracking(Bd, Bp, Bq, seq_a, seq_b);
}

/* Return value from marginal MG94 model p matrix for a given transition */
double transition(string codon, int position, char nucleotide, Eigen::Tensor<double, 3>& p) {
	unordered_map<char, int> nucs = {{'A',0},{'C',1},{'G',2},{'T',3}};
	unordered_map<string, int> codons = {{"AAA",0},{"AAC",1},\
	{"AAG",2},{"AAT",3},{"ACA",4},{"ACC",5},{"ACG",6},{"ACT",7},\
	{"AGA",8},{"AGC",9},{"AGG",10},{"AGT",11},{"ATA",12},{"ATC",13},\
	{"ATG",14},{"ATT",15},{"CAA",16},{"CAC",17},{"CAG",18},{"CAT",19},\
	{"CCA",20},{"CCC",21},{"CCG",22},{"CCT",23},{"CGA",24},{"CGC",25},\
	{"CGG",26},{"CGT",27},{"CTA",28},{"CTC",29},{"CTG",30},{"CTT",31},\
	{"GAA",32},{"GAC",33},{"GAG",34},{"GAT",35},{"GCA",36},{"GCC",37},\
	{"GCG",38},{"GCT",39},{"GGA",40},{"GGC",41},{"GGG",42},{"GGT",43},\
	{"GTA",44},{"GTC",45},{"GTG",46},{"GTT",47},{"TAA",48},{"TAC",49},\
	{"TAG",50},{"TAT",51},{"TCA",52},{"TCC",53},{"TCG",54},{"TCT",55},\
	{"TGA",56},{"TGC",57},{"TGG",58},{"TGT",59},{"TTA",60},{"TTC",61},\
	{"TTG",62},{"TTT",63}};

	position = position == 0 ? 2 : --position;

	return(p(codons[codon], position, nucs[nucleotide]));

}

/* Recover alignment given backtracking matrices for DP alignment */
vector<string> backtracking(Eigen::MatrixXd Bd, Eigen::MatrixXd Bp, Eigen::MatrixXd Bq, string seqa, string seqb) {
	int i = seqa.length();
	int j = seqb.length();

	vector<string> alignment;
	alignment.push_back(string());
	alignment.push_back(string());

	while((i != 0) || (j != 0)) {
		// match/mismatch
		if(Bd(i,j) == 0) {
			alignment[0].insert(0,1,seqa[i-1]);
			alignment[1].insert(0,1,seqb[j-1]);
			i--;
			j--;
		// insertion
		} else if(Bd(i,j) == 1) {
			while(Bp(i,j) == 1) {
				alignment[0].insert(0,1,'-');
				alignment[1].insert(0,1,seqb[j-1]);
				j--;
			}
			alignment[0].insert(0,1,'-');
			alignment[1].insert(0,1,seqb[j-1]);
			j--;
		// deletion
		} else {
			while(Bq(i,j) ==  1) {
				alignment[0].insert(0,1,seqa[i-1]);
				alignment[1].insert(0,1,'-');
				i--;
			}
			alignment[0].insert(0,1,seqa[i-1]);
			alignment[1].insert(0,1,'-');
			i--;
		}
	}

	return alignment;

}

float alignment_score(vector<string> alignment) {
	int state = 0;
	double weight = 0.0;
	string codon;

	double insertion = 0.001;
	double deletion = 0.001;
	double insertion_ext = 1.0-(1.0/6.0);
	double deletion_ext = 1.0-(1.0/6.0);

	// P matrix for marginal Muse and Gaut codon model
	Eigen::Tensor<double, 3> p(64,3,4);
	mg94_marginal_p(p);
	unordered_map<char, int> nucs = {{'A',0},{'C',1},{'G',2},{'T',3}};

	Eigen::Vector4d nuc_freqs(0.308, 0.185, 0.199, 0.308);

	for(int i = 0; i < alignment[0].length(); i++){
		codon = alignment[0].substr((i/3)*3,3); // current codon
		switch (state) {
			case 0: if(alignment[0][i] == '-') {
						// insertion;
						weight = weight - log(insertion) - log(nuc_freqs[nucs[alignment[1][i]]]);
						state = 1;
					} else if(alignment[1][i] == '-') {
						// deletion;
						weight = weight - log(1.0 - insertion) - log(deletion);
						state = 2;
					} else {
						// match/mismatch;
						weight = weight - log(1.0 - insertion) - log(1.0 - deletion) -
							log(transition(codon, (i+1)%3, alignment[1][i],p));
					}
					break;

			case 1: if(alignment[0][i] == '-') {
						// insertion_ext
						weight = weight - log(insertion_ext) - log(nuc_freqs[nucs[alignment[1][i]]]);
					} else if(alignment[1][i] == '-') {
						// deletion
						weight = weight - log(1.0 - insertion_ext) - log(deletion);
						state = 2;
					} else {
						// match/mismatch
						weight = weight - log(1.0 - insertion_ext) - log(1.0 - deletion) -
							log(transition(codon, (i+1)%3, alignment[1][i],p));
						state = 0;
					}
					break;

			case 2: if(alignment[0][i] == '-') {
						cout << "Insertion after deletion is not modeled. Exiting!";
						exit(3);
					} else if(alignment[1][i] == '-') {
						// deletion_ext
						weight = weight -  log(deletion_ext);
					} else {
						// match/mismatch
						weight = weight - log(1.0 - deletion_ext) - log(transition(codon, (i+1)%3, alignment[1][i],p));
						state = 0;
					}
		}
	}

	return(weight);
}
