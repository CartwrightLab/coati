/*
# Copyright (c) 2020 Reed A. Cartwright <reed@cartwright.ht>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
*/

#include <unistd.h>

#include <cstdlib>
#include <cstring>
#include <vector>

#include <coati/coati.hpp>

#include "@source_dir@/verb.hpp"

const char libexec_dir[] = "@prefix@/@libexecdir@";

int main(int argc, char * const argv[]) {
    COATI_VERB_RUNTIME_CHECK_VERSION_NUMBER_OR_RETURN();

    if((argc < 2) || (strcmp(argv[1],"help") == 0)) {
        std::cout << "Usage:   coati command [options]" << std::endl << std::endl;
        std::cout << "Commands available:   help"<< std::endl;
        std::cout << "                      alignpair" << std::endl;
        std::cout << "                      msa" << std::endl;
        std::cout << "                      sample" << std::endl;
        std::cout << "                      genseed" << std::endl;
        std::cout << "                      format" << std::endl;
        return EXIT_SUCCESS;
    }

    // construct path to coati executable for the verb command
    std::string exe_path{};
    exe_path += libexec_dir;
    exe_path += "/coati-";
    exe_path += argv[1];

    // construct new argument vector
    std::vector<char *> new_argv{};
    new_argv.push_back(exe_path.data());
    for(int i=2;i<argc;++i) {
        new_argv.push_back(argv[i]);
    }
    new_argv.push_back(nullptr);

    int result{-1};
    try {
        // transfer process to the executable
        result = ::execv(new_argv[0], new_argv.data());
    } catch(std::exception &e) {
        std::cerr << "ERROR: " << e.what() << std::endl;
    }

    // execv only returns if there was an error.
    if(result != 0) {
        return EXIT_FAILURE;
    }
}
